import { __toESM, require_react } from "./react-BaqBjuxQ.js";
import { media_airplay_button_default, media_captions_button_default, media_cast_button_default, media_chrome_button_default, media_chrome_dialog_default, media_chrome_range_default, media_container_default, media_control_bar_default, media_controller_default, media_duration_display_default, media_error_dialog_default, media_fullscreen_button_default, media_gesture_receiver_default, media_live_button_default, media_loading_indicator_default, media_mute_button_default, media_pip_button_default, media_play_button_default, media_playback_rate_button_default, media_poster_image_default, media_preview_chapter_display_default, media_preview_thumbnail_default, media_preview_time_display_default, media_seek_backward_button_default, media_seek_forward_button_default, media_text_display_default, media_time_display_default, media_time_range_default, media_tooltip_default, media_volume_range_default } from "./dist-BpDDXMyG.js";

//#region node_modules/ce-la-react/dist/ce-la-react.js
var import_react = /* @__PURE__ */ __toESM(require_react(), 1);
/**
* @license
* Copyright 2018 Google LLC
* SPDX-License-Identifier: BSD-3-Clause
*
* Modified version of `@lit/react` for vanilla custom elements with support for SSR.
*/
var reservedReactProps = /* @__PURE__ */ new Set([
	"style",
	"children",
	"ref",
	"key",
	"suppressContentEditableWarning",
	"suppressHydrationWarning",
	"dangerouslySetInnerHTML"
]);
var reactPropToAttrNameMap = {
	className: "class",
	htmlFor: "for"
};
function defaultToAttributeName(propName) {
	return propName.toLowerCase();
}
function defaultToAttributeValue(propValue) {
	if (typeof propValue === "boolean") return propValue ? "" : void 0;
	if (typeof propValue === "function") return void 0;
	if (typeof propValue === "object" && propValue !== null) return void 0;
	return propValue;
}
function createComponent({ react: React$1, tagName, elementClass, events, displayName, defaultProps, toAttributeName = defaultToAttributeName, toAttributeValue: toAttributeValue$1 = defaultToAttributeValue }) {
	const IS_REACT_19_OR_NEWER = Number.parseInt(React$1.version) >= 19;
	const ReactComponent = React$1.forwardRef((props, ref) => {
		const elementRef = React$1.useRef(null);
		const prevElemPropsRef = React$1.useRef(/* @__PURE__ */ new Map());
		const eventProps = {};
		const attrs = {};
		const reactProps = {};
		const elementProps = {};
		for (const [k, v] of Object.entries(props)) {
			if (reservedReactProps.has(k)) {
				reactProps[k] = v;
				continue;
			}
			const attrName = toAttributeName(reactPropToAttrNameMap[k] ?? k);
			if (elementClass.prototype && k in elementClass.prototype && !(k in (globalThis.HTMLElement?.prototype ?? {})) && !elementClass.observedAttributes?.some((attr) => attr === attrName)) {
				elementProps[k] = v;
				continue;
			}
			if (k.startsWith("on")) {
				eventProps[k] = v;
				continue;
			}
			const attrValue = toAttributeValue$1(v);
			if (attrName && attrValue != null) {
				attrs[attrName] = String(attrValue);
				if (!IS_REACT_19_OR_NEWER) reactProps[attrName] = attrValue;
			}
			if (attrName && IS_REACT_19_OR_NEWER) {
				const attrValueFromDefault = defaultToAttributeValue(v);
				if (attrValue !== attrValueFromDefault) reactProps[attrName] = attrValue;
				else reactProps[attrName] = v;
			}
		}
		if (typeof window !== "undefined") {
			for (const propName in eventProps) {
				const callback = eventProps[propName];
				const useCapture = propName.endsWith("Capture");
				const eventName = (events?.[propName] ?? propName.slice(2).toLowerCase()).slice(0, useCapture ? -7 : void 0);
				React$1.useLayoutEffect(() => {
					const eventTarget = elementRef?.current;
					if (!eventTarget || typeof callback !== "function") return;
					eventTarget.addEventListener(eventName, callback, useCapture);
					return () => {
						eventTarget.removeEventListener(eventName, callback, useCapture);
					};
				}, [elementRef?.current, callback]);
			}
			React$1.useLayoutEffect(() => {
				if (elementRef.current === null) return;
				const newElemProps = /* @__PURE__ */ new Map();
				for (const key in elementProps) {
					setProperty(elementRef.current, key, elementProps[key]);
					prevElemPropsRef.current.delete(key);
					newElemProps.set(key, elementProps[key]);
				}
				for (const [key, _value] of prevElemPropsRef.current) setProperty(elementRef.current, key, void 0);
				prevElemPropsRef.current = newElemProps;
			});
		}
		if (typeof window === "undefined" && elementClass?.getTemplateHTML && elementClass?.shadowRootOptions) {
			const { mode, delegatesFocus } = elementClass.shadowRootOptions;
			reactProps.children = [React$1.createElement("template", {
				shadowrootmode: mode,
				shadowrootdelegatesfocus: delegatesFocus,
				dangerouslySetInnerHTML: { __html: elementClass.getTemplateHTML(attrs, props) }
			}), reactProps.children];
		}
		return React$1.createElement(tagName, {
			...defaultProps,
			...reactProps,
			ref: React$1.useCallback((node) => {
				elementRef.current = node;
				if (typeof ref === "function") ref(node);
				else if (ref !== null) ref.current = node;
			}, [ref])
		});
	});
	ReactComponent.displayName = displayName ?? elementClass.name;
	return ReactComponent;
}
function setProperty(node, name, value) {
	node[name] = value;
	if (value == null && name in (globalThis.HTMLElement?.prototype ?? {})) node.removeAttribute(name);
}

//#endregion
//#region node_modules/media-chrome/dist/react/index.js
function toAttributeValue(propValue) {
	if (typeof propValue === "boolean") return propValue ? "" : void 0;
	if (typeof propValue === "function") return void 0;
	const isPrimitive = (v) => typeof v === "string" || typeof v === "number" || typeof v === "boolean";
	if (Array.isArray(propValue) && propValue.every(isPrimitive)) return propValue.join(" ");
	if (typeof propValue === "object" && propValue !== null) return void 0;
	return propValue;
}
const MediaGestureReceiver = createComponent({
	tagName: "media-gesture-receiver",
	elementClass: media_gesture_receiver_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaContainer = createComponent({
	tagName: "media-container",
	elementClass: media_container_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaController = createComponent({
	tagName: "media-controller",
	elementClass: media_controller_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaTooltip = createComponent({
	tagName: "media-tooltip",
	elementClass: media_tooltip_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaChromeButton = createComponent({
	tagName: "media-chrome-button",
	elementClass: media_chrome_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaAirplayButton = createComponent({
	tagName: "media-airplay-button",
	elementClass: media_airplay_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaCaptionsButton = createComponent({
	tagName: "media-captions-button",
	elementClass: media_captions_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaCastButton = createComponent({
	tagName: "media-cast-button",
	elementClass: media_cast_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaChromeDialog = createComponent({
	tagName: "media-chrome-dialog",
	elementClass: media_chrome_dialog_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaChromeRange = createComponent({
	tagName: "media-chrome-range",
	elementClass: media_chrome_range_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaControlBar = createComponent({
	tagName: "media-control-bar",
	elementClass: media_control_bar_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaTextDisplay = createComponent({
	tagName: "media-text-display",
	elementClass: media_text_display_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaDurationDisplay = createComponent({
	tagName: "media-duration-display",
	elementClass: media_duration_display_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaErrorDialog = createComponent({
	tagName: "media-error-dialog",
	elementClass: media_error_dialog_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaFullscreenButton = createComponent({
	tagName: "media-fullscreen-button",
	elementClass: media_fullscreen_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaLiveButton = createComponent({
	tagName: "media-live-button",
	elementClass: media_live_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaLoadingIndicator = createComponent({
	tagName: "media-loading-indicator",
	elementClass: media_loading_indicator_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaMuteButton = createComponent({
	tagName: "media-mute-button",
	elementClass: media_mute_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaPipButton = createComponent({
	tagName: "media-pip-button",
	elementClass: media_pip_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaPlaybackRateButton = createComponent({
	tagName: "media-playback-rate-button",
	elementClass: media_playback_rate_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaPlayButton = createComponent({
	tagName: "media-play-button",
	elementClass: media_play_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaPosterImage = createComponent({
	tagName: "media-poster-image",
	elementClass: media_poster_image_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaPreviewChapterDisplay = createComponent({
	tagName: "media-preview-chapter-display",
	elementClass: media_preview_chapter_display_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaPreviewThumbnail = createComponent({
	tagName: "media-preview-thumbnail",
	elementClass: media_preview_thumbnail_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaPreviewTimeDisplay = createComponent({
	tagName: "media-preview-time-display",
	elementClass: media_preview_time_display_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaSeekBackwardButton = createComponent({
	tagName: "media-seek-backward-button",
	elementClass: media_seek_backward_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaSeekForwardButton = createComponent({
	tagName: "media-seek-forward-button",
	elementClass: media_seek_forward_button_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaTimeDisplay = createComponent({
	tagName: "media-time-display",
	elementClass: media_time_display_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaTimeRange = createComponent({
	tagName: "media-time-range",
	elementClass: media_time_range_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});
const MediaVolumeRange = createComponent({
	tagName: "media-volume-range",
	elementClass: media_volume_range_default,
	react: import_react.default,
	toAttributeValue,
	defaultProps: { suppressHydrationWarning: true }
});

//#endregion
export { MediaAirplayButton, MediaCaptionsButton, MediaCastButton, MediaChromeButton, MediaChromeDialog, MediaChromeRange, MediaContainer, MediaControlBar, MediaController, MediaDurationDisplay, MediaErrorDialog, MediaFullscreenButton, MediaGestureReceiver, MediaLiveButton, MediaLoadingIndicator, MediaMuteButton, MediaPipButton, MediaPlayButton, MediaPlaybackRateButton, MediaPosterImage, MediaPreviewChapterDisplay, MediaPreviewThumbnail, MediaPreviewTimeDisplay, MediaSeekBackwardButton, MediaSeekForwardButton, MediaTextDisplay, MediaTimeDisplay, MediaTimeRange, MediaTooltip, MediaVolumeRange };
//# sourceMappingURL=media-chrome_react.js.map