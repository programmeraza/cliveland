{"version":3,"file":"@mui_material_Typography.js","names":["capitalize","styled","memoTheme","Typography","clsx","PropTypes"],"sources":["../../@mui/material/esm/utils/createSimplePaletteValueFilter.js","../../@mui/material/esm/Typography/typographyClasses.js","../../@mui/material/esm/Typography/Typography.js"],"sourcesContent":["/**\n * Type guard to check if the object has a \"main\" property of type string.\n *\n * @param obj - the object to check\n * @returns boolean\n */\nfunction hasCorrectMainProperty(obj) {\n  return typeof obj.main === 'string';\n}\n/**\n * Checks if the object conforms to the SimplePaletteColorOptions type.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param obj - The object to check\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns boolean\n */\nfunction checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {\n  if (!hasCorrectMainProperty(obj)) {\n    return false;\n  }\n  for (const value of additionalPropertiesToCheck) {\n    if (!obj.hasOwnProperty(value) || typeof obj[value] !== 'string') {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Creates a filter function used to filter simple palette color options.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns ([, value]: [any, PaletteColorOptions]) => boolean\n */\nexport default function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {\n  return ([, value]) => value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);\n}","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTypographyUtilityClass(slot) {\n  return generateUtilityClass('MuiTypography', slot);\n}\nconst typographyClasses = generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);\nexport default typographyClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled, internal_createExtendSxProp } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { getTypographyUtilityClass } from \"./typographyClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst v6Colors = {\n  primary: true,\n  secondary: true,\n  error: true,\n  info: true,\n  success: true,\n  warning: true,\n  textPrimary: true,\n  textSecondary: true,\n  textDisabled: true\n};\nconst extendSxProp = internal_createExtendSxProp();\nconst useUtilityClasses = ownerState => {\n  const {\n    align,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']\n  };\n  return composeClasses(slots, getTypographyUtilityClass, classes);\n};\nexport const TypographyRoot = styled('span', {\n  name: 'MuiTypography',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  margin: 0,\n  variants: [{\n    props: {\n      variant: 'inherit'\n    },\n    style: {\n      // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.\n      font: 'inherit',\n      lineHeight: 'inherit',\n      letterSpacing: 'inherit'\n    }\n  }, ...Object.entries(theme.typography).filter(([variant, value]) => variant !== 'inherit' && value && typeof value === 'object').map(([variant, value]) => ({\n    props: {\n      variant\n    },\n    style: value\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      color: (theme.vars || theme).palette[color].main\n    }\n  })), ...Object.entries(theme.palette?.text || {}).filter(([, value]) => typeof value === 'string').map(([color]) => ({\n    props: {\n      color: `text${capitalize(color)}`\n    },\n    style: {\n      color: (theme.vars || theme).palette.text[color]\n    }\n  })), {\n    props: ({\n      ownerState\n    }) => ownerState.align !== 'inherit',\n    style: {\n      textAlign: 'var(--Typography-textAlign)'\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.noWrap,\n    style: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.gutterBottom,\n    style: {\n      marginBottom: '0.35em'\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.paragraph,\n    style: {\n      marginBottom: 16\n    }\n  }]\n})));\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {\n  const {\n    color,\n    ...themeProps\n  } = useDefaultProps({\n    props: inProps,\n    name: 'MuiTypography'\n  });\n  const isSxColor = !v6Colors[color];\n  // TODO: Remove `extendSxProp` in v7\n  const props = extendSxProp({\n    ...themeProps,\n    ...(isSxColor && {\n      color\n    })\n  });\n  const {\n    align = 'inherit',\n    className,\n    component,\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    align,\n    color,\n    className,\n    component,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  };\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TypographyRoot, {\n    as: Component,\n    ref: ref,\n    className: clsx(classes.root, className),\n    ...other,\n    ownerState: ownerState,\n    style: {\n      ...(align !== 'inherit' && {\n        '--Typography-textAlign': align\n      }),\n      ...other.style\n    }\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'success', 'error', 'info', 'warning', 'textPrimary', 'textSecondary', 'textDisabled']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n  /**\n   * If `true`, the element will be a paragraph element.\n   * @default false\n   * @deprecated Use the `component` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes /* @typescript-to-proptypes-ignore */.object\n} : void 0;\nexport default Typography;"],"mappings":"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"}