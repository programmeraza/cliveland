{"version":3,"file":"DefaultPropsProvider-CjFsVT2B.js","names":["clsx","DefaultPropsProvider","PropTypes","SystemDefaultPropsProvider","PropTypes","useDefaultProps","useSystemDefaultProps"],"sources":["../../@mui/utils/esm/composeClasses/composeClasses.js","../../@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js","../../@mui/utils/esm/resolveProps/resolveProps.js","../../@mui/system/esm/DefaultPropsProvider/DefaultPropsProvider.js","../../@mui/material/esm/utils/memoTheme.js","../../@mui/material/esm/DefaultPropsProvider/DefaultPropsProvider.js"],"sourcesContent":["/* eslint no-restricted-syntax: 0, prefer-template: 0, guard-for-in: 0\n   ---\n   These rules are preventing the performance optimizations below.\n */\n\n/**\n * Compose classes from multiple sources.\n *\n * @example\n * ```tsx\n * const slots = {\n *  root: ['root', 'primary'],\n *  label: ['label'],\n * };\n *\n * const getUtilityClass = (slot) => `MuiButton-${slot}`;\n *\n * const classes = {\n *   root: 'my-root-class',\n * };\n *\n * const output = composeClasses(slots, getUtilityClass, classes);\n * // {\n * //   root: 'MuiButton-root MuiButton-primary my-root-class',\n * //   label: 'MuiButton-label',\n * // }\n * ```\n *\n * @param slots a list of classes for each possible slot\n * @param getUtilityClass a function to resolve the class based on the slot name\n * @param classes the input classes from props\n * @returns the resolved classes for all slots\n */\nexport default function composeClasses(slots, getUtilityClass, classes = undefined) {\n  const output = {};\n  for (const slotName in slots) {\n    const slot = slots[slotName];\n    let buffer = '';\n    let start = true;\n    for (let i = 0; i < slot.length; i += 1) {\n      const value = slot[i];\n      if (value) {\n        buffer += (start === true ? '' : ' ') + getUtilityClass(value);\n        start = false;\n        if (classes && classes[value]) {\n          buffer += ' ' + classes[value];\n        }\n      }\n    }\n    output[slotName] = buffer;\n  }\n  return output;\n}","import generateUtilityClass from \"../generateUtilityClass/index.js\";\nexport default function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {\n  const result = {};\n  slots.forEach(slot => {\n    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);\n  });\n  return result;\n}","import clsx from 'clsx';\n\n/**\n * Add keys, values of `defaultProps` that does not exist in `props`\n * @param defaultProps\n * @param props\n * @param mergeClassNameAndStyle If `true`, merges `className` and `style` props instead of overriding them.\n *   When `false` (default), props override defaultProps. When `true`, `className` values are concatenated\n *   and `style` objects are merged with props taking precedence.\n * @returns resolved props\n */\nexport default function resolveProps(defaultProps, props, mergeClassNameAndStyle = false) {\n  const output = {\n    ...props\n  };\n  for (const key in defaultProps) {\n    if (Object.prototype.hasOwnProperty.call(defaultProps, key)) {\n      const propName = key;\n      if (propName === 'components' || propName === 'slots') {\n        output[propName] = {\n          ...defaultProps[propName],\n          ...output[propName]\n        };\n      } else if (propName === 'componentsProps' || propName === 'slotProps') {\n        const defaultSlotProps = defaultProps[propName];\n        const slotProps = props[propName];\n        if (!slotProps) {\n          output[propName] = defaultSlotProps || {};\n        } else if (!defaultSlotProps) {\n          output[propName] = slotProps;\n        } else {\n          output[propName] = {\n            ...slotProps\n          };\n          for (const slotKey in defaultSlotProps) {\n            if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {\n              const slotPropName = slotKey;\n              output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName], mergeClassNameAndStyle);\n            }\n          }\n        }\n      } else if (propName === 'className' && mergeClassNameAndStyle && props.className) {\n        output.className = clsx(defaultProps?.className, props?.className);\n      } else if (propName === 'style' && mergeClassNameAndStyle && props.style) {\n        output.style = {\n          ...defaultProps?.style,\n          ...props?.style\n        };\n      } else if (output[propName] === undefined) {\n        output[propName] = defaultProps[propName];\n      }\n    }\n  }\n  return output;\n}","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport resolveProps from '@mui/utils/resolveProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PropsContext = /*#__PURE__*/React.createContext(undefined);\nfunction DefaultPropsProvider({\n  value,\n  children\n}) {\n  return /*#__PURE__*/_jsx(PropsContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DefaultPropsProvider.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  value: PropTypes.object\n} : void 0;\nfunction getThemeProps(params) {\n  const {\n    theme,\n    name,\n    props\n  } = params;\n  if (!theme || !theme.components || !theme.components[name]) {\n    return props;\n  }\n  const config = theme.components[name];\n  if (config.defaultProps) {\n    // compatible with v5 signature\n    return resolveProps(config.defaultProps, props, theme.components.mergeClassNameAndStyle);\n  }\n  if (!config.styleOverrides && !config.variants) {\n    // v6 signature, no property 'defaultProps'\n    return resolveProps(config, props, theme.components.mergeClassNameAndStyle);\n  }\n  return props;\n}\nexport function useDefaultProps({\n  props,\n  name\n}) {\n  const ctx = React.useContext(PropsContext);\n  return getThemeProps({\n    props,\n    name,\n    theme: {\n      components: ctx\n    }\n  });\n}\nexport default DefaultPropsProvider;","import { unstable_memoTheme } from '@mui/system';\nconst memoTheme = unstable_memoTheme;\nexport default memoTheme;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport SystemDefaultPropsProvider, { useDefaultProps as useSystemDefaultProps } from '@mui/system/DefaultPropsProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction DefaultPropsProvider(props) {\n  return /*#__PURE__*/_jsx(SystemDefaultPropsProvider, {\n    ...props\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DefaultPropsProvider.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  value: PropTypes.object.isRequired\n} : void 0;\nexport default DefaultPropsProvider;\nexport function useDefaultProps(params) {\n  return useSystemDefaultProps(params);\n}"],"mappings":"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"}