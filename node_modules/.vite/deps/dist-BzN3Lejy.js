import { __toESM, require_react } from "./react-BaqBjuxQ.js";
import { Hls } from "./hls-DIWQsosh.js";
import { CustomVideoElement, MediaTracksMixin } from "./dist-CKRp1NGH.js";

//#region node_modules/mux-embed/dist/mux.mjs
var import_react = /* @__PURE__ */ __toESM(require_react(), 1);
var Yr$1 = Object.create;
var ft$1 = Object.defineProperty;
var Xr = Object.getOwnPropertyDescriptor;
var $r$1 = Object.getOwnPropertyNames;
var Zr = Object.getPrototypeOf, ea$1 = Object.prototype.hasOwnProperty;
var pt$2 = function(r$3, e$1) {
	return function() {
		return r$3 && (e$1 = r$3(r$3 = 0)), e$1;
	};
};
var B$4 = function(r$3, e$1) {
	return function() {
		return e$1 || r$3((e$1 = { exports: {} }).exports, e$1), e$1.exports;
	};
};
var ta$1 = function(r$3, e$1, t$1, i$1) {
	if (e$1 && typeof e$1 == "object" || typeof e$1 == "function") for (var a$2 = $r$1(e$1), n$2 = 0, o$3 = a$2.length, s$2; n$2 < o$3; n$2++) s$2 = a$2[n$2], !ea$1.call(r$3, s$2) && s$2 !== t$1 && ft$1(r$3, s$2, {
		get: function(u$4) {
			return e$1[u$4];
		}.bind(null, s$2),
		enumerable: !(i$1 = Xr(e$1, s$2)) || i$1.enumerable
	});
	return r$3;
};
var V$1 = function(r$3, e$1, t$1) {
	return t$1 = r$3 != null ? Yr$1(Zr(r$3)) : {}, ta$1(e$1 || !r$3 || !r$3.__esModule ? ft$1(t$1, "default", {
		value: r$3,
		enumerable: !0
	}) : t$1, r$3);
};
var J$2 = B$4(function(ji, yt$1) {
	var xe$3;
	typeof window != "undefined" ? xe$3 = window : typeof global != "undefined" ? xe$3 = global : typeof self != "undefined" ? xe$3 = self : xe$3 = {};
	yt$1.exports = xe$3;
});
function U$2(r$3, e$1) {
	return e$1 != null && typeof Symbol != "undefined" && e$1[Symbol.hasInstance] ? !!e$1[Symbol.hasInstance](r$3) : U$2(r$3, e$1);
}
var te$3 = pt$2(function() {
	te$3();
});
function Ne$2(r$3) {
	"@swc/helpers - typeof";
	return r$3 && typeof Symbol != "undefined" && r$3.constructor === Symbol ? "symbol" : typeof r$3;
}
var Je$2 = pt$2(function() {});
var Ye$1 = B$4(function(Ts, cr) {
	var lr = Array.prototype.slice;
	cr.exports = Pa;
	function Pa(r$3, e$1) {
		for (("length" in r$3) || (r$3 = [r$3]), r$3 = lr.call(r$3); r$3.length;) {
			var t$1 = r$3.shift(), i$1 = e$1(t$1);
			if (i$1) return i$1;
			t$1.childNodes && t$1.childNodes.length && (r$3 = lr.call(t$1.childNodes).concat(r$3));
		}
	}
});
var fr = B$4(function(Es, _r) {
	te$3();
	_r.exports = me$3;
	function me$3(r$3, e$1) {
		if (!U$2(this, me$3)) return new me$3(r$3, e$1);
		this.data = r$3, this.nodeValue = r$3, this.length = r$3.length, this.ownerDocument = e$1 || null;
	}
	me$3.prototype.nodeType = 8;
	me$3.prototype.nodeName = "#comment";
	me$3.prototype.toString = function() {
		return "[object Comment]";
	};
});
var vr = B$4(function(xs, pr) {
	te$3();
	pr.exports = ae$3;
	function ae$3(r$3, e$1) {
		if (!U$2(this, ae$3)) return new ae$3(r$3);
		this.data = r$3 || "", this.length = this.data.length, this.ownerDocument = e$1 || null;
	}
	ae$3.prototype.type = "DOMTextNode";
	ae$3.prototype.nodeType = 3;
	ae$3.prototype.nodeName = "#text";
	ae$3.prototype.toString = function() {
		return this.data;
	};
	ae$3.prototype.replaceData = function(e$1, t$1, i$1) {
		var a$2 = this.data, n$2 = a$2.substring(0, e$1), o$3 = a$2.substring(e$1 + t$1, a$2.length);
		this.data = n$2 + i$1 + o$3, this.length = this.data.length;
	};
});
var Xe$1 = B$4(function(Ds, mr) {
	mr.exports = Ia;
	function Ia(r$3) {
		var e$1 = this, t$1 = r$3.type;
		r$3.target || (r$3.target = e$1), e$1.listeners || (e$1.listeners = {});
		var i$1 = e$1.listeners[t$1];
		if (i$1) return i$1.forEach(function(a$2) {
			r$3.currentTarget = e$1, typeof a$2 == "function" ? a$2(r$3) : a$2.handleEvent(r$3);
		});
		e$1.parentNode && e$1.parentNode.dispatchEvent(r$3);
	}
});
var $e$1 = B$4(function(Ss, hr) {
	hr.exports = Na;
	function Na(r$3, e$1) {
		var t$1 = this;
		t$1.listeners || (t$1.listeners = {}), t$1.listeners[r$3] || (t$1.listeners[r$3] = []), t$1.listeners[r$3].indexOf(e$1) === -1 && t$1.listeners[r$3].push(e$1);
	}
});
var Ze = B$4(function(Rs, yr) {
	yr.exports = La;
	function La(r$3, e$1) {
		var t$1 = this;
		if (t$1.listeners && t$1.listeners[r$3]) {
			var i$1 = t$1.listeners[r$3], a$2 = i$1.indexOf(e$1);
			a$2 !== -1 && i$1.splice(a$2, 1);
		}
	}
});
var wr = B$4(function(As, Tr) {
	Je$2();
	Tr.exports = gr;
	var Ca$1 = [
		"area",
		"base",
		"br",
		"col",
		"embed",
		"hr",
		"img",
		"input",
		"keygen",
		"link",
		"menuitem",
		"meta",
		"param",
		"source",
		"track",
		"wbr"
	];
	function gr(r$3) {
		switch (r$3.nodeType) {
			case 3: return et$2(r$3.data);
			case 8: return "<!--" + r$3.data + "-->";
			default: return Ma(r$3);
		}
	}
	function Ma(r$3) {
		var e$1 = [], t$1 = r$3.tagName;
		return r$3.namespaceURI === "http://www.w3.org/1999/xhtml" && (t$1 = t$1.toLowerCase()), e$1.push("<" + t$1 + Fa(r$3) + Ua(r$3)), Ca$1.indexOf(t$1) > -1 ? e$1.push(" />") : (e$1.push(">"), r$3.childNodes.length ? e$1.push.apply(e$1, r$3.childNodes.map(gr)) : r$3.textContent || r$3.innerText ? e$1.push(et$2(r$3.textContent || r$3.innerText)) : r$3.innerHTML && e$1.push(r$3.innerHTML), e$1.push("</" + t$1 + ">")), e$1.join("");
	}
	function Ha(r$3, e$1) {
		var t$1 = Ne$2(r$3[e$1]);
		return e$1 === "style" && Object.keys(r$3.style).length > 0 ? !0 : r$3.hasOwnProperty(e$1) && (t$1 === "string" || t$1 === "boolean" || t$1 === "number") && e$1 !== "nodeName" && e$1 !== "className" && e$1 !== "tagName" && e$1 !== "textContent" && e$1 !== "innerText" && e$1 !== "namespaceURI" && e$1 !== "innerHTML";
	}
	function Ba(r$3) {
		if (typeof r$3 == "string") return r$3;
		var e$1 = "";
		return Object.keys(r$3).forEach(function(t$1) {
			var i$1 = r$3[t$1];
			t$1 = t$1.replace(/[A-Z]/g, function(a$2) {
				return "-" + a$2.toLowerCase();
			}), e$1 += t$1 + ":" + i$1 + ";";
		}), e$1;
	}
	function Ua(r$3) {
		var e$1 = r$3.dataset, t$1 = [];
		for (var i$1 in e$1) t$1.push({
			name: "data-" + i$1,
			value: e$1[i$1]
		});
		return t$1.length ? br(t$1) : "";
	}
	function br(r$3) {
		var e$1 = [];
		return r$3.forEach(function(t$1) {
			var i$1 = t$1.name, a$2 = t$1.value;
			i$1 === "style" && (a$2 = Ba(a$2)), e$1.push(i$1 + "=\"" + Va(a$2) + "\"");
		}), e$1.length ? " " + e$1.join(" ") : "";
	}
	function Fa(r$3) {
		var e$1 = [];
		for (var t$1 in r$3) Ha(r$3, t$1) && e$1.push({
			name: t$1,
			value: r$3[t$1]
		});
		for (var i$1 in r$3._attributes) for (var a$2 in r$3._attributes[i$1]) {
			var n$2 = r$3._attributes[i$1][a$2], o$3 = (n$2.prefix ? n$2.prefix + ":" : "") + a$2;
			e$1.push({
				name: o$3,
				value: n$2.value
			});
		}
		return r$3.className && e$1.push({
			name: "class",
			value: r$3.className
		}), e$1.length ? br(e$1) : "";
	}
	function et$2(r$3) {
		var e$1 = "";
		return typeof r$3 == "string" ? e$1 = r$3 : r$3 && (e$1 = r$3.toString()), e$1.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
	}
	function Va(r$3) {
		return et$2(r$3).replace(/"/g, "&quot;");
	}
});
var rt$2 = B$4(function(Ps, kr) {
	te$3();
	var tt$1 = Ye$1(), Wa = Xe$1(), ja = $e$1(), Ga = Ze(), Ja = wr(), Er = "http://www.w3.org/1999/xhtml";
	kr.exports = I$3;
	function I$3(r$3, e$1, t$1) {
		if (!U$2(this, I$3)) return new I$3(r$3);
		var i$1 = t$1 === void 0 ? Er : t$1 || null;
		this.tagName = i$1 === Er ? String(r$3).toUpperCase() : r$3, this.nodeName = this.tagName, this.className = "", this.dataset = {}, this.childNodes = [], this.parentNode = null, this.style = {}, this.ownerDocument = e$1 || null, this.namespaceURI = i$1, this._attributes = {}, this.tagName === "INPUT" && (this.type = "text");
	}
	I$3.prototype.type = "DOMElement";
	I$3.prototype.nodeType = 1;
	I$3.prototype.appendChild = function(e$1) {
		return e$1.parentNode && e$1.parentNode.removeChild(e$1), this.childNodes.push(e$1), e$1.parentNode = this, e$1;
	};
	I$3.prototype.replaceChild = function(e$1, t$1) {
		e$1.parentNode && e$1.parentNode.removeChild(e$1);
		var i$1 = this.childNodes.indexOf(t$1);
		return t$1.parentNode = null, this.childNodes[i$1] = e$1, e$1.parentNode = this, t$1;
	};
	I$3.prototype.removeChild = function(e$1) {
		var t$1 = this.childNodes.indexOf(e$1);
		return this.childNodes.splice(t$1, 1), e$1.parentNode = null, e$1;
	};
	I$3.prototype.insertBefore = function(e$1, t$1) {
		e$1.parentNode && e$1.parentNode.removeChild(e$1);
		var i$1 = t$1 == null ? -1 : this.childNodes.indexOf(t$1);
		return i$1 > -1 ? this.childNodes.splice(i$1, 0, e$1) : this.childNodes.push(e$1), e$1.parentNode = this, e$1;
	};
	I$3.prototype.setAttributeNS = function(e$1, t$1, i$1) {
		var a$2 = null, n$2 = t$1, o$3 = t$1.indexOf(":");
		if (o$3 > -1 && (a$2 = t$1.substr(0, o$3), n$2 = t$1.substr(o$3 + 1)), this.tagName === "INPUT" && t$1 === "type") this.type = i$1;
		else {
			var s$2 = this._attributes[e$1] || (this._attributes[e$1] = {});
			s$2[n$2] = {
				value: i$1,
				prefix: a$2
			};
		}
	};
	I$3.prototype.getAttributeNS = function(e$1, t$1) {
		var i$1 = this._attributes[e$1], a$2 = i$1 && i$1[t$1] && i$1[t$1].value;
		return this.tagName === "INPUT" && t$1 === "type" ? this.type : typeof a$2 != "string" ? null : a$2;
	};
	I$3.prototype.removeAttributeNS = function(e$1, t$1) {
		var i$1 = this._attributes[e$1];
		i$1 && delete i$1[t$1];
	};
	I$3.prototype.hasAttributeNS = function(e$1, t$1) {
		var i$1 = this._attributes[e$1];
		return !!i$1 && t$1 in i$1;
	};
	I$3.prototype.setAttribute = function(e$1, t$1) {
		return this.setAttributeNS(null, e$1, t$1);
	};
	I$3.prototype.getAttribute = function(e$1) {
		return this.getAttributeNS(null, e$1);
	};
	I$3.prototype.removeAttribute = function(e$1) {
		return this.removeAttributeNS(null, e$1);
	};
	I$3.prototype.hasAttribute = function(e$1) {
		return this.hasAttributeNS(null, e$1);
	};
	I$3.prototype.removeEventListener = Ga;
	I$3.prototype.addEventListener = ja;
	I$3.prototype.dispatchEvent = Wa;
	I$3.prototype.focus = function() {};
	I$3.prototype.toString = function() {
		return Ja(this);
	};
	I$3.prototype.getElementsByClassName = function(e$1) {
		var t$1 = e$1.split(" "), i$1 = [];
		return tt$1(this, function(a$2) {
			if (a$2.nodeType === 1) {
				var o$3 = (a$2.className || "").split(" ");
				t$1.every(function(s$2) {
					return o$3.indexOf(s$2) !== -1;
				}) && i$1.push(a$2);
			}
		}), i$1;
	};
	I$3.prototype.getElementsByTagName = function(e$1) {
		e$1 = e$1.toLowerCase();
		var t$1 = [];
		return tt$1(this.childNodes, function(i$1) {
			i$1.nodeType === 1 && (e$1 === "*" || i$1.tagName.toLowerCase() === e$1) && t$1.push(i$1);
		}), t$1;
	};
	I$3.prototype.contains = function(e$1) {
		return tt$1(this, function(t$1) {
			return e$1 === t$1;
		}) || !1;
	};
});
var Dr = B$4(function(Ns, xr) {
	te$3();
	var at$3 = rt$2();
	xr.exports = K$2;
	function K$2(r$3) {
		if (!U$2(this, K$2)) return new K$2();
		this.childNodes = [], this.parentNode = null, this.ownerDocument = r$3 || null;
	}
	K$2.prototype.type = "DocumentFragment";
	K$2.prototype.nodeType = 11;
	K$2.prototype.nodeName = "#document-fragment";
	K$2.prototype.appendChild = at$3.prototype.appendChild;
	K$2.prototype.replaceChild = at$3.prototype.replaceChild;
	K$2.prototype.removeChild = at$3.prototype.removeChild;
	K$2.prototype.toString = function() {
		return this.childNodes.map(function(e$1) {
			return String(e$1);
		}).join("");
	};
});
var Rr = B$4(function(Ls, Sr) {
	Sr.exports = it$1;
	function it$1(r$3) {}
	it$1.prototype.initEvent = function(e$1, t$1, i$1) {
		this.type = e$1, this.bubbles = t$1, this.cancelable = i$1;
	};
	it$1.prototype.preventDefault = function() {};
});
var Ar = B$4(function(Ms, qr) {
	te$3();
	var Qa = Ye$1(), za = fr(), Ka = vr(), Re$2 = rt$2(), Ya = Dr(), Xa = Rr(), $a = Xe$1(), Za = $e$1(), ei = Ze();
	qr.exports = Be$1;
	function Be$1() {
		if (!U$2(this, Be$1)) return new Be$1();
		this.head = this.createElement("head"), this.body = this.createElement("body"), this.documentElement = this.createElement("html"), this.documentElement.appendChild(this.head), this.documentElement.appendChild(this.body), this.childNodes = [this.documentElement], this.nodeType = 9;
	}
	var j$2 = Be$1.prototype;
	j$2.createTextNode = function(e$1) {
		return new Ka(e$1, this);
	};
	j$2.createElementNS = function(e$1, t$1) {
		return new Re$2(t$1, this, e$1 === null ? null : String(e$1));
	};
	j$2.createElement = function(e$1) {
		return new Re$2(e$1, this);
	};
	j$2.createDocumentFragment = function() {
		return new Ya(this);
	};
	j$2.createEvent = function(e$1) {
		return new Xa(e$1);
	};
	j$2.createComment = function(e$1) {
		return new za(e$1, this);
	};
	j$2.getElementById = function(e$1) {
		e$1 = String(e$1);
		return Qa(this.childNodes, function(i$1) {
			if (String(i$1.id) === e$1) return i$1;
		}) || null;
	};
	j$2.getElementsByClassName = Re$2.prototype.getElementsByClassName;
	j$2.getElementsByTagName = Re$2.prototype.getElementsByTagName;
	j$2.contains = Re$2.prototype.contains;
	j$2.removeEventListener = ei;
	j$2.addEventListener = Za;
	j$2.dispatchEvent = $a;
});
var Pr = B$4(function(Hs, Or) {
	Or.exports = new (Ar())();
});
var nt$2 = B$4(function(Bs, Nr) {
	var Ir = typeof global != "undefined" ? global : typeof window != "undefined" ? window : {}, ri = Pr(), qe$1;
	typeof document != "undefined" ? qe$1 = document : (qe$1 = Ir["__GLOBAL_DOCUMENT_CACHE@4"], qe$1 || (qe$1 = Ir["__GLOBAL_DOCUMENT_CACHE@4"] = ri));
	Nr.exports = qe$1;
});
function vt$2(r$3) {
	if (Array.isArray(r$3)) return r$3;
}
function mt$2(r$3, e$1) {
	var t$1 = r$3 == null ? null : typeof Symbol != "undefined" && r$3[Symbol.iterator] || r$3["@@iterator"];
	if (t$1 != null) {
		var i$1 = [], a$2 = !0, n$2 = !1, o$3, s$2;
		try {
			for (t$1 = t$1.call(r$3); !(a$2 = (o$3 = t$1.next()).done) && (i$1.push(o$3.value), !(e$1 && i$1.length === e$1)); a$2 = !0);
		} catch (u$4) {
			n$2 = !0, s$2 = u$4;
		} finally {
			try {
				!a$2 && t$1.return != null && t$1.return();
			} finally {
				if (n$2) throw s$2;
			}
		}
		return i$1;
	}
}
function ht$1() {
	throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ke$2(r$3, e$1) {
	(e$1 == null || e$1 > r$3.length) && (e$1 = r$3.length);
	for (var t$1 = 0, i$1 = new Array(e$1); t$1 < e$1; t$1++) i$1[t$1] = r$3[t$1];
	return i$1;
}
function Ae$2(r$3, e$1) {
	if (r$3) {
		if (typeof r$3 == "string") return ke$2(r$3, e$1);
		var t$1 = Object.prototype.toString.call(r$3).slice(8, -1);
		if (t$1 === "Object" && r$3.constructor && (t$1 = r$3.constructor.name), t$1 === "Map" || t$1 === "Set") return Array.from(t$1);
		if (t$1 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t$1)) return ke$2(r$3, e$1);
	}
}
function H$2(r$3, e$1) {
	return vt$2(r$3) || mt$2(r$3, e$1) || Ae$2(r$3, e$1) || ht$1();
}
var be$1 = V$1(J$2());
var Ge$1 = V$1(J$2());
var gt$2 = V$1(J$2()), A$2 = { now: function() {
	var r$3 = gt$2.default.performance, e$1 = r$3 && r$3.timing, t$1 = e$1 && e$1.navigationStart, i$1 = typeof t$1 == "number" && typeof r$3.now == "function" ? t$1 + r$3.now() : Date.now();
	return Math.round(i$1);
} };
var ee$3 = function() {
	var e$1, t$1, i$1;
	if (typeof ((e$1 = Ge$1.default.crypto) === null || e$1 === void 0 ? void 0 : e$1.getRandomValues) == "function") {
		i$1 = new Uint8Array(32), Ge$1.default.crypto.getRandomValues(i$1);
		for (var a$2 = 0; a$2 < 32; a$2++) i$1[a$2] = i$1[a$2] % 16;
	} else {
		i$1 = [];
		for (var n$2 = 0; n$2 < 32; n$2++) i$1[n$2] = Math.random() * 16 | 0;
	}
	var o$3 = 0;
	t$1 = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(p$5) {
		var b$4 = p$5 === "x" ? i$1[o$3] : i$1[o$3] & 3 | 8;
		return o$3++, b$4.toString(16);
	});
	var s$2 = A$2.now(), u$4 = s$2 == null ? void 0 : s$2.toString(16).substring(3);
	return u$4 ? t$1.substring(0, 28) + u$4 : t$1;
}, Oe$1 = function() {
	return ("000000" + (Math.random() * Math.pow(36, 6) << 0).toString(36)).slice(-6);
};
var Q$2 = function(e$1) {
	if (e$1 && typeof e$1.nodeName != "undefined") return e$1.muxId || (e$1.muxId = Oe$1()), e$1.muxId;
	var t$1;
	try {
		t$1 = document.querySelector(e$1);
	} catch (i$1) {}
	return t$1 && !t$1.muxId && (t$1.muxId = e$1), (t$1 == null ? void 0 : t$1.muxId) || e$1;
}, se$3 = function(e$1) {
	var t$1;
	e$1 && typeof e$1.nodeName != "undefined" ? (t$1 = e$1, e$1 = Q$2(t$1)) : t$1 = document.querySelector(e$1);
	var i$1 = t$1 && t$1.nodeName ? t$1.nodeName.toLowerCase() : "";
	return [
		t$1,
		e$1,
		i$1
	];
};
function bt$2(r$3) {
	if (Array.isArray(r$3)) return ke$2(r$3);
}
function Tt$2(r$3) {
	if (typeof Symbol != "undefined" && r$3[Symbol.iterator] != null || r$3["@@iterator"] != null) return Array.from(r$3);
}
function wt$2() {
	throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function W$1(r$3) {
	return bt$2(r$3) || Tt$2(r$3) || Ae$2(r$3) || wt$2();
}
var Y$3 = {
	TRACE: 0,
	DEBUG: 1,
	INFO: 2,
	WARN: 3,
	ERROR: 4,
	SILENT: 5
}, Et$2 = function(r$3) {
	var e$1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3, t$1, i$1, a$2, n$2, o$3, s$2 = r$3 ? [console, r$3] : [console], u$4 = (t$1 = console.trace).bind.apply(t$1, W$1(s$2)), p$5 = (i$1 = console.info).bind.apply(i$1, W$1(s$2)), b$4 = (a$2 = console.debug).bind.apply(a$2, W$1(s$2)), k$1 = (n$2 = console.warn).bind.apply(n$2, W$1(s$2)), y$4 = (o$3 = console.error).bind.apply(o$3, W$1(s$2)), c$3 = e$1;
	return {
		trace: function() {
			for (var T$2 = arguments.length, x$5 = new Array(T$2), m$5 = 0; m$5 < T$2; m$5++) x$5[m$5] = arguments[m$5];
			if (!(c$3 > Y$3.TRACE)) return u$4.apply(void 0, W$1(x$5));
		},
		debug: function() {
			for (var T$2 = arguments.length, x$5 = new Array(T$2), m$5 = 0; m$5 < T$2; m$5++) x$5[m$5] = arguments[m$5];
			if (!(c$3 > Y$3.DEBUG)) return b$4.apply(void 0, W$1(x$5));
		},
		info: function() {
			for (var T$2 = arguments.length, x$5 = new Array(T$2), m$5 = 0; m$5 < T$2; m$5++) x$5[m$5] = arguments[m$5];
			if (!(c$3 > Y$3.INFO)) return p$5.apply(void 0, W$1(x$5));
		},
		warn: function() {
			for (var T$2 = arguments.length, x$5 = new Array(T$2), m$5 = 0; m$5 < T$2; m$5++) x$5[m$5] = arguments[m$5];
			if (!(c$3 > Y$3.WARN)) return k$1.apply(void 0, W$1(x$5));
		},
		error: function() {
			for (var T$2 = arguments.length, x$5 = new Array(T$2), m$5 = 0; m$5 < T$2; m$5++) x$5[m$5] = arguments[m$5];
			if (!(c$3 > Y$3.ERROR)) return y$4.apply(void 0, W$1(x$5));
		},
		get level() {
			return c$3;
		},
		set level(v$3) {
			v$3 !== this.level && (c$3 = v$3 != null ? v$3 : e$1);
		}
	};
};
var q$2 = Et$2("[mux]");
var Pe$2 = V$1(J$2());
function ce$2() {
	return (Pe$2.default.doNotTrack || Pe$2.default.navigator && Pe$2.default.navigator.doNotTrack) === "1";
}
function g$6(r$3) {
	if (r$3 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	return r$3;
}
te$3();
function D$2(r$3, e$1) {
	if (!U$2(r$3, e$1)) throw new TypeError("Cannot call a class as a function");
}
function kt$1(r$3, e$1) {
	for (var t$1 = 0; t$1 < e$1.length; t$1++) {
		var i$1 = e$1[t$1];
		i$1.enumerable = i$1.enumerable || !1, i$1.configurable = !0, "value" in i$1 && (i$1.writable = !0), Object.defineProperty(r$3, i$1.key, i$1);
	}
}
function L$1(r$3, e$1, t$1) {
	return e$1 && kt$1(r$3.prototype, e$1), t$1 && kt$1(r$3, t$1), r$3;
}
function l$2(r$3, e$1, t$1) {
	return e$1 in r$3 ? Object.defineProperty(r$3, e$1, {
		value: t$1,
		enumerable: !0,
		configurable: !0,
		writable: !0
	}) : r$3[e$1] = t$1, r$3;
}
function X$3(r$3) {
	return X$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t$1) {
		return t$1.__proto__ || Object.getPrototypeOf(t$1);
	}, X$3(r$3);
}
function xt$2(r$3, e$1) {
	for (; !Object.prototype.hasOwnProperty.call(r$3, e$1) && (r$3 = X$3(r$3), r$3 !== null););
	return r$3;
}
function De$1(r$3, e$1, t$1) {
	return typeof Reflect != "undefined" && Reflect.get ? De$1 = Reflect.get : De$1 = function(a$2, n$2, o$3) {
		var s$2 = xt$2(a$2, n$2);
		if (s$2) {
			var u$4 = Object.getOwnPropertyDescriptor(s$2, n$2);
			return u$4.get ? u$4.get.call(o$3 || a$2) : u$4.value;
		}
	}, De$1(r$3, e$1, t$1 || r$3);
}
function Ie$1(r$3, e$1) {
	return Ie$1 = Object.setPrototypeOf || function(i$1, a$2) {
		return i$1.__proto__ = a$2, i$1;
	}, Ie$1(r$3, e$1);
}
function Dt$2(r$3, e$1) {
	if (typeof e$1 != "function" && e$1 !== null) throw new TypeError("Super expression must either be null or a function");
	r$3.prototype = Object.create(e$1 && e$1.prototype, { constructor: {
		value: r$3,
		writable: !0,
		configurable: !0
	} }), e$1 && Ie$1(r$3, e$1);
}
function St$1() {
	if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham) return !1;
	if (typeof Proxy == "function") return !0;
	try {
		return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0;
	} catch (r$3) {
		return !1;
	}
}
Je$2();
function Rt$1(r$3, e$1) {
	return e$1 && (Ne$2(e$1) === "object" || typeof e$1 == "function") ? e$1 : g$6(r$3);
}
function qt$2(r$3) {
	var e$1 = St$1();
	return function() {
		var i$1 = X$3(r$3), a$2;
		if (e$1) {
			var n$2 = X$3(this).constructor;
			a$2 = Reflect.construct(i$1, arguments, n$2);
		} else a$2 = i$1.apply(this, arguments);
		return Rt$1(this, a$2);
	};
}
var F$1 = function(r$3) {
	return re$3(r$3)[0];
};
var re$3 = function(r$3) {
	if (typeof r$3 != "string" || r$3 === "") return ["localhost"];
	var i$1 = (r$3.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/) || [])[4], a$2;
	return i$1 && (a$2 = (i$1.match(/[^\.]+\.[^\.]+$/) || [])[0]), [i$1, a$2];
};
var Le$1 = V$1(J$2()), _e$2 = {
	exists: function() {
		var r$3 = Le$1.default.performance;
		return (r$3 && r$3.timing) !== void 0;
	},
	domContentLoadedEventEnd: function() {
		var r$3 = Le$1.default.performance, e$1 = r$3 && r$3.timing;
		return e$1 && e$1.domContentLoadedEventEnd;
	},
	navigationStart: function() {
		var r$3 = Le$1.default.performance, e$1 = r$3 && r$3.timing;
		return e$1 && e$1.navigationStart;
	}
};
function O$2(r$3, e$1, t$1) {
	t$1 = t$1 === void 0 ? 1 : t$1, r$3[e$1] = r$3[e$1] || 0, r$3[e$1] += t$1;
}
function ue$1(r$3) {
	for (var e$1 = 1; e$1 < arguments.length; e$1++) {
		var t$1 = arguments[e$1] != null ? arguments[e$1] : {}, i$1 = Object.keys(t$1);
		typeof Object.getOwnPropertySymbols == "function" && (i$1 = i$1.concat(Object.getOwnPropertySymbols(t$1).filter(function(a$2) {
			return Object.getOwnPropertyDescriptor(t$1, a$2).enumerable;
		}))), i$1.forEach(function(a$2) {
			l$2(r$3, a$2, t$1[a$2]);
		});
	}
	return r$3;
}
function ia$1(r$3, e$1) {
	var t$1 = Object.keys(r$3);
	if (Object.getOwnPropertySymbols) {
		var i$1 = Object.getOwnPropertySymbols(r$3);
		e$1 && (i$1 = i$1.filter(function(a$2) {
			return Object.getOwnPropertyDescriptor(r$3, a$2).enumerable;
		})), t$1.push.apply(t$1, i$1);
	}
	return t$1;
}
function fe$3(r$3, e$1) {
	return e$1 = e$1 != null ? e$1 : {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(r$3, Object.getOwnPropertyDescriptors(e$1)) : ia$1(Object(e$1)).forEach(function(t$1) {
		Object.defineProperty(r$3, t$1, Object.getOwnPropertyDescriptor(e$1, t$1));
	}), r$3;
}
var na$1 = ["x-cdn", "content-type"], At$2 = [
	"x-request-id",
	"cf-ray",
	"x-amz-cf-id",
	"x-akamai-request-id"
], oa$1 = na$1.concat(At$2);
function pe$1(r$3) {
	r$3 = r$3 || "";
	var e$1 = {};
	return r$3.trim().split(/[\r\n]+/).forEach(function(i$1) {
		if (i$1) {
			var a$2 = i$1.split(": "), n$2 = a$2.shift();
			n$2 && (oa$1.indexOf(n$2.toLowerCase()) >= 0 || n$2.toLowerCase().indexOf("x-litix-") === 0) && (e$1[n$2] = a$2.join(": "));
		}
	}), e$1;
}
function de$3(r$3) {
	if (r$3) {
		var e$1 = At$2.find(function(t$1) {
			return r$3[t$1] !== void 0;
		});
		return e$1 ? r$3[e$1] : void 0;
	}
}
var sa = function(r$3) {
	var e$1 = {};
	for (var t$1 in r$3) {
		var i$1 = r$3[t$1];
		if (i$1["DATA-ID"].search("io.litix.data.") !== -1) {
			var n$2 = i$1["DATA-ID"].replace("io.litix.data.", "");
			e$1[n$2] = i$1.VALUE;
		}
	}
	return e$1;
}, Ce$2 = sa;
var Me$1 = function(r$3) {
	if (!r$3) return {};
	var e$1 = _e$2.navigationStart(), t$1 = r$3.loading, i$1 = t$1 ? t$1.start : r$3.trequest, a$2 = t$1 ? t$1.first : r$3.tfirst, n$2 = t$1 ? t$1.end : r$3.tload;
	return {
		bytesLoaded: r$3.total,
		requestStart: Math.round(e$1 + i$1),
		responseStart: Math.round(e$1 + a$2),
		responseEnd: Math.round(e$1 + n$2)
	};
}, Se$2 = function(r$3) {
	if (!(!r$3 || typeof r$3.getAllResponseHeaders != "function")) return pe$1(r$3.getAllResponseHeaders());
}, Ot$2 = function(r$3, e$1, t$1) {
	arguments.length > 3 && arguments[3] !== void 0 && arguments[3];
	var a$2 = arguments.length > 4 ? arguments[4] : void 0, n$2 = r$3.log, o$3 = r$3.utils.secondsToMs, s$2 = function(m$5) {
		var f$5 = parseInt(a$2.version), _$2;
		return f$5 === 1 && m$5.programDateTime !== null && (_$2 = m$5.programDateTime), f$5 === 0 && m$5.pdt !== null && (_$2 = m$5.pdt), _$2;
	};
	if (!_e$2.exists()) {
		n$2.warn("performance timing not supported. Not tracking HLS.js.");
		return;
	}
	var u$4 = function(m$5, f$5) {
		return r$3.emit(e$1, m$5, f$5);
	}, p$5 = function(m$5, f$5) {
		var _$2 = f$5.levels, d$2 = f$5.audioTracks, h$2 = f$5.url, w$2 = f$5.stats, E$3 = f$5.networkDetails, S$1 = f$5.sessionData, N$3 = {}, M$2 = {};
		_$2.forEach(function(G$2, oe$3) {
			N$3[oe$3] = {
				width: G$2.width,
				height: G$2.height,
				bitrate: G$2.bitrate,
				attrs: G$2.attrs
			};
		}), d$2.forEach(function(G$2, oe$3) {
			M$2[oe$3] = {
				name: G$2.name,
				language: G$2.lang,
				bitrate: G$2.bitrate
			};
		});
		var P$4 = Me$1(w$2), R = P$4.bytesLoaded, Z$1 = P$4.requestStart, Te$1 = P$4.responseStart, we$2 = P$4.responseEnd;
		u$4("requestcompleted", fe$3(ue$1({}, Ce$2(S$1)), {
			request_event_type: m$5,
			request_bytes_loaded: R,
			request_start: Z$1,
			request_response_start: Te$1,
			request_response_end: we$2,
			request_type: "manifest",
			request_hostname: F$1(h$2),
			request_response_headers: Se$2(E$3),
			request_rendition_lists: {
				media: N$3,
				audio: M$2,
				video: {}
			}
		}));
	};
	t$1.on(a$2.Events.MANIFEST_LOADED, p$5);
	var b$4 = function(m$5, f$5) {
		var _$2 = f$5.details, d$2 = f$5.level, h$2 = f$5.networkDetails, w$2 = f$5.stats, E$3 = Me$1(w$2), S$1 = E$3.bytesLoaded, N$3 = E$3.requestStart, M$2 = E$3.responseStart, P$4 = E$3.responseEnd, R = _$2.fragments[_$2.fragments.length - 1], Z$1 = s$2(R) + o$3(R.duration);
		u$4("requestcompleted", {
			request_event_type: m$5,
			request_bytes_loaded: S$1,
			request_start: N$3,
			request_response_start: M$2,
			request_response_end: P$4,
			request_current_level: d$2,
			request_type: "manifest",
			request_hostname: F$1(_$2.url),
			request_response_headers: Se$2(h$2),
			video_holdback: _$2.holdBack && o$3(_$2.holdBack),
			video_part_holdback: _$2.partHoldBack && o$3(_$2.partHoldBack),
			video_part_target_duration: _$2.partTarget && o$3(_$2.partTarget),
			video_target_duration: _$2.targetduration && o$3(_$2.targetduration),
			video_source_is_live: _$2.live,
			player_manifest_newest_program_time: isNaN(Z$1) ? void 0 : Z$1
		});
	};
	t$1.on(a$2.Events.LEVEL_LOADED, b$4);
	var k$1 = function(m$5, f$5) {
		var _$2 = f$5.details, d$2 = f$5.networkDetails, h$2 = f$5.stats, w$2 = Me$1(h$2), E$3 = w$2.bytesLoaded, S$1 = w$2.requestStart, N$3 = w$2.responseStart, M$2 = w$2.responseEnd;
		u$4("requestcompleted", {
			request_event_type: m$5,
			request_bytes_loaded: E$3,
			request_start: S$1,
			request_response_start: N$3,
			request_response_end: M$2,
			request_type: "manifest",
			request_hostname: F$1(_$2.url),
			request_response_headers: Se$2(d$2)
		});
	};
	t$1.on(a$2.Events.AUDIO_TRACK_LOADED, k$1);
	var y$4 = function(m$5, f$5) {
		var _$2 = f$5.stats, d$2 = f$5.networkDetails, h$2 = f$5.frag;
		_$2 = _$2 || h$2.stats;
		var w$2 = Me$1(_$2), E$3 = w$2.bytesLoaded, S$1 = w$2.requestStart, N$3 = w$2.responseStart, M$2 = w$2.responseEnd, P$4 = d$2 ? Se$2(d$2) : void 0, R = {
			request_event_type: m$5,
			request_bytes_loaded: E$3,
			request_start: S$1,
			request_response_start: N$3,
			request_response_end: M$2,
			request_hostname: d$2 ? F$1(d$2.responseURL) : void 0,
			request_id: P$4 ? de$3(P$4) : void 0,
			request_response_headers: P$4,
			request_media_duration: h$2.duration,
			request_url: d$2 == null ? void 0 : d$2.responseURL
		};
		h$2.type === "main" ? (R.request_type = "media", R.request_current_level = h$2.level, R.request_video_width = (t$1.levels[h$2.level] || {}).width, R.request_video_height = (t$1.levels[h$2.level] || {}).height, R.request_labeled_bitrate = (t$1.levels[h$2.level] || {}).bitrate) : R.request_type = h$2.type, u$4("requestcompleted", R);
	};
	t$1.on(a$2.Events.FRAG_LOADED, y$4);
	var c$3 = function(m$5, f$5) {
		var _$2 = f$5.frag, d$2 = _$2.start, w$2 = {
			currentFragmentPDT: s$2(_$2),
			currentFragmentStart: o$3(d$2)
		};
		u$4("fragmentchange", w$2);
	};
	t$1.on(a$2.Events.FRAG_CHANGED, c$3);
	var v$3 = function(m$5, f$5) {
		var _$2 = f$5.type, d$2 = f$5.details, h$2 = f$5.response, w$2 = f$5.fatal, E$3 = f$5.frag, S$1 = f$5.networkDetails, N$3 = (E$3 == null ? void 0 : E$3.url) || f$5.url || "", M$2 = S$1 ? Se$2(S$1) : void 0;
		if ((d$2 === a$2.ErrorDetails.MANIFEST_LOAD_ERROR || d$2 === a$2.ErrorDetails.MANIFEST_LOAD_TIMEOUT || d$2 === a$2.ErrorDetails.FRAG_LOAD_ERROR || d$2 === a$2.ErrorDetails.FRAG_LOAD_TIMEOUT || d$2 === a$2.ErrorDetails.LEVEL_LOAD_ERROR || d$2 === a$2.ErrorDetails.LEVEL_LOAD_TIMEOUT || d$2 === a$2.ErrorDetails.AUDIO_TRACK_LOAD_ERROR || d$2 === a$2.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT || d$2 === a$2.ErrorDetails.SUBTITLE_LOAD_ERROR || d$2 === a$2.ErrorDetails.SUBTITLE_LOAD_TIMEOUT || d$2 === a$2.ErrorDetails.KEY_LOAD_ERROR || d$2 === a$2.ErrorDetails.KEY_LOAD_TIMEOUT) && u$4("requestfailed", {
			request_error: d$2,
			request_url: N$3,
			request_hostname: F$1(N$3),
			request_id: M$2 ? de$3(M$2) : void 0,
			request_type: d$2 === a$2.ErrorDetails.FRAG_LOAD_ERROR || d$2 === a$2.ErrorDetails.FRAG_LOAD_TIMEOUT ? "media" : d$2 === a$2.ErrorDetails.AUDIO_TRACK_LOAD_ERROR || d$2 === a$2.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT ? "audio" : d$2 === a$2.ErrorDetails.SUBTITLE_LOAD_ERROR || d$2 === a$2.ErrorDetails.SUBTITLE_LOAD_TIMEOUT ? "subtitle" : d$2 === a$2.ErrorDetails.KEY_LOAD_ERROR || d$2 === a$2.ErrorDetails.KEY_LOAD_TIMEOUT ? "encryption" : "manifest",
			request_error_code: h$2 == null ? void 0 : h$2.code,
			request_error_text: h$2 == null ? void 0 : h$2.text
		}), w$2) {
			var P$4, R = "".concat(N$3 ? "url: ".concat(N$3, "\n") : "") + "".concat(h$2 && (h$2.code || h$2.text) ? "response: ".concat(h$2.code, ", ").concat(h$2.text, "\n") : "") + "".concat(f$5.reason ? "failure reason: ".concat(f$5.reason, "\n") : "") + "".concat(f$5.level ? "level: ".concat(f$5.level, "\n") : "") + "".concat(f$5.parent ? "parent stream controller: ".concat(f$5.parent, "\n") : "") + "".concat(f$5.buffer ? "buffer length: ".concat(f$5.buffer, "\n") : "") + "".concat(f$5.error ? "error: ".concat(f$5.error, "\n") : "") + "".concat(f$5.event ? "event: ".concat(f$5.event, "\n") : "") + "".concat(f$5.err ? "error message: ".concat((P$4 = f$5.err) === null || P$4 === void 0 ? void 0 : P$4.message, "\n") : "");
			u$4("error", {
				player_error_code: _$2,
				player_error_message: d$2,
				player_error_context: R
			});
		}
	};
	t$1.on(a$2.Events.ERROR, v$3);
	var T$2 = function(m$5, f$5) {
		var _$2 = f$5.frag, d$2 = _$2 && _$2._url || "";
		u$4("requestcanceled", {
			request_event_type: m$5,
			request_url: d$2,
			request_type: "media",
			request_hostname: F$1(d$2)
		});
	};
	t$1.on(a$2.Events.FRAG_LOAD_EMERGENCY_ABORTED, T$2);
	var x$5 = function(m$5, f$5) {
		var _$2 = f$5.level, d$2 = t$1.levels[_$2];
		if (d$2 && d$2.attrs && d$2.attrs.BANDWIDTH) {
			var h$2 = d$2.attrs.BANDWIDTH, w$2, E$3 = parseFloat(d$2.attrs["FRAME-RATE"]);
			isNaN(E$3) || (w$2 = E$3), h$2 ? u$4("renditionchange", {
				video_source_fps: w$2,
				video_source_bitrate: h$2,
				video_source_width: d$2.width,
				video_source_height: d$2.height,
				video_source_rendition_name: d$2.name,
				video_source_codec: d$2 == null ? void 0 : d$2.videoCodec
			}) : n$2.warn("missing BANDWIDTH from HLS manifest parsed by HLS.js");
		}
	};
	t$1.on(a$2.Events.LEVEL_SWITCHED, x$5), t$1._stopMuxMonitor = function() {
		t$1.off(a$2.Events.MANIFEST_LOADED, p$5), t$1.off(a$2.Events.LEVEL_LOADED, b$4), t$1.off(a$2.Events.AUDIO_TRACK_LOADED, k$1), t$1.off(a$2.Events.FRAG_LOADED, y$4), t$1.off(a$2.Events.FRAG_CHANGED, c$3), t$1.off(a$2.Events.ERROR, v$3), t$1.off(a$2.Events.FRAG_LOAD_EMERGENCY_ABORTED, T$2), t$1.off(a$2.Events.LEVEL_SWITCHED, x$5), t$1.off(a$2.Events.DESTROYING, t$1._stopMuxMonitor), delete t$1._stopMuxMonitor;
	}, t$1.on(a$2.Events.DESTROYING, t$1._stopMuxMonitor);
}, Pt$2 = function(r$3) {
	r$3 && typeof r$3._stopMuxMonitor == "function" && r$3._stopMuxMonitor();
};
var It$2 = function(r$3, e$1) {
	if (!r$3 || !r$3.requestEndDate) return {};
	var t$1 = F$1(r$3.url), i$1 = r$3.url, a$2 = r$3.bytesLoaded, n$2 = new Date(r$3.requestStartDate).getTime(), o$3 = new Date(r$3.firstByteDate).getTime(), s$2 = new Date(r$3.requestEndDate).getTime(), u$4 = isNaN(r$3.duration) ? 0 : r$3.duration, p$5 = typeof e$1.getMetricsFor == "function" ? e$1.getMetricsFor(r$3.mediaType).HttpList : e$1.getDashMetrics().getHttpRequests(r$3.mediaType), b$4;
	p$5.length > 0 && (b$4 = pe$1(p$5[p$5.length - 1]._responseHeaders || ""));
	var k$1 = b$4 ? de$3(b$4) : void 0;
	return {
		requestStart: n$2,
		requestResponseStart: o$3,
		requestResponseEnd: s$2,
		requestBytesLoaded: a$2,
		requestResponseHeaders: b$4,
		requestMediaDuration: u$4,
		requestHostname: t$1,
		requestUrl: i$1,
		requestId: k$1
	};
}, ua$1 = function(r$3, e$1) {
	var t$1 = e$1.getQualityFor(r$3), i$1 = e$1.getCurrentTrackFor(r$3).bitrateList;
	return i$1 ? {
		currentLevel: t$1,
		renditionWidth: i$1[t$1].width || null,
		renditionHeight: i$1[t$1].height || null,
		renditionBitrate: i$1[t$1].bandwidth
	} : {};
}, da$1 = function(r$3) {
	var e$1;
	return (e$1 = r$3.match(/.*codecs\*?="(.*)"/)) === null || e$1 === void 0 ? void 0 : e$1[1];
}, la$1 = function(e$1) {
	try {
		var t$1, i$1;
		return (i$1 = e$1.getVersion) === null || i$1 === void 0 || (t$1 = i$1.call(e$1)) === null || t$1 === void 0 ? void 0 : t$1.split(".").map(function(n$2) {
			return parseInt(n$2);
		})[0];
	} catch (n$2) {
		return !1;
	}
}, Nt$2 = function(r$3, e$1, t$1) {
	arguments.length > 3 && arguments[3] !== void 0 && arguments[3];
	var a$2 = r$3.log;
	if (!t$1 || !t$1.on) {
		a$2.warn("Invalid dash.js player reference. Monitoring blocked.");
		return;
	}
	var n$2 = la$1(t$1), o$3 = function(_$2, d$2) {
		return r$3.emit(e$1, _$2, d$2);
	}, s$2 = function(_$2) {
		var d$2 = _$2.type, w$2 = (_$2.data || {}).url;
		o$3("requestcompleted", {
			request_event_type: d$2,
			request_start: 0,
			request_response_start: 0,
			request_response_end: 0,
			request_bytes_loaded: -1,
			request_type: "manifest",
			request_hostname: F$1(w$2),
			request_url: w$2
		});
	};
	t$1.on("manifestLoaded", s$2);
	var u$4 = {}, p$5 = function(_$2) {
		if (typeof _$2.getRequests != "function") return null;
		var d$2 = _$2.getRequests({ state: "executed" });
		return d$2.length === 0 ? null : d$2[d$2.length - 1];
	}, b$4 = function(_$2) {
		var d$2 = _$2.type, h$2 = _$2.fragmentModel, w$2 = _$2.chunk, E$3 = p$5(h$2);
		k$1({
			type: d$2,
			request: E$3,
			chunk: w$2
		});
	}, k$1 = function(_$2) {
		var d$2 = _$2.type, h$2 = _$2.chunk, w$2 = _$2.request, S$1 = (h$2 || {}).mediaInfo || {}, N$3 = S$1.type, M$2 = S$1.bitrateList;
		M$2 = M$2 || [];
		var P$4 = {};
		M$2.forEach(function(Ee$3, z$2) {
			P$4[z$2] = {}, P$4[z$2].width = Ee$3.width, P$4[z$2].height = Ee$3.height, P$4[z$2].bitrate = Ee$3.bandwidth, P$4[z$2].attrs = {};
		}), N$3 === "video" ? u$4.video = P$4 : N$3 === "audio" ? u$4.audio = P$4 : u$4.media = P$4;
		var R = It$2(w$2, t$1), Z$1 = R.requestStart, Te$1 = R.requestResponseStart, we$2 = R.requestResponseEnd, G$2 = R.requestResponseHeaders, oe$3 = R.requestMediaDuration, Ve$1 = R.requestHostname, We$1 = R.requestUrl, je$1 = R.requestId;
		o$3("requestcompleted", {
			request_event_type: d$2,
			request_start: Z$1,
			request_response_start: Te$1,
			request_response_end: we$2,
			request_bytes_loaded: -1,
			request_type: N$3 + "_init",
			request_response_headers: G$2,
			request_hostname: Ve$1,
			request_id: je$1,
			request_url: We$1,
			request_media_duration: oe$3,
			request_rendition_lists: u$4
		});
	};
	n$2 >= 4 ? t$1.on("initFragmentLoaded", k$1) : t$1.on("initFragmentLoaded", b$4);
	var y$4 = function(_$2) {
		var d$2 = _$2.type, h$2 = _$2.fragmentModel, w$2 = _$2.chunk, E$3 = p$5(h$2);
		c$3({
			type: d$2,
			request: E$3,
			chunk: w$2
		});
	}, c$3 = function(_$2) {
		var d$2 = _$2.type, h$2 = _$2.chunk, w$2 = _$2.request, E$3 = h$2 || {}, S$1 = E$3.mediaInfo, N$3 = E$3.start, P$4 = (S$1 || {}).type, R = It$2(w$2, t$1), Z$1 = R.requestStart, Te$1 = R.requestResponseStart, we$2 = R.requestResponseEnd, G$2 = R.requestBytesLoaded, oe$3 = R.requestResponseHeaders, Ve$1 = R.requestMediaDuration, We$1 = R.requestHostname, je$1 = R.requestUrl, Ee$3 = R.requestId, z$2 = ua$1(P$4, t$1), Jr = z$2.currentLevel, Qr = z$2.renditionWidth, zr = z$2.renditionHeight, Kr = z$2.renditionBitrate;
		o$3("requestcompleted", {
			request_event_type: d$2,
			request_start: Z$1,
			request_response_start: Te$1,
			request_response_end: we$2,
			request_bytes_loaded: G$2,
			request_type: P$4,
			request_response_headers: oe$3,
			request_hostname: We$1,
			request_id: Ee$3,
			request_url: je$1,
			request_media_start_time: N$3,
			request_media_duration: Ve$1,
			request_current_level: Jr,
			request_labeled_bitrate: Kr,
			request_video_width: Qr,
			request_video_height: zr
		});
	};
	n$2 >= 4 ? t$1.on("mediaFragmentLoaded", c$3) : t$1.on("mediaFragmentLoaded", y$4);
	var v$3 = {
		video: void 0,
		audio: void 0,
		totalBitrate: void 0
	}, T$2 = function() {
		if (v$3.video && typeof v$3.video.bitrate == "number") {
			if (!(v$3.video.width && v$3.video.height)) {
				a$2.warn("have bitrate info for video but missing width/height");
				return;
			}
			var _$2 = v$3.video.bitrate;
			if (v$3.audio && typeof v$3.audio.bitrate == "number" && (_$2 += v$3.audio.bitrate), _$2 !== v$3.totalBitrate) return v$3.totalBitrate = _$2, {
				video_source_bitrate: _$2,
				video_source_height: v$3.video.height,
				video_source_width: v$3.video.width,
				video_source_codec: da$1(v$3.video.codec)
			};
		}
	}, x$5 = function(_$2, d$2, h$2) {
		if (typeof _$2.newQuality != "number") {
			a$2.warn("missing evt.newQuality in qualityChangeRendered event", _$2);
			return;
		}
		var w$2 = _$2.mediaType;
		if (w$2 === "audio" || w$2 === "video") {
			var E$3 = t$1.getBitrateInfoListFor(w$2).find(function(N$3) {
				return N$3.qualityIndex === _$2.newQuality;
			});
			if (!(E$3 && typeof E$3.bitrate == "number")) {
				a$2.warn("missing bitrate info for ".concat(w$2));
				return;
			}
			v$3[w$2] = fe$3(ue$1({}, E$3), { codec: t$1.getCurrentTrackFor(w$2).codec });
			var S$1 = T$2();
			S$1 && o$3("renditionchange", S$1);
		}
	};
	t$1.on("qualityChangeRendered", x$5);
	var m$5 = function(_$2) {
		var d$2 = _$2.request, h$2 = _$2.mediaType;
		d$2 = d$2 || {}, o$3("requestcanceled", {
			request_event_type: d$2.type + "_" + d$2.action,
			request_url: d$2.url,
			request_type: h$2,
			request_hostname: F$1(d$2.url)
		});
	};
	t$1.on("fragmentLoadingAbandoned", m$5);
	var f$5 = function(_$2) {
		var d$2 = _$2.error, h$2, w$2, E$3 = (d$2 == null || (h$2 = d$2.data) === null || h$2 === void 0 ? void 0 : h$2.request) || {}, S$1 = (d$2 == null || (w$2 = d$2.data) === null || w$2 === void 0 ? void 0 : w$2.response) || {};
		(d$2 == null ? void 0 : d$2.code) === 27 && o$3("requestfailed", {
			request_error: E$3.type + "_" + E$3.action,
			request_url: E$3.url,
			request_hostname: F$1(E$3.url),
			request_type: E$3.mediaType,
			request_error_code: S$1.status,
			request_error_text: S$1.statusText
		});
		var N$3 = "".concat(E$3 != null && E$3.url ? "url: ".concat(E$3.url, "\n") : "") + "".concat(S$1 != null && S$1.status || S$1 != null && S$1.statusText ? "response: ".concat(S$1 == null ? void 0 : S$1.status, ", ").concat(S$1 == null ? void 0 : S$1.statusText, "\n") : "");
		o$3("error", {
			player_error_code: d$2 == null ? void 0 : d$2.code,
			player_error_message: d$2 == null ? void 0 : d$2.message,
			player_error_context: N$3
		});
	};
	t$1.on("error", f$5), t$1._stopMuxMonitor = function() {
		t$1.off("manifestLoaded", s$2), t$1.off("initFragmentLoaded", k$1), t$1.off("mediaFragmentLoaded", c$3), t$1.off("qualityChangeRendered", x$5), t$1.off("error", f$5), t$1.off("fragmentLoadingAbandoned", m$5), delete t$1._stopMuxMonitor;
	};
}, Lt$2 = function(r$3) {
	r$3 && typeof r$3._stopMuxMonitor == "function" && r$3._stopMuxMonitor();
};
var Ct$2 = 0, Mt$2 = function() {
	function r$3() {
		D$2(this, r$3), l$2(this, "_listeners", void 0);
	}
	return L$1(r$3, [
		{
			key: "on",
			value: function(t$1, i$1, a$2) {
				return i$1._eventEmitterGuid = i$1._eventEmitterGuid || ++Ct$2, this._listeners = this._listeners || {}, this._listeners[t$1] = this._listeners[t$1] || [], a$2 && (i$1 = i$1.bind(a$2)), this._listeners[t$1].push(i$1), i$1;
			}
		},
		{
			key: "off",
			value: function(t$1, i$1) {
				var a$2 = this._listeners && this._listeners[t$1];
				a$2 && a$2.forEach(function(n$2, o$3) {
					n$2._eventEmitterGuid === i$1._eventEmitterGuid && a$2.splice(o$3, 1);
				});
			}
		},
		{
			key: "one",
			value: function(t$1, i$1, a$2) {
				var n$2 = this;
				i$1._eventEmitterGuid = i$1._eventEmitterGuid || ++Ct$2;
				var o$3 = function() {
					n$2.off(t$1, o$3), i$1.apply(a$2 || this, arguments);
				};
				o$3._eventEmitterGuid = i$1._eventEmitterGuid, this.on(t$1, o$3);
			}
		},
		{
			key: "emit",
			value: function(t$1, i$1) {
				var a$2 = this;
				if (this._listeners) {
					i$1 = i$1 || {};
					var n$2 = this._listeners["before*"] || [], o$3 = this._listeners[t$1] || [], s$2 = this._listeners["after" + t$1] || [], u$4 = function(p$5, b$4) {
						p$5 = p$5.slice(), p$5.forEach(function(k$1) {
							k$1.call(a$2, { type: t$1 }, b$4);
						});
					};
					u$4(n$2, i$1), u$4(o$3, i$1), u$4(s$2, i$1);
				}
			}
		}
	]), r$3;
}();
var He$1 = V$1(J$2()), Ht$2 = function() {
	function r$3(e$1) {
		var t$1 = this;
		D$2(this, r$3), l$2(this, "_playbackHeartbeatInterval", void 0), l$2(this, "_playheadShouldBeProgressing", void 0), l$2(this, "pm", void 0), this.pm = e$1, this._playbackHeartbeatInterval = null, this._playheadShouldBeProgressing = !1, e$1.on("playing", function() {
			t$1._playheadShouldBeProgressing = !0;
		}), e$1.on("play", this._startPlaybackHeartbeatInterval.bind(this)), e$1.on("playing", this._startPlaybackHeartbeatInterval.bind(this)), e$1.on("adbreakstart", this._startPlaybackHeartbeatInterval.bind(this)), e$1.on("adplay", this._startPlaybackHeartbeatInterval.bind(this)), e$1.on("adplaying", this._startPlaybackHeartbeatInterval.bind(this)), e$1.on("devicewake", this._startPlaybackHeartbeatInterval.bind(this)), e$1.on("viewstart", this._startPlaybackHeartbeatInterval.bind(this)), e$1.on("rebufferstart", this._startPlaybackHeartbeatInterval.bind(this)), e$1.on("pause", this._stopPlaybackHeartbeatInterval.bind(this)), e$1.on("ended", this._stopPlaybackHeartbeatInterval.bind(this)), e$1.on("viewend", this._stopPlaybackHeartbeatInterval.bind(this)), e$1.on("error", this._stopPlaybackHeartbeatInterval.bind(this)), e$1.on("aderror", this._stopPlaybackHeartbeatInterval.bind(this)), e$1.on("adpause", this._stopPlaybackHeartbeatInterval.bind(this)), e$1.on("adended", this._stopPlaybackHeartbeatInterval.bind(this)), e$1.on("adbreakend", this._stopPlaybackHeartbeatInterval.bind(this)), e$1.on("seeked", function() {
			e$1.data.player_is_paused ? t$1._stopPlaybackHeartbeatInterval() : t$1._startPlaybackHeartbeatInterval();
		}), e$1.on("timeupdate", function() {
			t$1._playbackHeartbeatInterval !== null && e$1.emit("playbackheartbeat");
		}), e$1.on("devicesleep", function(i$1, a$2) {
			t$1._playbackHeartbeatInterval !== null && (He$1.default.clearInterval(t$1._playbackHeartbeatInterval), e$1.emit("playbackheartbeatend", { viewer_time: a$2.viewer_time }), t$1._playbackHeartbeatInterval = null);
		});
	}
	return L$1(r$3, [{
		key: "_startPlaybackHeartbeatInterval",
		value: function() {
			var t$1 = this;
			this._playbackHeartbeatInterval === null && (this.pm.emit("playbackheartbeat"), this._playbackHeartbeatInterval = He$1.default.setInterval(function() {
				t$1.pm.emit("playbackheartbeat");
			}, this.pm.playbackHeartbeatTime));
		}
	}, {
		key: "_stopPlaybackHeartbeatInterval",
		value: function() {
			this._playheadShouldBeProgressing = !1, this._playbackHeartbeatInterval !== null && (He$1.default.clearInterval(this._playbackHeartbeatInterval), this.pm.emit("playbackheartbeatend"), this._playbackHeartbeatInterval = null);
		}
	}]), r$3;
}();
var Bt$1 = function r$3(e$1) {
	var t$1 = this;
	D$2(this, r$3), l$2(this, "viewErrored", void 0), e$1.on("viewinit", function() {
		t$1.viewErrored = !1;
	}), e$1.on("error", function(i$1, a$2) {
		try {
			var n$2 = e$1.errorTranslator({
				player_error_code: a$2.player_error_code,
				player_error_message: a$2.player_error_message,
				player_error_context: a$2.player_error_context,
				player_error_severity: a$2.player_error_severity,
				player_error_business_exception: a$2.player_error_business_exception
			});
			n$2 && (e$1.data.player_error_code = n$2.player_error_code || a$2.player_error_code, e$1.data.player_error_message = n$2.player_error_message || a$2.player_error_message, e$1.data.player_error_context = n$2.player_error_context || a$2.player_error_context, e$1.data.player_error_severity = n$2.player_error_severity || a$2.player_error_severity, e$1.data.player_error_business_exception = n$2.player_error_business_exception || a$2.player_error_business_exception, t$1.viewErrored = !0);
		} catch (o$3) {
			e$1.mux.log.warn("Exception in error translator callback.", o$3), t$1.viewErrored = !0;
		}
	}), e$1.on("aftererror", function() {
		var i$1, a$2, n$2, o$3, s$2;
		(i$1 = e$1.data) === null || i$1 === void 0 || delete i$1.player_error_code, (a$2 = e$1.data) === null || a$2 === void 0 || delete a$2.player_error_message, (n$2 = e$1.data) === null || n$2 === void 0 || delete n$2.player_error_context, (o$3 = e$1.data) === null || o$3 === void 0 || delete o$3.player_error_severity, (s$2 = e$1.data) === null || s$2 === void 0 || delete s$2.player_error_business_exception;
	});
};
var Ut$2 = function() {
	function r$3(e$1) {
		D$2(this, r$3), l$2(this, "_watchTimeTrackerLastCheckedTime", void 0), l$2(this, "pm", void 0), this.pm = e$1, this._watchTimeTrackerLastCheckedTime = null, e$1.on("playbackheartbeat", this._updateWatchTime.bind(this)), e$1.on("playbackheartbeatend", this._clearWatchTimeState.bind(this));
	}
	return L$1(r$3, [{
		key: "_updateWatchTime",
		value: function(t$1, i$1) {
			var a$2 = i$1.viewer_time;
			this._watchTimeTrackerLastCheckedTime === null && (this._watchTimeTrackerLastCheckedTime = a$2), O$2(this.pm.data, "view_watch_time", a$2 - this._watchTimeTrackerLastCheckedTime), this._watchTimeTrackerLastCheckedTime = a$2;
		}
	}, {
		key: "_clearWatchTimeState",
		value: function(t$1, i$1) {
			this._updateWatchTime(t$1, i$1), this._watchTimeTrackerLastCheckedTime = null;
		}
	}]), r$3;
}();
var Ft$1 = function() {
	function r$3(e$1) {
		var t$1 = this;
		D$2(this, r$3), l$2(this, "_playbackTimeTrackerLastPlayheadPosition", void 0), l$2(this, "_lastTime", void 0), l$2(this, "_isAdPlaying", void 0), l$2(this, "_callbackUpdatePlaybackTime", void 0), l$2(this, "pm", void 0), this.pm = e$1, this._playbackTimeTrackerLastPlayheadPosition = -1, this._lastTime = A$2.now(), this._isAdPlaying = !1, this._callbackUpdatePlaybackTime = null;
		var i$1 = this._startPlaybackTimeTracking.bind(this);
		e$1.on("playing", i$1), e$1.on("adplaying", i$1), e$1.on("seeked", i$1);
		var a$2 = this._stopPlaybackTimeTracking.bind(this);
		e$1.on("playbackheartbeatend", a$2), e$1.on("seeking", a$2), e$1.on("adplaying", function() {
			t$1._isAdPlaying = !0;
		}), e$1.on("adended", function() {
			t$1._isAdPlaying = !1;
		}), e$1.on("adpause", function() {
			t$1._isAdPlaying = !1;
		}), e$1.on("adbreakstart", function() {
			t$1._isAdPlaying = !1;
		}), e$1.on("adbreakend", function() {
			t$1._isAdPlaying = !1;
		}), e$1.on("adplay", function() {
			t$1._isAdPlaying = !1;
		}), e$1.on("viewinit", function() {
			t$1._playbackTimeTrackerLastPlayheadPosition = -1, t$1._lastTime = A$2.now(), t$1._isAdPlaying = !1, t$1._callbackUpdatePlaybackTime = null;
		});
	}
	return L$1(r$3, [
		{
			key: "_startPlaybackTimeTracking",
			value: function() {
				this._callbackUpdatePlaybackTime === null && (this._callbackUpdatePlaybackTime = this._updatePlaybackTime.bind(this), this._playbackTimeTrackerLastPlayheadPosition = this.pm.data.player_playhead_time, this.pm.on("playbackheartbeat", this._callbackUpdatePlaybackTime));
			}
		},
		{
			key: "_stopPlaybackTimeTracking",
			value: function() {
				this._callbackUpdatePlaybackTime && (this._updatePlaybackTime(), this.pm.off("playbackheartbeat", this._callbackUpdatePlaybackTime), this._callbackUpdatePlaybackTime = null, this._playbackTimeTrackerLastPlayheadPosition = -1);
			}
		},
		{
			key: "_updatePlaybackTime",
			value: function() {
				var t$1 = this.pm.data.player_playhead_time, i$1 = A$2.now(), a$2 = -1;
				this._playbackTimeTrackerLastPlayheadPosition >= 0 && t$1 > this._playbackTimeTrackerLastPlayheadPosition ? a$2 = t$1 - this._playbackTimeTrackerLastPlayheadPosition : this._isAdPlaying && (a$2 = i$1 - this._lastTime), a$2 > 0 && a$2 <= 1e3 && O$2(this.pm.data, "view_content_playback_time", a$2), this._playbackTimeTrackerLastPlayheadPosition = t$1, this._lastTime = i$1;
			}
		}
	]), r$3;
}();
var Vt$2 = function() {
	function r$3(e$1) {
		D$2(this, r$3), l$2(this, "pm", void 0), this.pm = e$1;
		var t$1 = this._updatePlayheadTime.bind(this);
		e$1.on("playbackheartbeat", t$1), e$1.on("playbackheartbeatend", t$1), e$1.on("timeupdate", t$1), e$1.on("destroy", function() {
			e$1.off("timeupdate", t$1);
		});
	}
	return L$1(r$3, [{
		key: "_updateMaxPlayheadPosition",
		value: function() {
			this.pm.data.view_max_playhead_position = typeof this.pm.data.view_max_playhead_position == "undefined" ? this.pm.data.player_playhead_time : Math.max(this.pm.data.view_max_playhead_position, this.pm.data.player_playhead_time);
		}
	}, {
		key: "_updatePlayheadTime",
		value: function(t$1, i$1) {
			var a$2 = this, n$2 = function() {
				a$2.pm.currentFragmentPDT && a$2.pm.currentFragmentStart && (a$2.pm.data.player_program_time = a$2.pm.currentFragmentPDT + a$2.pm.data.player_playhead_time - a$2.pm.currentFragmentStart);
			};
			if (i$1 && i$1.player_playhead_time) this.pm.data.player_playhead_time = i$1.player_playhead_time, n$2(), this._updateMaxPlayheadPosition();
			else if (this.pm.getPlayheadTime) {
				var o$3 = this.pm.getPlayheadTime();
				typeof o$3 != "undefined" && (this.pm.data.player_playhead_time = o$3, n$2(), this._updateMaxPlayheadPosition());
			}
		}
	}]), r$3;
}();
var Wt$2 = 300 * 1e3, jt$1 = function r$3(e$1) {
	if (D$2(this, r$3), !e$1.disableRebufferTracking) {
		var t$1, i$1 = function(n$2, o$3) {
			a$2(o$3), t$1 = void 0;
		}, a$2 = function(n$2) {
			if (t$1) {
				var o$3 = n$2.viewer_time - t$1;
				O$2(e$1.data, "view_rebuffer_duration", o$3), t$1 = n$2.viewer_time, e$1.data.view_rebuffer_duration > Wt$2 && (e$1.emit("viewend"), e$1.send("viewend"), e$1.mux.log.warn("Ending view after rebuffering for longer than ".concat(Wt$2, "ms, future events will be ignored unless a programchange or videochange occurs.")));
			}
			e$1.data.view_watch_time >= 0 && e$1.data.view_rebuffer_count > 0 && (e$1.data.view_rebuffer_frequency = e$1.data.view_rebuffer_count / e$1.data.view_watch_time, e$1.data.view_rebuffer_percentage = e$1.data.view_rebuffer_duration / e$1.data.view_watch_time);
		};
		e$1.on("playbackheartbeat", function(n$2, o$3) {
			return a$2(o$3);
		}), e$1.on("rebufferstart", function(n$2, o$3) {
			t$1 || (O$2(e$1.data, "view_rebuffer_count", 1), t$1 = o$3.viewer_time, e$1.one("rebufferend", i$1));
		}), e$1.on("viewinit", function() {
			t$1 = void 0, e$1.off("rebufferend", i$1);
		});
	}
};
var Gt$1 = function() {
	function r$3(e$1) {
		var t$1 = this;
		D$2(this, r$3), l$2(this, "_lastCheckedTime", void 0), l$2(this, "_lastPlayheadTime", void 0), l$2(this, "_lastPlayheadTimeUpdatedTime", void 0), l$2(this, "_rebuffering", void 0), l$2(this, "pm", void 0), this.pm = e$1, !(e$1.disableRebufferTracking || e$1.disablePlayheadRebufferTracking) && (this._lastCheckedTime = null, this._lastPlayheadTime = null, this._lastPlayheadTimeUpdatedTime = null, e$1.on("playbackheartbeat", this._checkIfRebuffering.bind(this)), e$1.on("playbackheartbeatend", this._cleanupRebufferTracker.bind(this)), e$1.on("seeking", function() {
			t$1._cleanupRebufferTracker(null, { viewer_time: A$2.now() });
		}));
	}
	return L$1(r$3, [
		{
			key: "_checkIfRebuffering",
			value: function(t$1, i$1) {
				if (this.pm.seekingTracker.isSeeking || this.pm.adTracker.isAdBreak || !this.pm.playbackHeartbeat._playheadShouldBeProgressing) {
					this._cleanupRebufferTracker(t$1, i$1);
					return;
				}
				if (this._lastCheckedTime === null) {
					this._prepareRebufferTrackerState(i$1.viewer_time);
					return;
				}
				if (this._lastPlayheadTime !== this.pm.data.player_playhead_time) {
					this._cleanupRebufferTracker(t$1, i$1, !0);
					return;
				}
				var a$2 = i$1.viewer_time - this._lastPlayheadTimeUpdatedTime;
				typeof this.pm.sustainedRebufferThreshold == "number" && a$2 >= this.pm.sustainedRebufferThreshold && (this._rebuffering || (this._rebuffering = !0, this.pm.emit("rebufferstart", { viewer_time: this._lastPlayheadTimeUpdatedTime }))), this._lastCheckedTime = i$1.viewer_time;
			}
		},
		{
			key: "_clearRebufferTrackerState",
			value: function() {
				this._lastCheckedTime = null, this._lastPlayheadTime = null, this._lastPlayheadTimeUpdatedTime = null;
			}
		},
		{
			key: "_prepareRebufferTrackerState",
			value: function(t$1) {
				this._lastCheckedTime = t$1, this._lastPlayheadTime = this.pm.data.player_playhead_time, this._lastPlayheadTimeUpdatedTime = t$1;
			}
		},
		{
			key: "_cleanupRebufferTracker",
			value: function(t$1, i$1) {
				var a$2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
				if (this._rebuffering) this._rebuffering = !1, this.pm.emit("rebufferend", { viewer_time: i$1.viewer_time });
				else {
					if (this._lastCheckedTime === null) return;
					var n$2 = this.pm.data.player_playhead_time - this._lastPlayheadTime, o$3 = i$1.viewer_time - this._lastPlayheadTimeUpdatedTime;
					typeof this.pm.minimumRebufferDuration == "number" && n$2 > 0 && o$3 - n$2 > this.pm.minimumRebufferDuration && (this._lastCheckedTime = null, this.pm.emit("rebufferstart", { viewer_time: this._lastPlayheadTimeUpdatedTime }), this.pm.emit("rebufferend", { viewer_time: this._lastPlayheadTimeUpdatedTime + o$3 - n$2 }));
				}
				a$2 ? this._prepareRebufferTrackerState(i$1.viewer_time) : this._clearRebufferTrackerState();
			}
		}
	]), r$3;
}();
var Jt$2 = function() {
	function r$3(e$1) {
		var t$1 = this;
		D$2(this, r$3), l$2(this, "NAVIGATION_START", void 0), l$2(this, "pm", void 0), this.pm = e$1, e$1.on("viewinit", function() {
			var i$1 = e$1.data, a$2 = i$1.view_id;
			if (!i$1.view_program_changed) {
				var n$2 = function(o$3, s$2) {
					var u$4 = s$2.viewer_time;
					o$3.type === "playing" && typeof e$1.data.view_time_to_first_frame == "undefined" ? t$1.calculateTimeToFirstFrame(u$4 || A$2.now(), a$2) : o$3.type === "adplaying" && (typeof e$1.data.view_time_to_first_frame == "undefined" || t$1._inPrerollPosition()) && t$1.calculateTimeToFirstFrame(u$4 || A$2.now(), a$2);
				};
				e$1.one("playing", n$2), e$1.one("adplaying", n$2), e$1.one("viewend", function() {
					e$1.off("playing", n$2), e$1.off("adplaying", n$2);
				});
			}
		});
	}
	return L$1(r$3, [{
		key: "_inPrerollPosition",
		value: function() {
			return typeof this.pm.data.view_content_playback_time == "undefined" || this.pm.data.view_content_playback_time <= 1e3;
		}
	}, {
		key: "calculateTimeToFirstFrame",
		value: function(t$1, i$1) {
			i$1 === this.pm.data.view_id && (this.pm.watchTimeTracker._updateWatchTime(null, { viewer_time: t$1 }), this.pm.data.view_time_to_first_frame = this.pm.data.view_watch_time, (this.pm.data.player_autoplay_on || this.pm.data.video_is_autoplay) && this.NAVIGATION_START && (this.pm.data.view_aggregate_startup_time = this.pm.data.view_start + this.pm.data.view_watch_time - this.NAVIGATION_START));
		}
	}]), r$3;
}();
var Qt$1 = function r$3(e$1) {
	var t$1 = this;
	D$2(this, r$3), l$2(this, "_lastPlayerHeight", void 0), l$2(this, "_lastPlayerWidth", void 0), l$2(this, "_lastPlayheadPosition", void 0), l$2(this, "_lastSourceHeight", void 0), l$2(this, "_lastSourceWidth", void 0), e$1.on("viewinit", function() {
		t$1._lastPlayheadPosition = -1;
	});
	[
		"pause",
		"rebufferstart",
		"seeking",
		"error",
		"adbreakstart",
		"hb",
		"renditionchange",
		"orientationchange",
		"viewend"
	].forEach(function(n$2) {
		e$1.on(n$2, function() {
			if (t$1._lastPlayheadPosition >= 0 && e$1.data.player_playhead_time >= 0 && t$1._lastPlayerWidth >= 0 && t$1._lastSourceWidth > 0 && t$1._lastPlayerHeight >= 0 && t$1._lastSourceHeight > 0) {
				var o$3 = e$1.data.player_playhead_time - t$1._lastPlayheadPosition;
				if (o$3 < 0) {
					t$1._lastPlayheadPosition = -1;
					return;
				}
				var s$2 = Math.min(t$1._lastPlayerWidth / t$1._lastSourceWidth, t$1._lastPlayerHeight / t$1._lastSourceHeight), u$4 = Math.max(0, s$2 - 1), p$5 = Math.max(0, 1 - s$2);
				e$1.data.view_max_upscale_percentage = Math.max(e$1.data.view_max_upscale_percentage || 0, u$4), e$1.data.view_max_downscale_percentage = Math.max(e$1.data.view_max_downscale_percentage || 0, p$5), O$2(e$1.data, "view_total_content_playback_time", o$3), O$2(e$1.data, "view_total_upscaling", u$4 * o$3), O$2(e$1.data, "view_total_downscaling", p$5 * o$3);
			}
			t$1._lastPlayheadPosition = -1;
		});
	}), [
		"playing",
		"hb",
		"renditionchange",
		"orientationchange"
	].forEach(function(n$2) {
		e$1.on(n$2, function() {
			t$1._lastPlayheadPosition = e$1.data.player_playhead_time, t$1._lastPlayerWidth = e$1.data.player_width, t$1._lastPlayerHeight = e$1.data.player_height, t$1._lastSourceWidth = e$1.data.video_source_width, t$1._lastSourceHeight = e$1.data.video_source_height;
		});
	});
};
var Ta$1 = 2e3, zt$2 = function r$3(e$1) {
	var t$1 = this;
	D$2(this, r$3), l$2(this, "isSeeking", void 0), this.isSeeking = !1;
	var i$1 = -1, a$2 = function() {
		var n$2 = A$2.now(), o$3 = (e$1.data.viewer_time || n$2) - (i$1 || n$2);
		O$2(e$1.data, "view_seek_duration", o$3), e$1.data.view_max_seek_time = Math.max(e$1.data.view_max_seek_time || 0, o$3), t$1.isSeeking = !1, i$1 = -1;
	};
	e$1.on("seeking", function(n$2, o$3) {
		if (Object.assign(e$1.data, o$3), t$1.isSeeking && o$3.viewer_time - i$1 <= Ta$1) {
			i$1 = o$3.viewer_time;
			return;
		}
		t$1.isSeeking && a$2(), t$1.isSeeking = !0, i$1 = o$3.viewer_time, O$2(e$1.data, "view_seek_count", 1), e$1.send("seeking");
	}), e$1.on("seeked", function() {
		a$2();
	}), e$1.on("viewend", function() {
		t$1.isSeeking && (a$2(), e$1.send("seeked")), t$1.isSeeking = !1, i$1 = -1;
	});
};
var Kt$2 = function(e$1, t$1) {
	e$1.push(t$1), e$1.sort(function(i$1, a$2) {
		return i$1.viewer_time - a$2.viewer_time;
	});
}, Ea$1 = [
	"adbreakstart",
	"adrequest",
	"adresponse",
	"adplay",
	"adplaying",
	"adpause",
	"adended",
	"adbreakend",
	"aderror",
	"adclicked",
	"adskipped"
], Yt$1 = function() {
	function r$3(e$1) {
		var t$1 = this;
		D$2(this, r$3), l$2(this, "_adHasPlayed", void 0), l$2(this, "_adRequests", void 0), l$2(this, "_adResponses", void 0), l$2(this, "_currentAdRequestNumber", void 0), l$2(this, "_currentAdResponseNumber", void 0), l$2(this, "_prerollPlayTime", void 0), l$2(this, "_wouldBeNewAdPlay", void 0), l$2(this, "isAdBreak", void 0), l$2(this, "pm", void 0), this.pm = e$1, e$1.on("viewinit", function() {
			t$1.isAdBreak = !1, t$1._currentAdRequestNumber = 0, t$1._currentAdResponseNumber = 0, t$1._adRequests = [], t$1._adResponses = [], t$1._adHasPlayed = !1, t$1._wouldBeNewAdPlay = !0, t$1._prerollPlayTime = void 0;
		}), Ea$1.forEach(function(a$2) {
			return e$1.on(a$2, t$1._updateAdData.bind(t$1));
		});
		var i$1 = function() {
			t$1.isAdBreak = !1;
		};
		e$1.on("adbreakstart", function() {
			t$1.isAdBreak = !0;
		}), e$1.on("play", i$1), e$1.on("playing", i$1), e$1.on("viewend", i$1), e$1.on("adrequest", function(a$2, n$2) {
			n$2 = Object.assign({ ad_request_id: "generatedAdRequestId" + t$1._currentAdRequestNumber++ }, n$2), Kt$2(t$1._adRequests, n$2), O$2(e$1.data, "view_ad_request_count"), t$1.inPrerollPosition() && (e$1.data.view_preroll_requested = !0, t$1._adHasPlayed || O$2(e$1.data, "view_preroll_request_count"));
		}), e$1.on("adresponse", function(a$2, n$2) {
			n$2 = Object.assign({ ad_request_id: "generatedAdRequestId" + t$1._currentAdResponseNumber++ }, n$2), Kt$2(t$1._adResponses, n$2);
			var o$3 = t$1.findAdRequest(n$2.ad_request_id);
			o$3 && O$2(e$1.data, "view_ad_request_time", Math.max(0, n$2.viewer_time - o$3.viewer_time));
		}), e$1.on("adplay", function(a$2, n$2) {
			t$1._adHasPlayed = !0, t$1._wouldBeNewAdPlay && (t$1._wouldBeNewAdPlay = !1, O$2(e$1.data, "view_ad_played_count")), t$1.inPrerollPosition() && !e$1.data.view_preroll_played && (e$1.data.view_preroll_played = !0, t$1._adRequests.length > 0 && (e$1.data.view_preroll_request_time = Math.max(0, n$2.viewer_time - t$1._adRequests[0].viewer_time)), e$1.data.view_start && (e$1.data.view_startup_preroll_request_time = Math.max(0, n$2.viewer_time - e$1.data.view_start)), t$1._prerollPlayTime = n$2.viewer_time);
		}), e$1.on("adplaying", function(a$2, n$2) {
			t$1.inPrerollPosition() && typeof e$1.data.view_preroll_load_time == "undefined" && typeof t$1._prerollPlayTime != "undefined" && (e$1.data.view_preroll_load_time = n$2.viewer_time - t$1._prerollPlayTime, e$1.data.view_startup_preroll_load_time = n$2.viewer_time - t$1._prerollPlayTime);
		}), e$1.on("adclicked", function(a$2, n$2) {
			t$1._wouldBeNewAdPlay || O$2(e$1.data, "view_ad_clicked_count");
		}), e$1.on("adskipped", function(a$2, n$2) {
			t$1._wouldBeNewAdPlay || O$2(e$1.data, "view_ad_skipped_count");
		}), e$1.on("adended", function() {
			t$1._wouldBeNewAdPlay = !0;
		}), e$1.on("aderror", function() {
			t$1._wouldBeNewAdPlay = !0;
		});
	}
	return L$1(r$3, [
		{
			key: "inPrerollPosition",
			value: function() {
				return typeof this.pm.data.view_content_playback_time == "undefined" || this.pm.data.view_content_playback_time <= 1e3;
			}
		},
		{
			key: "findAdRequest",
			value: function(t$1) {
				for (var i$1 = 0; i$1 < this._adRequests.length; i$1++) if (this._adRequests[i$1].ad_request_id === t$1) return this._adRequests[i$1];
			}
		},
		{
			key: "_updateAdData",
			value: function(t$1, i$1) {
				if (this.inPrerollPosition()) {
					if (!this.pm.data.view_preroll_ad_tag_hostname && i$1.ad_tag_url) {
						var a$2 = H$2(re$3(i$1.ad_tag_url), 2), n$2 = a$2[0], o$3 = a$2[1];
						this.pm.data.view_preroll_ad_tag_domain = o$3, this.pm.data.view_preroll_ad_tag_hostname = n$2;
					}
					if (!this.pm.data.view_preroll_ad_asset_hostname && i$1.ad_asset_url) {
						var s$2 = H$2(re$3(i$1.ad_asset_url), 2), u$4 = s$2[0], p$5 = s$2[1];
						this.pm.data.view_preroll_ad_asset_domain = p$5, this.pm.data.view_preroll_ad_asset_hostname = u$4;
					}
				}
				this.pm.data.ad_asset_url = i$1 == null ? void 0 : i$1.ad_asset_url, this.pm.data.ad_tag_url = i$1 == null ? void 0 : i$1.ad_tag_url, this.pm.data.ad_creative_id = i$1 == null ? void 0 : i$1.ad_creative_id, this.pm.data.ad_id = i$1 == null ? void 0 : i$1.ad_id, this.pm.data.ad_universal_id = i$1 == null ? void 0 : i$1.ad_universal_id;
			}
		}
	]), r$3;
}();
var Qe$1 = V$1(J$2());
var Xt$2 = function r$3(e$1) {
	D$2(this, r$3);
	var t$1, i$1, a$2 = function() {
		e$1.disableRebufferTracking || (O$2(e$1.data, "view_waiting_rebuffer_count", 1), t$1 = A$2.now(), i$1 = Qe$1.default.setInterval(function() {
			if (t$1) {
				var p$5 = A$2.now();
				O$2(e$1.data, "view_waiting_rebuffer_duration", p$5 - t$1), t$1 = p$5;
			}
		}, 250));
	}, n$2 = function() {
		e$1.disableRebufferTracking || t$1 && (O$2(e$1.data, "view_waiting_rebuffer_duration", A$2.now() - t$1), t$1 = !1, Qe$1.default.clearInterval(i$1));
	}, o$3 = !1, s$2 = function() {
		o$3 = !0;
	}, u$4 = function() {
		o$3 = !1, n$2();
	};
	e$1.on("waiting", function() {
		o$3 && a$2();
	}), e$1.on("playing", function() {
		n$2(), s$2();
	}), e$1.on("pause", u$4), e$1.on("seeking", u$4);
};
var $t$1 = function r$3(e$1) {
	var t$1 = this;
	D$2(this, r$3), l$2(this, "lastWallClockTime", void 0);
	var i$1 = function() {
		t$1.lastWallClockTime = A$2.now(), e$1.on("before*", a$2);
	}, a$2 = function(n$2) {
		var o$3 = A$2.now(), s$2 = t$1.lastWallClockTime;
		t$1.lastWallClockTime = o$3, o$3 - s$2 > 3e4 && (e$1.emit("devicesleep", { viewer_time: s$2 }), Object.assign(e$1.data, { viewer_time: s$2 }), e$1.send("devicesleep"), e$1.emit("devicewake", { viewer_time: o$3 }), Object.assign(e$1.data, { viewer_time: o$3 }), e$1.send("devicewake"));
	};
	e$1.one("playbackheartbeat", i$1), e$1.on("playbackheartbeatend", function() {
		e$1.off("before*", a$2), e$1.one("playbackheartbeat", i$1);
	});
};
var Ue$1 = V$1(J$2());
var ze$2 = function(r$3) {
	return r$3();
}(function() {
	var r$3 = function() {
		for (var i$1 = 0, a$2 = {}; i$1 < arguments.length; i$1++) {
			var n$2 = arguments[i$1];
			for (var o$3 in n$2) a$2[o$3] = n$2[o$3];
		}
		return a$2;
	};
	function e$1(t$1) {
		function i$1(a$2, n$2, o$3) {
			var s$2;
			if (typeof document != "undefined") {
				if (arguments.length > 1) {
					if (o$3 = r$3({ path: "/" }, i$1.defaults, o$3), typeof o$3.expires == "number") {
						var u$4 = /* @__PURE__ */ new Date();
						u$4.setMilliseconds(u$4.getMilliseconds() + o$3.expires * 864e5), o$3.expires = u$4;
					}
					try {
						s$2 = JSON.stringify(n$2), /^[\{\[]/.test(s$2) && (n$2 = s$2);
					} catch (T$2) {}
					return t$1.write ? n$2 = t$1.write(n$2, a$2) : n$2 = encodeURIComponent(String(n$2)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent), a$2 = encodeURIComponent(String(a$2)), a$2 = a$2.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent), a$2 = a$2.replace(/[\(\)]/g, escape), document.cookie = [
						a$2,
						"=",
						n$2,
						o$3.expires ? "; expires=" + o$3.expires.toUTCString() : "",
						o$3.path ? "; path=" + o$3.path : "",
						o$3.domain ? "; domain=" + o$3.domain : "",
						o$3.secure ? "; secure" : ""
					].join("");
				}
				a$2 || (s$2 = {});
				for (var p$5 = document.cookie ? document.cookie.split("; ") : [], b$4 = /(%[0-9A-Z]{2})+/g, k$1 = 0; k$1 < p$5.length; k$1++) {
					var y$4 = p$5[k$1].split("="), c$3 = y$4.slice(1).join("=");
					c$3.charAt(0) === "\"" && (c$3 = c$3.slice(1, -1));
					try {
						var v$3 = y$4[0].replace(b$4, decodeURIComponent);
						if (c$3 = t$1.read ? t$1.read(c$3, v$3) : t$1(c$3, v$3) || c$3.replace(b$4, decodeURIComponent), this.json) try {
							c$3 = JSON.parse(c$3);
						} catch (T$2) {}
						if (a$2 === v$3) {
							s$2 = c$3;
							break;
						}
						a$2 || (s$2[v$3] = c$3);
					} catch (T$2) {}
				}
				return s$2;
			}
		}
		return i$1.set = i$1, i$1.get = function(a$2) {
			return i$1.call(i$1, a$2);
		}, i$1.getJSON = function() {
			return i$1.apply({ json: !0 }, [].slice.call(arguments));
		}, i$1.defaults = {}, i$1.remove = function(a$2, n$2) {
			i$1(a$2, "", r$3(n$2, { expires: -1 }));
		}, i$1.withConverter = e$1, i$1;
	}
	return e$1(function() {});
});
var Zt$1 = "muxData", Sa = function(r$3) {
	return Object.entries(r$3).map(function(e$1) {
		var t$1 = H$2(e$1, 2), i$1 = t$1[0], a$2 = t$1[1];
		return "".concat(i$1, "=").concat(a$2);
	}).join("&");
}, Ra$1 = function(r$3) {
	return r$3.split("&").reduce(function(e$1, t$1) {
		var i$1 = H$2(t$1.split("="), 2), a$2 = i$1[0], n$2 = i$1[1], o$3 = +n$2;
		return e$1[a$2] = n$2 && o$3 == n$2 ? o$3 : n$2, e$1;
	}, {});
}, er = function() {
	var e$1;
	try {
		e$1 = Ra$1(ze$2.get(Zt$1) || "");
	} catch (t$1) {
		e$1 = {};
	}
	return e$1;
}, tr = function(e$1) {
	try {
		ze$2.set(Zt$1, Sa(e$1), { expires: 365 });
	} catch (t$1) {}
}, rr = function() {
	var e$1 = er();
	return e$1.mux_viewer_id = e$1.mux_viewer_id || ee$3(), e$1.msn = e$1.msn || Math.random(), tr(e$1), {
		mux_viewer_id: e$1.mux_viewer_id,
		mux_sample_number: e$1.msn
	};
}, ar = function() {
	var e$1 = er(), t$1 = A$2.now();
	return e$1.session_start && (e$1.sst = e$1.session_start, delete e$1.session_start), e$1.session_id && (e$1.sid = e$1.session_id, delete e$1.session_id), e$1.session_expires && (e$1.sex = e$1.session_expires, delete e$1.session_expires), (!e$1.sex || e$1.sex < t$1) && (e$1.sid = ee$3(), e$1.sst = t$1), e$1.sex = t$1 + 1500 * 1e3, tr(e$1), {
		session_id: e$1.sid,
		session_start: e$1.sst,
		session_expires: e$1.sex
	};
};
function Ke$1(r$3, e$1) {
	var t$1 = e$1.beaconCollectionDomain, i$1 = e$1.beaconDomain;
	if (t$1) return "https://" + t$1;
	r$3 = r$3 || "inferred";
	var a$2 = i$1 || "litix.io";
	return r$3.match(/^[a-z0-9]+$/) ? "https://" + r$3 + "." + a$2 : "https://img.litix.io/a.gif";
}
var ir = V$1(J$2()), nr = function() {
	var e$1;
	switch (or()) {
		case "cellular":
			e$1 = "cellular";
			break;
		case "ethernet":
			e$1 = "wired";
			break;
		case "wifi":
			e$1 = "wifi";
			break;
		case void 0: break;
		default: e$1 = "other";
	}
	return e$1;
}, or = function() {
	var e$1 = ir.default.navigator, t$1 = e$1 && (e$1.connection || e$1.mozConnection || e$1.webkitConnection);
	return t$1 && t$1.type;
};
nr.getConnectionFromAPI = or;
var sr = nr;
var Aa$1 = dr({
	a: "env",
	b: "beacon",
	c: "custom",
	d: "ad",
	e: "event",
	f: "experiment",
	i: "internal",
	m: "mux",
	n: "response",
	p: "player",
	q: "request",
	r: "retry",
	s: "session",
	t: "timestamp",
	u: "viewer",
	v: "video",
	w: "page",
	x: "view",
	y: "sub"
}), ur = dr({
	ad: "ad",
	af: "affiliate",
	ag: "aggregate",
	ap: "api",
	al: "application",
	ao: "audio",
	ar: "architecture",
	as: "asset",
	au: "autoplay",
	av: "average",
	bi: "bitrate",
	bn: "brand",
	br: "break",
	bw: "browser",
	by: "bytes",
	bz: "business",
	ca: "cached",
	cb: "cancel",
	cc: "codec",
	cd: "code",
	cg: "category",
	ch: "changed",
	ci: "client",
	ck: "clicked",
	cl: "canceled",
	cn: "config",
	co: "count",
	ce: "counter",
	cp: "complete",
	cq: "creator",
	cr: "creative",
	cs: "captions",
	ct: "content",
	cu: "current",
	cx: "connection",
	cz: "context",
	dg: "downscaling",
	dm: "domain",
	dn: "cdn",
	do: "downscale",
	dr: "drm",
	dp: "dropped",
	du: "duration",
	dv: "device",
	dy: "dynamic",
	eb: "enabled",
	ec: "encoding",
	ed: "edge",
	en: "end",
	eg: "engine",
	em: "embed",
	er: "error",
	ep: "experiments",
	es: "errorcode",
	et: "errortext",
	ee: "event",
	ev: "events",
	ex: "expires",
	ez: "exception",
	fa: "failed",
	fi: "first",
	fm: "family",
	ft: "format",
	fp: "fps",
	fq: "frequency",
	fr: "frame",
	fs: "fullscreen",
	ha: "has",
	hb: "holdback",
	he: "headers",
	ho: "host",
	hn: "hostname",
	ht: "height",
	id: "id",
	ii: "init",
	in: "instance",
	ip: "ip",
	is: "is",
	ke: "key",
	la: "language",
	lb: "labeled",
	le: "level",
	li: "live",
	ld: "loaded",
	lo: "load",
	ls: "lists",
	lt: "latency",
	ma: "max",
	md: "media",
	me: "message",
	mf: "manifest",
	mi: "mime",
	ml: "midroll",
	mm: "min",
	mn: "manufacturer",
	mo: "model",
	mx: "mux",
	ne: "newest",
	nm: "name",
	no: "number",
	on: "on",
	or: "origin",
	os: "os",
	pa: "paused",
	pb: "playback",
	pd: "producer",
	pe: "percentage",
	pf: "played",
	pg: "program",
	ph: "playhead",
	pi: "plugin",
	pl: "preroll",
	pn: "playing",
	po: "poster",
	pp: "pip",
	pr: "preload",
	ps: "position",
	pt: "part",
	py: "property",
	px: "pop",
	pz: "plan",
	ra: "rate",
	rd: "requested",
	re: "rebuffer",
	rf: "rendition",
	rg: "range",
	rm: "remote",
	ro: "ratio",
	rp: "response",
	rq: "request",
	rs: "requests",
	sa: "sample",
	sd: "skipped",
	se: "session",
	sh: "shift",
	sk: "seek",
	sm: "stream",
	so: "source",
	sq: "sequence",
	sr: "series",
	ss: "status",
	st: "start",
	su: "startup",
	sv: "server",
	sw: "software",
	sy: "severity",
	ta: "tag",
	tc: "tech",
	te: "text",
	tg: "target",
	th: "throughput",
	ti: "time",
	tl: "total",
	to: "to",
	tt: "title",
	ty: "type",
	ug: "upscaling",
	un: "universal",
	up: "upscale",
	ur: "url",
	us: "user",
	va: "variant",
	vd: "viewed",
	vi: "video",
	ve: "version",
	vw: "view",
	vr: "viewer",
	wd: "width",
	wa: "watch",
	wt: "waiting"
});
function dr(r$3) {
	var e$1 = {};
	for (var t$1 in r$3) r$3.hasOwnProperty(t$1) && (e$1[r$3[t$1]] = t$1);
	return e$1;
}
function ve$2(r$3) {
	var e$1 = {}, t$1 = {};
	return Object.keys(r$3).forEach(function(i$1) {
		var a$2 = !1;
		if (r$3.hasOwnProperty(i$1) && r$3[i$1] !== void 0) {
			var n$2 = i$1.split("_"), o$3 = n$2[0], s$2 = Aa$1[o$3];
			s$2 || (q$2.info("Data key word `" + n$2[0] + "` not expected in " + i$1), s$2 = o$3 + "_"), n$2.splice(1).forEach(function(u$4) {
				u$4 === "url" && (a$2 = !0), ur[u$4] ? s$2 += ur[u$4] : Number.isInteger(Number(u$4)) ? s$2 += u$4 : (q$2.info("Data key word `" + u$4 + "` not expected in " + i$1), s$2 += "_" + u$4 + "_");
			}), a$2 ? t$1[s$2] = r$3[i$1] : e$1[s$2] = r$3[i$1];
		}
	}), Object.assign(e$1, t$1);
}
var ie$1 = V$1(J$2()), Lr = V$1(nt$2());
var ai = {
	maxBeaconSize: 300,
	maxQueueLength: 3600,
	baseTimeBetweenBeacons: 1e4,
	maxPayloadKBSize: 500
}, ii = 56 * 1024, ni = [
	"hb",
	"requestcompleted",
	"requestfailed",
	"requestcanceled"
], oi = "https://img.litix.io", $$2 = function(e$1) {
	var t$1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
	this._beaconUrl = e$1 || oi, this._eventQueue = [], this._postInFlight = !1, this._resendAfterPost = !1, this._failureCount = 0, this._sendTimeout = !1, this._options = Object.assign({}, ai, t$1);
};
$$2.prototype.queueEvent = function(r$3, e$1) {
	var t$1 = Object.assign({}, e$1);
	return this._eventQueue.length <= this._options.maxQueueLength || r$3 === "eventrateexceeded" ? (this._eventQueue.push(t$1), this._sendTimeout || this._startBeaconSending(), this._eventQueue.length <= this._options.maxQueueLength) : !1;
};
$$2.prototype.flushEvents = function() {
	if ((arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1) && this._eventQueue.length === 1) {
		this._eventQueue.pop();
		return;
	}
	this._eventQueue.length && this._sendBeaconQueue(), this._startBeaconSending();
};
$$2.prototype.destroy = function() {
	var r$3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
	this.destroyed = !0, r$3 ? this._clearBeaconQueue() : this.flushEvents(), ie$1.default.clearTimeout(this._sendTimeout);
};
$$2.prototype._clearBeaconQueue = function() {
	var r$3 = this._eventQueue.length > this._options.maxBeaconSize ? this._eventQueue.length - this._options.maxBeaconSize : 0, e$1 = this._eventQueue.slice(r$3);
	r$3 > 0 && Object.assign(e$1[e$1.length - 1], ve$2({ mux_view_message: "event queue truncated" }));
	var t$1 = this._createPayload(e$1);
	Cr(this._beaconUrl, t$1, !0, function() {});
};
$$2.prototype._sendBeaconQueue = function() {
	var r$3 = this;
	if (this._postInFlight) {
		this._resendAfterPost = !0;
		return;
	}
	var e$1 = this._eventQueue.slice(0, this._options.maxBeaconSize);
	this._eventQueue = this._eventQueue.slice(this._options.maxBeaconSize), this._postInFlight = !0;
	var t$1 = this._createPayload(e$1), i$1 = A$2.now();
	Cr(this._beaconUrl, t$1, !1, function(a$2, n$2) {
		n$2 ? (r$3._eventQueue = e$1.concat(r$3._eventQueue), r$3._failureCount += 1, q$2.info("Error sending beacon: " + n$2)) : r$3._failureCount = 0, r$3._roundTripTime = A$2.now() - i$1, r$3._postInFlight = !1, r$3._resendAfterPost && (r$3._resendAfterPost = !1, r$3._eventQueue.length > 0 && r$3._sendBeaconQueue());
	});
};
$$2.prototype._getNextBeaconTime = function() {
	if (!this._failureCount) return this._options.baseTimeBetweenBeacons;
	var r$3 = Math.pow(2, this._failureCount - 1);
	return r$3 = r$3 * Math.random(), (1 + r$3) * this._options.baseTimeBetweenBeacons;
};
$$2.prototype._startBeaconSending = function() {
	var r$3 = this;
	ie$1.default.clearTimeout(this._sendTimeout), !this.destroyed && (this._sendTimeout = ie$1.default.setTimeout(function() {
		r$3._eventQueue.length && r$3._sendBeaconQueue(), r$3._startBeaconSending();
	}, this._getNextBeaconTime()));
};
$$2.prototype._createPayload = function(r$3) {
	var e$1 = this, t$1 = { transmission_timestamp: Math.round(A$2.now()) };
	this._roundTripTime && (t$1.rtt_ms = Math.round(this._roundTripTime));
	var i$1, a$2, n$2, o$3 = function() {
		i$1 = JSON.stringify({
			metadata: t$1,
			events: a$2 || r$3
		}), n$2 = i$1.length / 1024;
	}, s$2 = function() {
		return n$2 <= e$1._options.maxPayloadKBSize;
	};
	return o$3(), s$2() || (q$2.info("Payload size is too big (" + n$2 + " kb). Removing unnecessary events."), a$2 = r$3.filter(function(u$4) {
		return ni.indexOf(u$4.e) === -1;
	}), o$3()), s$2() || (q$2.info("Payload size still too big (" + n$2 + " kb). Cropping fields.."), a$2.forEach(function(u$4) {
		for (var p$5 in u$4) {
			var b$4 = u$4[p$5], k$1 = 50 * 1024;
			typeof b$4 == "string" && b$4.length > k$1 && (u$4[p$5] = b$4.substring(0, k$1));
		}
	}), o$3()), i$1;
};
var si = typeof Lr.default.exitPictureInPicture == "function" ? function(r$3) {
	return r$3.length <= ii;
} : function(r$3) {
	return !1;
}, Cr = function(r$3, e$1, t$1, i$1) {
	if (t$1 && navigator && navigator.sendBeacon && navigator.sendBeacon(r$3, e$1)) {
		i$1();
		return;
	}
	if (ie$1.default.fetch) {
		ie$1.default.fetch(r$3, {
			method: "POST",
			body: e$1,
			headers: { "Content-Type": "text/plain" },
			keepalive: si(e$1)
		}).then(function(n$2) {
			return i$1(null, n$2.ok ? null : "Error");
		}).catch(function(n$2) {
			return i$1(null, n$2);
		});
		return;
	}
	if (ie$1.default.XMLHttpRequest) {
		var a$2 = new ie$1.default.XMLHttpRequest();
		a$2.onreadystatechange = function() {
			if (a$2.readyState === 4) return i$1(null, a$2.status !== 200 ? "error" : void 0);
		}, a$2.open("POST", r$3), a$2.setRequestHeader("Content-Type", "text/plain"), a$2.send(e$1);
		return;
	}
	i$1();
}, Mr = $$2;
var ui = [
	"env_key",
	"view_id",
	"view_sequence_number",
	"player_sequence_number",
	"beacon_domain",
	"player_playhead_time",
	"viewer_time",
	"mux_api_version",
	"event",
	"video_id",
	"player_instance_id",
	"player_error_code",
	"player_error_message",
	"player_error_context",
	"player_error_severity",
	"player_error_business_exception"
], di = [
	"adplay",
	"adplaying",
	"adpause",
	"adfirstquartile",
	"admidpoint",
	"adthirdquartile",
	"adended",
	"adresponse",
	"adrequest"
], li = [
	"ad_id",
	"ad_creative_id",
	"ad_universal_id"
], ci = [
	"viewstart",
	"error",
	"ended",
	"viewend"
], _i = 600 * 1e3, Hr = function() {
	function r$3(e$1, t$1) {
		var i$1 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
		D$2(this, r$3);
		var a$2, n$2, o$3, s$2, u$4, p$5, b$4, k$1, y$4, c$3, v$3, T$2;
		l$2(this, "mux", void 0), l$2(this, "envKey", void 0), l$2(this, "options", void 0), l$2(this, "eventQueue", void 0), l$2(this, "sampleRate", void 0), l$2(this, "disableCookies", void 0), l$2(this, "respectDoNotTrack", void 0), l$2(this, "previousBeaconData", void 0), l$2(this, "lastEventTime", void 0), l$2(this, "rateLimited", void 0), l$2(this, "pageLevelData", void 0), l$2(this, "viewerData", void 0), this.mux = e$1, this.envKey = t$1, this.options = i$1, this.previousBeaconData = null, this.lastEventTime = 0, this.rateLimited = !1, this.eventQueue = new Mr(Ke$1(this.envKey, this.options));
		var x$5;
		this.sampleRate = (x$5 = this.options.sampleRate) !== null && x$5 !== void 0 ? x$5 : 1;
		var m$5;
		this.disableCookies = (m$5 = this.options.disableCookies) !== null && m$5 !== void 0 ? m$5 : !1;
		var f$5;
		this.respectDoNotTrack = (f$5 = this.options.respectDoNotTrack) !== null && f$5 !== void 0 ? f$5 : !1, this.previousBeaconData = null, this.lastEventTime = 0, this.rateLimited = !1, this.pageLevelData = {
			mux_api_version: this.mux.API_VERSION,
			mux_embed: this.mux.NAME,
			mux_embed_version: this.mux.VERSION,
			viewer_application_name: (a$2 = this.options.platform) === null || a$2 === void 0 ? void 0 : a$2.name,
			viewer_application_version: (n$2 = this.options.platform) === null || n$2 === void 0 ? void 0 : n$2.version,
			viewer_application_engine: (o$3 = this.options.platform) === null || o$3 === void 0 ? void 0 : o$3.layout,
			viewer_device_name: (s$2 = this.options.platform) === null || s$2 === void 0 ? void 0 : s$2.product,
			viewer_device_category: "",
			viewer_device_manufacturer: (u$4 = this.options.platform) === null || u$4 === void 0 ? void 0 : u$4.manufacturer,
			viewer_os_family: (b$4 = this.options.platform) === null || b$4 === void 0 || (p$5 = b$4.os) === null || p$5 === void 0 ? void 0 : p$5.family,
			viewer_os_architecture: (y$4 = this.options.platform) === null || y$4 === void 0 || (k$1 = y$4.os) === null || k$1 === void 0 ? void 0 : k$1.architecture,
			viewer_os_version: (v$3 = this.options.platform) === null || v$3 === void 0 || (c$3 = v$3.os) === null || c$3 === void 0 ? void 0 : c$3.version,
			viewer_connection_type: sr(),
			page_url: Ue$1.default === null || Ue$1.default === void 0 || (T$2 = Ue$1.default.location) === null || T$2 === void 0 ? void 0 : T$2.href
		}, this.viewerData = this.disableCookies ? {} : rr();
	}
	return L$1(r$3, [
		{
			key: "send",
			value: function(t$1, i$1) {
				if (!(!t$1 || !(i$1 != null && i$1.view_id))) {
					if (this.respectDoNotTrack && ce$2()) return q$2.info("Not sending `" + t$1 + "` because Do Not Track is enabled");
					if (!i$1 || typeof i$1 != "object") return q$2.error("A data object was expected in send() but was not provided");
					var a$2 = this.disableCookies ? {} : ar(), n$2 = fe$3(ue$1({}, this.pageLevelData, i$1, a$2, this.viewerData), {
						event: t$1,
						env_key: this.envKey
					});
					n$2.user_id && (n$2.viewer_user_id = n$2.user_id, delete n$2.user_id);
					var o$3, s$2 = ((o$3 = n$2.mux_sample_number) !== null && o$3 !== void 0 ? o$3 : 0) >= this.sampleRate, u$4 = this._deduplicateBeaconData(t$1, n$2), p$5 = ve$2(u$4);
					if (this.lastEventTime = this.mux.utils.now(), s$2) return q$2.info("Not sending event due to sample rate restriction", t$1, n$2, p$5);
					if (this.envKey || q$2.info("Missing environment key (envKey) - beacons will be dropped if the video source is not a valid mux video URL", t$1, n$2, p$5), !this.rateLimited) {
						if (q$2.info("Sending event", t$1, n$2, p$5), this.rateLimited = !this.eventQueue.queueEvent(t$1, p$5), this.mux.WINDOW_UNLOADING && t$1 === "viewend") this.eventQueue.destroy(!0);
						else if (this.mux.WINDOW_HIDDEN && t$1 === "hb" ? this.eventQueue.flushEvents(!0) : ci.indexOf(t$1) >= 0 && this.eventQueue.flushEvents(), this.rateLimited) return n$2.event = "eventrateexceeded", p$5 = ve$2(n$2), this.eventQueue.queueEvent(n$2.event, p$5), q$2.error("Beaconing disabled due to rate limit.");
					}
				}
			}
		},
		{
			key: "destroy",
			value: function() {
				this.eventQueue.destroy(!1);
			}
		},
		{
			key: "_deduplicateBeaconData",
			value: function(t$1, i$1) {
				var a$2 = this, n$2 = {}, o$3 = i$1.view_id;
				if (o$3 === "-1" || t$1 === "viewstart" || t$1 === "viewend" || !this.previousBeaconData || this.mux.utils.now() - this.lastEventTime >= _i) n$2 = ue$1({}, i$1), o$3 && (this.previousBeaconData = n$2), o$3 && t$1 === "viewend" && (this.previousBeaconData = null);
				else {
					var s$2 = t$1.indexOf("request") === 0;
					Object.entries(i$1).forEach(function(u$4) {
						var p$5 = H$2(u$4, 2), b$4 = p$5[0], k$1 = p$5[1];
						a$2.previousBeaconData && (k$1 !== a$2.previousBeaconData[b$4] || ui.indexOf(b$4) > -1 || a$2.objectHasChanged(s$2, b$4, k$1, a$2.previousBeaconData[b$4]) || a$2.eventRequiresKey(t$1, b$4)) && (n$2[b$4] = k$1, a$2.previousBeaconData[b$4] = k$1);
					});
				}
				return n$2;
			}
		},
		{
			key: "objectHasChanged",
			value: function(t$1, i$1, a$2, n$2) {
				return !t$1 || i$1.indexOf("request_") !== 0 ? !1 : i$1 === "request_response_headers" || typeof a$2 != "object" || typeof n$2 != "object" ? !0 : Object.keys(a$2 || {}).length !== Object.keys(n$2 || {}).length;
			}
		},
		{
			key: "eventRequiresKey",
			value: function(t$1, i$1) {
				return !!(t$1 === "renditionchange" && i$1.indexOf("video_source_") === 0 || li.includes(i$1) && di.includes(t$1));
			}
		}
	]), r$3;
}();
var Br$1 = function r$3(e$1) {
	D$2(this, r$3);
	var t$1 = 0, i$1 = 0, a$2 = 0, n$2 = 0, o$3 = 0, s$2 = 0, u$4 = 0, p$5 = function(y$4, c$3) {
		var v$3 = c$3.request_start, T$2 = c$3.request_response_start, x$5 = c$3.request_response_end, m$5 = c$3.request_bytes_loaded;
		n$2++;
		var f$5, _$2;
		if (T$2 ? (f$5 = T$2 - (v$3 != null ? v$3 : 0), _$2 = (x$5 != null ? x$5 : 0) - T$2) : _$2 = (x$5 != null ? x$5 : 0) - (v$3 != null ? v$3 : 0), _$2 > 0 && m$5 && m$5 > 0) {
			var d$2 = m$5 / _$2 * 8e3;
			o$3++, i$1 += m$5, a$2 += _$2, e$1.data.view_min_request_throughput = Math.min(e$1.data.view_min_request_throughput || Infinity, d$2), e$1.data.view_average_request_throughput = i$1 / a$2 * 8e3, e$1.data.view_request_count = n$2, f$5 > 0 && (t$1 += f$5, e$1.data.view_max_request_latency = Math.max(e$1.data.view_max_request_latency || 0, f$5), e$1.data.view_average_request_latency = t$1 / o$3);
		}
	}, b$4 = function(y$4, c$3) {
		n$2++, s$2++, e$1.data.view_request_count = n$2, e$1.data.view_request_failed_count = s$2;
	}, k$1 = function(y$4, c$3) {
		n$2++, u$4++, e$1.data.view_request_count = n$2, e$1.data.view_request_canceled_count = u$4;
	};
	e$1.on("requestcompleted", p$5), e$1.on("requestfailed", b$4), e$1.on("requestcanceled", k$1);
};
var pi = 3600 * 1e3, Ur = function r$3(e$1) {
	var t$1 = this;
	D$2(this, r$3), l$2(this, "_lastEventTime", void 0), e$1.on("before*", function(i$1, a$2) {
		var n$2 = a$2.viewer_time, o$3 = A$2.now(), s$2 = t$1._lastEventTime;
		if (t$1._lastEventTime = o$3, s$2 && o$3 - s$2 > pi) {
			var u$4 = Object.keys(e$1.data).reduce(function(b$4, k$1) {
				return k$1.indexOf("video_") === 0 ? Object.assign(b$4, l$2({}, k$1, e$1.data[k$1])) : b$4;
			}, {});
			e$1.mux.log.info("Received event after at least an hour inactivity, creating a new view");
			var p$5 = e$1.playbackHeartbeat._playheadShouldBeProgressing;
			e$1._resetView(Object.assign({ viewer_time: n$2 }, u$4)), e$1.playbackHeartbeat._playheadShouldBeProgressing = p$5, e$1.playbackHeartbeat._playheadShouldBeProgressing && i$1.type !== "play" && i$1.type !== "adbreakstart" && (e$1.emit("play", { viewer_time: n$2 }), i$1.type !== "playing" && e$1.emit("playing", { viewer_time: n$2 }));
		}
	});
};
var mi = [
	"viewstart",
	"ended",
	"loadstart",
	"pause",
	"play",
	"playing",
	"ratechange",
	"waiting",
	"adplay",
	"adpause",
	"adended",
	"aderror",
	"adplaying",
	"adrequest",
	"adresponse",
	"adbreakstart",
	"adbreakend",
	"adfirstquartile",
	"admidpoint",
	"adthirdquartile",
	"rebufferstart",
	"rebufferend",
	"seeked",
	"error",
	"hb",
	"requestcompleted",
	"requestfailed",
	"requestcanceled",
	"renditionchange"
], hi = new Set([
	"requestcompleted",
	"requestfailed",
	"requestcanceled"
]), Fr$1 = function(r$3) {
	Dt$2(t$1, r$3);
	var e$1 = qt$2(t$1);
	function t$1(i$1, a$2, n$2) {
		D$2(this, t$1);
		var o$3 = e$1.call(this);
		l$2(g$6(o$3), "DOM_CONTENT_LOADED_EVENT_END", void 0), l$2(g$6(o$3), "NAVIGATION_START", void 0), l$2(g$6(o$3), "_destroyed", void 0), l$2(g$6(o$3), "_heartBeatTimeout", void 0), l$2(g$6(o$3), "adTracker", void 0), l$2(g$6(o$3), "dashjs", void 0), l$2(g$6(o$3), "data", void 0), l$2(g$6(o$3), "disablePlayheadRebufferTracking", void 0), l$2(g$6(o$3), "disableRebufferTracking", void 0), l$2(g$6(o$3), "errorTracker", void 0), l$2(g$6(o$3), "errorTranslator", void 0), l$2(g$6(o$3), "emitTranslator", void 0), l$2(g$6(o$3), "getAdData", void 0), l$2(g$6(o$3), "getPlayheadTime", void 0), l$2(g$6(o$3), "getStateData", void 0), l$2(g$6(o$3), "stateDataTranslator", void 0), l$2(g$6(o$3), "hlsjs", void 0), l$2(g$6(o$3), "id", void 0), l$2(g$6(o$3), "longResumeTracker", void 0), l$2(g$6(o$3), "minimumRebufferDuration", void 0), l$2(g$6(o$3), "mux", void 0), l$2(g$6(o$3), "playbackEventDispatcher", void 0), l$2(g$6(o$3), "playbackHeartbeat", void 0), l$2(g$6(o$3), "playbackHeartbeatTime", void 0), l$2(g$6(o$3), "playheadTime", void 0), l$2(g$6(o$3), "seekingTracker", void 0), l$2(g$6(o$3), "sustainedRebufferThreshold", void 0), l$2(g$6(o$3), "watchTimeTracker", void 0), l$2(g$6(o$3), "currentFragmentPDT", void 0), l$2(g$6(o$3), "currentFragmentStart", void 0), o$3.DOM_CONTENT_LOADED_EVENT_END = _e$2.domContentLoadedEventEnd(), o$3.NAVIGATION_START = _e$2.navigationStart();
		o$3.mux = i$1, o$3.id = a$2, n$2 != null && n$2.beaconDomain && o$3.mux.log.warn("The `beaconDomain` setting has been deprecated in favor of `beaconCollectionDomain`. Please change your integration to use `beaconCollectionDomain` instead of `beaconDomain`."), n$2 = Object.assign({
			debug: !1,
			minimumRebufferDuration: 250,
			sustainedRebufferThreshold: 1e3,
			playbackHeartbeatTime: 25,
			beaconDomain: "litix.io",
			sampleRate: 1,
			disableCookies: !1,
			respectDoNotTrack: !1,
			disableRebufferTracking: !1,
			disablePlayheadRebufferTracking: !1,
			errorTranslator: function(y$4) {
				return y$4;
			},
			emitTranslator: function() {
				for (var y$4 = arguments.length, c$3 = new Array(y$4), v$3 = 0; v$3 < y$4; v$3++) c$3[v$3] = arguments[v$3];
				return c$3;
			},
			stateDataTranslator: function(y$4) {
				return y$4;
			}
		}, n$2), n$2.data = n$2.data || {}, n$2.data.property_key && (n$2.data.env_key = n$2.data.property_key, delete n$2.data.property_key), q$2.level = n$2.debug ? Y$3.DEBUG : Y$3.WARN, o$3.getPlayheadTime = n$2.getPlayheadTime, o$3.getStateData = n$2.getStateData || function() {
			return {};
		}, o$3.getAdData = n$2.getAdData || function() {}, o$3.minimumRebufferDuration = n$2.minimumRebufferDuration, o$3.sustainedRebufferThreshold = n$2.sustainedRebufferThreshold, o$3.playbackHeartbeatTime = n$2.playbackHeartbeatTime, o$3.disableRebufferTracking = n$2.disableRebufferTracking, o$3.disableRebufferTracking && o$3.mux.log.warn("Disabling rebuffer tracking. This should only be used in specific circumstances as a last resort when your player is known to unreliably track rebuffering."), o$3.disablePlayheadRebufferTracking = n$2.disablePlayheadRebufferTracking, o$3.errorTranslator = n$2.errorTranslator, o$3.emitTranslator = n$2.emitTranslator, o$3.stateDataTranslator = n$2.stateDataTranslator, o$3.playbackEventDispatcher = new Hr(i$1, n$2.data.env_key, n$2), o$3.data = {
			player_instance_id: ee$3(),
			mux_sample_rate: n$2.sampleRate,
			beacon_domain: n$2.beaconCollectionDomain || n$2.beaconDomain
		}, o$3.data.view_sequence_number = 1, o$3.data.player_sequence_number = 1;
		var u$4 = function() {
			typeof this.data.view_start == "undefined" && (this.data.view_start = this.mux.utils.now(), this.emit("viewstart"));
		}.bind(g$6(o$3));
		if (o$3.on("viewinit", function(y$4, c$3) {
			this._resetVideoData(), this._resetViewData(), this._resetErrorData(), this._updateStateData(), Object.assign(this.data, c$3), this._initializeViewData(), this.one("play", u$4), this.one("adbreakstart", u$4);
		}), o$3.on("videochange", function(y$4, c$3) {
			this._resetView(c$3);
		}), o$3.on("programchange", function(y$4, c$3) {
			this.data.player_is_paused && this.mux.log.warn("The `programchange` event is intended to be used when the content changes mid playback without the video source changing, however the video is not currently playing. If the video source is changing please use the videochange event otherwise you will lose startup time information."), this._resetView(Object.assign(c$3, { view_program_changed: !0 })), u$4(), this.emit("play"), this.emit("playing");
		}), o$3.on("fragmentchange", function(y$4, c$3) {
			this.currentFragmentPDT = c$3.currentFragmentPDT, this.currentFragmentStart = c$3.currentFragmentStart;
		}), o$3.on("destroy", o$3.destroy), typeof window != "undefined" && typeof window.addEventListener == "function" && typeof window.removeEventListener == "function") {
			var p$5 = function() {
				var y$4 = typeof o$3.data.view_start != "undefined";
				o$3.mux.WINDOW_HIDDEN = document.visibilityState === "hidden", y$4 && o$3.mux.WINDOW_HIDDEN && (o$3.data.player_is_paused || o$3.emit("hb"));
			};
			window.addEventListener("visibilitychange", p$5, !1);
			var b$4 = function(y$4) {
				y$4.persisted || o$3.destroy();
			};
			window.addEventListener("pagehide", b$4, !1), o$3.on("destroy", function() {
				window.removeEventListener("visibilitychange", p$5), window.removeEventListener("pagehide", b$4);
			});
		}
		o$3.on("playerready", function(y$4, c$3) {
			Object.assign(this.data, c$3);
		}), mi.forEach(function(y$4) {
			o$3.on(y$4, function(c$3, v$3) {
				y$4.indexOf("ad") !== 0 && this._updateStateData(), Object.assign(this.data, v$3), this._sanitizeData();
			}), o$3.on("after" + y$4, function() {
				(y$4 !== "error" || this.errorTracker.viewErrored) && this.send(y$4);
			});
		}), o$3.on("viewend", function(y$4, c$3) {
			Object.assign(o$3.data, c$3);
		});
		var k$1 = function(c$3) {
			var v$3 = this.mux.utils.now();
			this.data.player_init_time && (this.data.player_startup_time = v$3 - this.data.player_init_time), !this.mux.PLAYER_TRACKED && this.NAVIGATION_START && (this.mux.PLAYER_TRACKED = !0, (this.data.player_init_time || this.DOM_CONTENT_LOADED_EVENT_END) && (this.data.page_load_time = Math.min(this.data.player_init_time || Infinity, this.DOM_CONTENT_LOADED_EVENT_END || Infinity) - this.NAVIGATION_START)), this.send("playerready"), delete this.data.player_startup_time, delete this.data.page_load_time;
		};
		return o$3.one("playerready", k$1), o$3.longResumeTracker = new Ur(g$6(o$3)), o$3.errorTracker = new Bt$1(g$6(o$3)), new $t$1(g$6(o$3)), o$3.seekingTracker = new zt$2(g$6(o$3)), o$3.playheadTime = new Vt$2(g$6(o$3)), o$3.playbackHeartbeat = new Ht$2(g$6(o$3)), new Qt$1(g$6(o$3)), o$3.watchTimeTracker = new Ut$2(g$6(o$3)), new Ft$1(g$6(o$3)), o$3.adTracker = new Yt$1(g$6(o$3)), new Gt$1(g$6(o$3)), new jt$1(g$6(o$3)), new Jt$2(g$6(o$3)), new Xt$2(g$6(o$3)), new Br$1(g$6(o$3)), n$2.hlsjs && o$3.addHLSJS(n$2), n$2.dashjs && o$3.addDashJS(n$2), o$3.emit("viewinit", n$2.data), o$3;
	}
	return L$1(t$1, [
		{
			key: "emit",
			value: function(a$2, n$2) {
				var o$3, s$2 = Object.assign({ viewer_time: this.mux.utils.now() }, n$2), u$4 = [a$2, s$2];
				if (this.emitTranslator) try {
					u$4 = this.emitTranslator(a$2, s$2);
				} catch (p$5) {
					this.mux.log.warn("Exception in emit translator callback.", p$5);
				}
				u$4 != null && u$4.length && (o$3 = De$1(X$3(t$1.prototype), "emit", this)).call.apply(o$3, [this].concat(W$1(u$4)));
			}
		},
		{
			key: "destroy",
			value: function() {
				this._destroyed || (this._destroyed = !0, typeof this.data.view_start != "undefined" && (this.emit("viewend"), this.send("viewend")), this.playbackEventDispatcher.destroy(), this.removeHLSJS(), this.removeDashJS(), window.clearTimeout(this._heartBeatTimeout));
			}
		},
		{
			key: "send",
			value: function(a$2) {
				if (this.data.view_id) {
					var n$2 = Object.assign({}, this.data);
					if (n$2.video_source_is_live === void 0 && (n$2.player_source_duration === Infinity || n$2.video_source_duration === Infinity ? n$2.video_source_is_live = !0 : (n$2.player_source_duration > 0 || n$2.video_source_duration > 0) && (n$2.video_source_is_live = !1)), n$2.video_source_is_live || [
						"player_program_time",
						"player_manifest_newest_program_time",
						"player_live_edge_program_time",
						"player_program_time",
						"video_holdback",
						"video_part_holdback",
						"video_target_duration",
						"video_part_target_duration"
					].forEach(function(b$4) {
						n$2[b$4] = void 0;
					}), n$2.video_source_url = n$2.video_source_url || n$2.player_source_url, n$2.video_source_url) {
						var s$2 = H$2(re$3(n$2.video_source_url), 2), u$4 = s$2[0];
						n$2.video_source_domain = s$2[1], n$2.video_source_hostname = u$4;
					}
					delete n$2.ad_request_id, this.playbackEventDispatcher.send(a$2, n$2), this.data.view_sequence_number++, this.data.player_sequence_number++, hi.has(a$2) || this._restartHeartBeat(), a$2 === "viewend" && delete this.data.view_id;
				}
			}
		},
		{
			key: "_resetView",
			value: function(a$2) {
				this.emit("viewend"), this.send("viewend"), this.emit("viewinit", a$2);
			}
		},
		{
			key: "_updateStateData",
			value: function() {
				var a$2 = this.getStateData();
				if (typeof this.stateDataTranslator == "function") try {
					a$2 = this.stateDataTranslator(a$2);
				} catch (n$2) {
					this.mux.log.warn("Exception in stateDataTranslator translator callback.", n$2);
				}
				Object.assign(this.data, a$2), this.playheadTime._updatePlayheadTime(), this._sanitizeData();
			}
		},
		{
			key: "_sanitizeData",
			value: function() {
				var a$2 = this;
				[
					"player_width",
					"player_height",
					"video_source_width",
					"video_source_height",
					"player_playhead_time",
					"video_source_bitrate"
				].forEach(function(s$2) {
					var u$4 = parseInt(a$2.data[s$2], 10);
					a$2.data[s$2] = isNaN(u$4) ? void 0 : u$4;
				});
				["player_source_url", "video_source_url"].forEach(function(s$2) {
					if (a$2.data[s$2]) {
						var u$4 = a$2.data[s$2].toLowerCase();
						(u$4.indexOf("data:") === 0 || u$4.indexOf("blob:") === 0) && (a$2.data[s$2] = "MSE style URL");
					}
				});
			}
		},
		{
			key: "_resetVideoData",
			value: function() {
				var a$2 = this;
				Object.keys(this.data).forEach(function(n$2) {
					n$2.indexOf("video_") === 0 && delete a$2.data[n$2];
				});
			}
		},
		{
			key: "_resetViewData",
			value: function() {
				var a$2 = this;
				Object.keys(this.data).forEach(function(n$2) {
					n$2.indexOf("view_") === 0 && delete a$2.data[n$2];
				}), this.data.view_sequence_number = 1;
			}
		},
		{
			key: "_resetErrorData",
			value: function() {
				delete this.data.player_error_code, delete this.data.player_error_message, delete this.data.player_error_context, delete this.data.player_error_severity, delete this.data.player_error_business_exception;
			}
		},
		{
			key: "_initializeViewData",
			value: function() {
				var a$2 = this, n$2 = this.data.view_id = ee$3(), o$3 = function() {
					n$2 === a$2.data.view_id && O$2(a$2.data, "player_view_count", 1);
				};
				this.data.player_is_paused ? this.one("play", o$3) : o$3();
			}
		},
		{
			key: "_restartHeartBeat",
			value: function() {
				var a$2 = this;
				window.clearTimeout(this._heartBeatTimeout), this._heartBeatTimeout = window.setTimeout(function() {
					a$2.data.player_is_paused || a$2.emit("hb");
				}, 1e4);
			}
		},
		{
			key: "addHLSJS",
			value: function(a$2) {
				if (!a$2.hlsjs) {
					this.mux.log.warn("You must pass a valid hlsjs instance in order to track it.");
					return;
				}
				if (this.hlsjs) {
					this.mux.log.warn("An instance of HLS.js is already being monitored for this player.");
					return;
				}
				this.hlsjs = a$2.hlsjs, Ot$2(this.mux, this.id, a$2.hlsjs, {}, a$2.Hls || window.Hls);
			}
		},
		{
			key: "removeHLSJS",
			value: function() {
				this.hlsjs && (Pt$2(this.hlsjs), this.hlsjs = void 0);
			}
		},
		{
			key: "addDashJS",
			value: function(a$2) {
				if (!a$2.dashjs) {
					this.mux.log.warn("You must pass a valid dashjs instance in order to track it.");
					return;
				}
				if (this.dashjs) {
					this.mux.log.warn("An instance of Dash.js is already being monitored for this player.");
					return;
				}
				this.dashjs = a$2.dashjs, Nt$2(this.mux, this.id, a$2.dashjs);
			}
		},
		{
			key: "removeDashJS",
			value: function() {
				this.dashjs && (Lt$2(this.dashjs), this.dashjs = void 0);
			}
		}
	]), t$1;
}(Mt$2);
var he$2 = V$1(nt$2());
function ot$2() {
	return he$2.default && !!(he$2.default.fullscreenElement || he$2.default.webkitFullscreenElement || he$2.default.mozFullScreenElement || he$2.default.msFullscreenElement);
}
var gi = [
	"loadstart",
	"pause",
	"play",
	"playing",
	"seeking",
	"seeked",
	"timeupdate",
	"ratechange",
	"stalled",
	"waiting",
	"error",
	"ended"
], bi = {
	1: "MEDIA_ERR_ABORTED",
	2: "MEDIA_ERR_NETWORK",
	3: "MEDIA_ERR_DECODE",
	4: "MEDIA_ERR_SRC_NOT_SUPPORTED"
};
function st$2(r$3, e$1, t$1) {
	var i$1 = H$2(se$3(e$1), 3), a$2 = i$1[0], n$2 = i$1[1], o$3 = i$1[2], s$2 = r$3.log, u$4 = r$3.utils.getComputedStyle, p$5 = r$3.utils.secondsToMs, b$4 = { automaticErrorTracking: !0 };
	if (a$2) {
		if (o$3 !== "video" && o$3 !== "audio") return s$2.error("The element of `" + n$2 + "` was not a media element.");
	} else return s$2.error("No element was found with the `" + n$2 + "` query selector.");
	a$2.mux && (a$2.mux.destroy(), delete a$2.mux, s$2.warn("Already monitoring this video element, replacing existing event listeners"));
	t$1 = Object.assign(b$4, t$1, {
		getPlayheadTime: function() {
			return p$5(a$2.currentTime);
		},
		getStateData: function() {
			var v$3, T$2, x$5, m$5 = ((v$3 = (T$2 = this).getPlayheadTime) === null || v$3 === void 0 ? void 0 : v$3.call(T$2)) || p$5(a$2.currentTime), f$5 = this.hlsjs && this.hlsjs.url, _$2 = this.dashjs && typeof this.dashjs.getSource == "function" && this.dashjs.getSource(), d$2 = {
				player_is_paused: a$2.paused,
				player_width: parseInt(u$4(a$2, "width")),
				player_height: parseInt(u$4(a$2, "height")),
				player_autoplay_on: a$2.autoplay,
				player_preload_on: a$2.preload,
				player_language_code: a$2.lang,
				player_is_fullscreen: ot$2(),
				video_poster_url: a$2.poster,
				video_source_url: f$5 || _$2 || a$2.currentSrc,
				video_source_duration: p$5(a$2.duration),
				video_source_height: a$2.videoHeight,
				video_source_width: a$2.videoWidth,
				view_dropped_frame_count: a$2 == null || (x$5 = a$2.getVideoPlaybackQuality) === null || x$5 === void 0 ? void 0 : x$5.call(a$2).droppedVideoFrames
			};
			if (a$2.getStartDate && m$5 > 0) {
				var h$2 = a$2.getStartDate();
				if (h$2 && typeof h$2.getTime == "function" && h$2.getTime()) {
					var w$2 = h$2.getTime();
					if (d$2.player_program_time = w$2 + m$5, a$2.seekable.length > 0) d$2.player_live_edge_program_time = w$2 + a$2.seekable.end(a$2.seekable.length - 1);
				}
			}
			return d$2;
		}
	}), t$1.data = Object.assign({
		player_software: "HTML5 Video Element",
		player_mux_plugin_name: "VideoElementMonitor",
		player_mux_plugin_version: r$3.VERSION
	}, t$1.data), a$2.mux = a$2.mux || {}, a$2.mux.deleted = !1, a$2.mux.emit = function(c$3, v$3) {
		r$3.emit(n$2, c$3, v$3);
	}, a$2.mux.updateData = function(c$3) {
		a$2.mux.emit("hb", c$3);
	};
	var y$4 = function() {
		s$2.error("The monitor for this video element has already been destroyed.");
	};
	a$2.mux.destroy = function() {
		Object.keys(a$2.mux.listeners).forEach(function(c$3) {
			a$2.removeEventListener(c$3, a$2.mux.listeners[c$3], !1);
		}), delete a$2.mux.listeners, a$2.mux.destroy = y$4, a$2.mux.swapElement = y$4, a$2.mux.emit = y$4, a$2.mux.addHLSJS = y$4, a$2.mux.addDashJS = y$4, a$2.mux.removeHLSJS = y$4, a$2.mux.removeDashJS = y$4, a$2.mux.updateData = y$4, a$2.mux.setEmitTranslator = y$4, a$2.mux.setStateDataTranslator = y$4, a$2.mux.setGetPlayheadTime = y$4, a$2.mux.deleted = !0, r$3.emit(n$2, "destroy");
	}, a$2.mux.swapElement = function(c$3) {
		var v$3 = H$2(se$3(c$3), 3), T$2 = v$3[0], x$5 = v$3[1], m$5 = v$3[2];
		if (T$2) {
			if (m$5 !== "video" && m$5 !== "audio") return r$3.log.error("The element of `" + x$5 + "` was not a media element.");
		} else return r$3.log.error("No element was found with the `" + x$5 + "` query selector.");
		T$2.muxId = a$2.muxId, delete a$2.muxId, T$2.mux = T$2.mux || {}, T$2.mux.listeners = Object.assign({}, a$2.mux.listeners), delete a$2.mux.listeners, Object.keys(T$2.mux.listeners).forEach(function(f$5) {
			a$2.removeEventListener(f$5, T$2.mux.listeners[f$5], !1), T$2.addEventListener(f$5, T$2.mux.listeners[f$5], !1);
		}), T$2.mux.swapElement = a$2.mux.swapElement, T$2.mux.destroy = a$2.mux.destroy, delete a$2.mux, a$2 = T$2;
	}, a$2.mux.addHLSJS = function(c$3) {
		r$3.addHLSJS(n$2, c$3);
	}, a$2.mux.addDashJS = function(c$3) {
		r$3.addDashJS(n$2, c$3);
	}, a$2.mux.removeHLSJS = function() {
		r$3.removeHLSJS(n$2);
	}, a$2.mux.removeDashJS = function() {
		r$3.removeDashJS(n$2);
	}, a$2.mux.setEmitTranslator = function(c$3) {
		r$3.setEmitTranslator(n$2, c$3);
	}, a$2.mux.setStateDataTranslator = function(c$3) {
		r$3.setStateDataTranslator(n$2, c$3);
	}, a$2.mux.setGetPlayheadTime = function(c$3) {
		c$3 || (c$3 = t$1.getPlayheadTime), r$3.setGetPlayheadTime(n$2, c$3);
	}, r$3.init(n$2, t$1), r$3.emit(n$2, "playerready"), a$2.paused || (r$3.emit(n$2, "play"), a$2.readyState > 2 && r$3.emit(n$2, "playing")), a$2.mux.listeners = {}, gi.forEach(function(c$3) {
		c$3 === "error" && !t$1.automaticErrorTracking || (a$2.mux.listeners[c$3] = function() {
			var v$3 = {};
			if (c$3 === "error") {
				if (!a$2.error || a$2.error.code === 1) return;
				v$3.player_error_code = a$2.error.code, v$3.player_error_message = bi[a$2.error.code] || a$2.error.message;
			}
			r$3.emit(n$2, c$3, v$3);
		}, a$2.addEventListener(c$3, a$2.mux.listeners[c$3], !1));
	});
}
function ut$2(r$3, e$1, t$1, i$1) {
	var a$2 = i$1;
	if (r$3 && typeof r$3[e$1] == "function") try {
		a$2 = r$3[e$1].apply(r$3, t$1);
	} catch (n$2) {
		q$2.info("safeCall error", n$2);
	}
	return a$2;
}
var ge$2 = V$1(J$2()), ye$3;
ge$2.default && ge$2.default.WeakMap && (ye$3 = /* @__PURE__ */ new WeakMap());
function dt$2(r$3, e$1) {
	if (!r$3 || !e$1 || !ge$2.default || typeof ge$2.default.getComputedStyle != "function") return "";
	var t$1;
	return ye$3 && ye$3.has(r$3) && (t$1 = ye$3.get(r$3)), t$1 || (t$1 = ge$2.default.getComputedStyle(r$3, null), ye$3 && ye$3.set(r$3, t$1)), t$1.getPropertyValue(e$1);
}
function lt$1(r$3) {
	return Math.floor(r$3 * 1e3);
}
var le$2 = {
	TARGET_DURATION: "#EXT-X-TARGETDURATION",
	PART_INF: "#EXT-X-PART-INF",
	SERVER_CONTROL: "#EXT-X-SERVER-CONTROL",
	INF: "#EXTINF",
	PROGRAM_DATE_TIME: "#EXT-X-PROGRAM-DATE-TIME",
	VERSION: "#EXT-X-VERSION",
	SESSION_DATA: "#EXT-X-SESSION-DATA"
}, Fe$1 = function(e$1) {
	return this.buffer = "", this.manifest = {
		segments: [],
		serverControl: {},
		sessionData: {}
	}, this.currentUri = {}, this.process(e$1), this.manifest;
};
Fe$1.prototype.process = function(r$3) {
	var e$1;
	for (this.buffer += r$3, e$1 = this.buffer.indexOf("\n"); e$1 > -1; e$1 = this.buffer.indexOf("\n")) this.processLine(this.buffer.substring(0, e$1)), this.buffer = this.buffer.substring(e$1 + 1);
};
Fe$1.prototype.processLine = function(r$3) {
	var e$1 = r$3.indexOf(":"), t$1 = ki(r$3, e$1), i$1 = t$1[0], a$2 = t$1.length === 2 ? _t$1(t$1[1]) : void 0;
	if (i$1[0] !== "#") this.currentUri.uri = i$1, this.manifest.segments.push(this.currentUri), this.manifest.targetDuration && !("duration" in this.currentUri) && (this.currentUri.duration = this.manifest.targetDuration), this.currentUri = {};
	else switch (i$1) {
		case le$2.TARGET_DURATION:
			if (!isFinite(a$2) || a$2 < 0) return;
			this.manifest.targetDuration = a$2, this.setHoldBack();
			break;
		case le$2.PART_INF:
			ct$2(this.manifest, t$1), this.manifest.partInf.partTarget && (this.manifest.partTargetDuration = this.manifest.partInf.partTarget), this.setHoldBack();
			break;
		case le$2.SERVER_CONTROL:
			ct$2(this.manifest, t$1), this.setHoldBack();
			break;
		case le$2.INF:
			a$2 === 0 ? this.currentUri.duration = .01 : a$2 > 0 && (this.currentUri.duration = a$2);
			break;
		case le$2.PROGRAM_DATE_TIME:
			var n$2 = a$2, o$3 = new Date(n$2);
			this.manifest.dateTimeString || (this.manifest.dateTimeString = n$2, this.manifest.dateTimeObject = o$3), this.currentUri.dateTimeString = n$2, this.currentUri.dateTimeObject = o$3;
			break;
		case le$2.VERSION:
			ct$2(this.manifest, t$1);
			break;
		case le$2.SESSION_DATA:
			var s$2 = xi(t$1[1]), u$4 = Ce$2(s$2);
			Object.assign(this.manifest.sessionData, u$4);
	}
};
Fe$1.prototype.setHoldBack = function() {
	var r$3 = this.manifest, e$1 = r$3.serverControl, t$1 = r$3.targetDuration, i$1 = r$3.partTargetDuration;
	if (e$1) {
		var a$2 = "holdBack", n$2 = "partHoldBack", o$3 = t$1 && t$1 * 3, s$2 = i$1 && i$1 * 2;
		t$1 && !e$1.hasOwnProperty(a$2) && (e$1[a$2] = o$3), o$3 && e$1[a$2] < o$3 && (e$1[a$2] = o$3), i$1 && !e$1.hasOwnProperty(n$2) && (e$1[n$2] = i$1 * 3), i$1 && e$1[n$2] < s$2 && (e$1[n$2] = s$2);
	}
};
var ct$2 = function(r$3, e$1) {
	var t$1 = Vr(e$1[0].replace("#EXT-X-", "")), i$1;
	Ei(e$1[1]) ? (i$1 = {}, i$1 = Object.assign(wi(e$1[1]), i$1)) : i$1 = _t$1(e$1[1]), r$3[t$1] = i$1;
}, Vr = function(r$3) {
	return r$3.toLowerCase().replace(/-(\w)/g, function(e$1) {
		return e$1[1].toUpperCase();
	});
}, _t$1 = function(r$3) {
	if (r$3.toLowerCase() === "yes" || r$3.toLowerCase() === "no") return r$3.toLowerCase() === "yes";
	var e$1 = r$3.indexOf(":") !== -1 ? r$3 : parseFloat(r$3);
	return isNaN(e$1) ? r$3 : e$1;
}, Ti = function(r$3) {
	var e$1 = {}, t$1 = r$3.split("=");
	if (t$1.length > 1) {
		var i$1 = Vr(t$1[0]);
		e$1[i$1] = _t$1(t$1[1]);
	}
	return e$1;
}, wi = function(r$3) {
	for (var e$1 = r$3.split(","), t$1 = {}, i$1 = 0; e$1.length > i$1; i$1++) {
		var a$2 = e$1[i$1], n$2 = Ti(a$2);
		t$1 = Object.assign(n$2, t$1);
	}
	return t$1;
}, Ei = function(r$3) {
	return r$3.indexOf("=") > -1;
}, ki = function(r$3, e$1) {
	return e$1 === -1 ? [r$3] : [r$3.substring(0, e$1), r$3.substring(e$1 + 1)];
}, xi = function(r$3) {
	var e$1 = {};
	if (r$3) {
		var t$1 = r$3.search(","), i$1 = r$3.slice(0, t$1), a$2 = r$3.slice(t$1 + 1);
		return [i$1, a$2].forEach(function(o$3, s$2) {
			for (var u$4 = o$3.replace(/['"]+/g, "").split("="), p$5 = 0; p$5 < u$4.length; p$5++) u$4[p$5] === "DATA-ID" && (e$1["DATA-ID"] = u$4[1 - p$5]), u$4[p$5] === "VALUE" && (e$1.VALUE = u$4[1 - p$5]);
		}), { data: e$1 };
	}
}, Wr$1 = Fe$1;
var jr$1 = {
	safeCall: ut$2,
	safeIncrement: O$2,
	getComputedStyle: dt$2,
	secondsToMs: lt$1,
	assign: Object.assign,
	headersStringToObject: pe$1,
	cdnHeadersToRequestId: de$3,
	extractHostnameAndDomain: re$3,
	extractHostname: F$1,
	manifestParser: Wr$1,
	generateShortID: Oe$1,
	generateUUID: ee$3,
	now: A$2.now,
	findMediaElement: se$3
};
var Gr = {
	PLAYER_READY: "playerready",
	VIEW_INIT: "viewinit",
	VIDEO_CHANGE: "videochange",
	PLAY: "play",
	PAUSE: "pause",
	PLAYING: "playing",
	TIME_UPDATE: "timeupdate",
	SEEKING: "seeking",
	SEEKED: "seeked",
	REBUFFER_START: "rebufferstart",
	REBUFFER_END: "rebufferend",
	ERROR: "error",
	ENDED: "ended",
	RENDITION_CHANGE: "renditionchange",
	ORIENTATION_CHANGE: "orientationchange",
	AD_REQUEST: "adrequest",
	AD_RESPONSE: "adresponse",
	AD_BREAK_START: "adbreakstart",
	AD_PLAY: "adplay",
	AD_PLAYING: "adplaying",
	AD_PAUSE: "adpause",
	AD_FIRST_QUARTILE: "adfirstquartile",
	AD_MID_POINT: "admidpoint",
	AD_THIRD_QUARTILE: "adthirdquartile",
	AD_ENDED: "adended",
	AD_BREAK_END: "adbreakend",
	AD_ERROR: "aderror",
	REQUEST_COMPLETED: "requestcompleted",
	REQUEST_FAILED: "requestfailed",
	REQUEST_CANCELLED: "requestcanceled",
	HEARTBEAT: "hb",
	DESTROY: "destroy"
};
var Ri = "mux-embed", qi = "5.9.0", Ai = "2.1", C$4 = {}, ne$3 = function(e$1) {
	var t$1 = arguments;
	typeof e$1 == "string" ? ne$3.hasOwnProperty(e$1) ? be$1.default.setTimeout(function() {
		t$1 = Array.prototype.splice.call(t$1, 1), ne$3[e$1].apply(null, t$1);
	}, 0) : q$2.warn("`" + e$1 + "` is an unknown task") : typeof e$1 == "function" ? be$1.default.setTimeout(function() {
		e$1(ne$3);
	}, 0) : q$2.warn("`" + e$1 + "` is invalid.");
}, Oi = {
	loaded: A$2.now(),
	NAME: Ri,
	VERSION: qi,
	API_VERSION: Ai,
	PLAYER_TRACKED: !1,
	monitor: function(e$1, t$1) {
		return st$2(ne$3, e$1, t$1);
	},
	destroyMonitor: function(e$1) {
		var i$1 = H$2(se$3(e$1), 1)[0];
		i$1 && i$1.mux && typeof i$1.mux.destroy == "function" ? i$1.mux.destroy() : q$2.error("A video element monitor for `" + e$1 + "` has not been initialized via `mux.monitor`.");
	},
	addHLSJS: function(e$1, t$1) {
		var i$1 = Q$2(e$1);
		C$4[i$1] ? C$4[i$1].addHLSJS(t$1) : q$2.error("A monitor for `" + i$1 + "` has not been initialized.");
	},
	addDashJS: function(e$1, t$1) {
		var i$1 = Q$2(e$1);
		C$4[i$1] ? C$4[i$1].addDashJS(t$1) : q$2.error("A monitor for `" + i$1 + "` has not been initialized.");
	},
	removeHLSJS: function(e$1) {
		var t$1 = Q$2(e$1);
		C$4[t$1] ? C$4[t$1].removeHLSJS() : q$2.error("A monitor for `" + t$1 + "` has not been initialized.");
	},
	removeDashJS: function(e$1) {
		var t$1 = Q$2(e$1);
		C$4[t$1] ? C$4[t$1].removeDashJS() : q$2.error("A monitor for `" + t$1 + "` has not been initialized.");
	},
	init: function(e$1, t$1) {
		ce$2() && t$1 && t$1.respectDoNotTrack && q$2.info("The browser's Do Not Track flag is enabled - Mux beaconing is disabled.");
		var i$1 = Q$2(e$1);
		C$4[i$1] = new Fr$1(ne$3, i$1, t$1);
	},
	emit: function(e$1, t$1, i$1) {
		var a$2 = Q$2(e$1);
		C$4[a$2] ? (C$4[a$2].emit(t$1, i$1), t$1 === "destroy" && delete C$4[a$2]) : q$2.error("A monitor for `" + a$2 + "` has not been initialized.");
	},
	updateData: function(e$1, t$1) {
		var i$1 = Q$2(e$1);
		C$4[i$1] ? C$4[i$1].emit("hb", t$1) : q$2.error("A monitor for `" + i$1 + "` has not been initialized.");
	},
	setEmitTranslator: function(e$1, t$1) {
		var i$1 = Q$2(e$1);
		C$4[i$1] ? C$4[i$1].emitTranslator = t$1 : q$2.error("A monitor for `" + i$1 + "` has not been initialized.");
	},
	setStateDataTranslator: function(e$1, t$1) {
		var i$1 = Q$2(e$1);
		C$4[i$1] ? C$4[i$1].stateDataTranslator = t$1 : q$2.error("A monitor for `" + i$1 + "` has not been initialized.");
	},
	setGetPlayheadTime: function(e$1, t$1) {
		var i$1 = Q$2(e$1);
		C$4[i$1] ? C$4[i$1].getPlayheadTime = t$1 : q$2.error("A monitor for `" + i$1 + "` has not been initialized.");
	},
	checkDoNotTrack: ce$2,
	log: q$2,
	utils: jr$1,
	events: Gr,
	WINDOW_HIDDEN: !1,
	WINDOW_UNLOADING: !1
};
Object.assign(ne$3, Oi);
typeof be$1.default != "undefined" && typeof be$1.default.addEventListener == "function" && be$1.default.addEventListener("pagehide", function(r$3) {
	r$3.persisted || (ne$3.WINDOW_UNLOADING = !0);
}, !1);
var Ed = ne$3;
/*!
* JavaScript Cookie v2.1.3
* https://github.com/js-cookie/js-cookie
*
* Copyright 2006, 2015 Klaus Hartl & Fagner Brack
* Released under the MIT license
*/

//#endregion
//#region node_modules/@mux/playback-core/dist/index.mjs
var g$5 = Hls;
var C = {
	VIDEO: "video",
	THUMBNAIL: "thumbnail",
	STORYBOARD: "storyboard",
	DRM: "drm"
}, b$1 = {
	NOT_AN_ERROR: 0,
	NETWORK_OFFLINE: 2000002,
	NETWORK_UNKNOWN_ERROR: 2e6,
	NETWORK_NO_STATUS: 2000001,
	NETWORK_INVALID_URL: 24e5,
	NETWORK_NOT_FOUND: 2404e3,
	NETWORK_NOT_READY: 2412e3,
	NETWORK_GENERIC_SERVER_FAIL: 25e5,
	NETWORK_TOKEN_MISSING: 2403201,
	NETWORK_TOKEN_MALFORMED: 2412202,
	NETWORK_TOKEN_EXPIRED: 2403210,
	NETWORK_TOKEN_AUD_MISSING: 2403221,
	NETWORK_TOKEN_AUD_MISMATCH: 2403222,
	NETWORK_TOKEN_SUB_MISMATCH: 2403232,
	ENCRYPTED_ERROR: 5e6,
	ENCRYPTED_UNSUPPORTED_KEY_SYSTEM: 5000001,
	ENCRYPTED_GENERATE_REQUEST_FAILED: 5000002,
	ENCRYPTED_UPDATE_LICENSE_FAILED: 5000003,
	ENCRYPTED_UPDATE_SERVER_CERT_FAILED: 5000004,
	ENCRYPTED_CDM_ERROR: 5000005,
	ENCRYPTED_OUTPUT_RESTRICTED: 5000006,
	ENCRYPTED_MISSING_TOKEN: 5000002
}, V = (e$1) => e$1 === C.VIDEO ? "playback" : e$1, L = class L$2 extends Error {
	constructor(t$1, r$3 = L$2.MEDIA_ERR_CUSTOM, n$2, o$3) {
		var a$2;
		super(t$1), this.name = "MediaError", this.code = r$3, this.context = o$3, this.fatal = n$2 != null ? n$2 : r$3 >= L$2.MEDIA_ERR_NETWORK && r$3 <= L$2.MEDIA_ERR_ENCRYPTED, this.message || (this.message = (a$2 = L$2.defaultMessages[this.code]) != null ? a$2 : "");
	}
};
L.MEDIA_ERR_ABORTED = 1, L.MEDIA_ERR_NETWORK = 2, L.MEDIA_ERR_DECODE = 3, L.MEDIA_ERR_SRC_NOT_SUPPORTED = 4, L.MEDIA_ERR_ENCRYPTED = 5, L.MEDIA_ERR_CUSTOM = 100, L.defaultMessages = {
	1: "You aborted the media playback",
	2: "A network error caused the media download to fail.",
	3: "A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.",
	4: "An unsupported error occurred. The server or network failed, or your browser does not support this format.",
	5: "The media is encrypted and there are no keys to decrypt it."
};
var f = L;
var et$1 = (e$1) => e$1 == null, O$1 = (e$1, t$1) => et$1(t$1) ? !1 : e$1 in t$1, K$1 = {
	ANY: "any",
	MUTED: "muted"
}, _ = {
	ON_DEMAND: "on-demand",
	LIVE: "live",
	UNKNOWN: "unknown"
}, X$1 = {
	MSE: "mse",
	NATIVE: "native"
}, S = {
	HEADER: "header",
	QUERY: "query",
	NONE: "none"
}, jt = Object.values(S), A$1 = {
	M3U8: "application/vnd.apple.mpegurl",
	MP4: "video/mp4"
}, W = { HLS: A$1.M3U8 }, Jt$1 = Object.keys(W), qt$1 = [
	...Object.values(A$1),
	"hls",
	"HLS"
], Gt = {
	upTo720p: "720p",
	upTo1080p: "1080p",
	upTo1440p: "1440p",
	upTo2160p: "2160p"
}, Xt = {
	noLessThan480p: "480p",
	noLessThan540p: "540p",
	noLessThan720p: "720p",
	noLessThan1080p: "1080p",
	noLessThan1440p: "1440p",
	noLessThan2160p: "2160p"
}, zt = { DESCENDING: "desc" };
var Y$2 = { code: "en" };
var v$2 = (e$1, t$1, r$3, n$2, o$3 = e$1) => {
	o$3.addEventListener(t$1, r$3, n$2), e$1.addEventListener("teardown", () => {
		o$3.removeEventListener(t$1, r$3);
	}, { once: !0 });
};
function fe$2(e$1, t$1, r$3) {
	t$1 && r$3 > t$1 && (r$3 = t$1);
	for (let n$2 = 0; n$2 < e$1.length; n$2++) if (e$1.start(n$2) <= r$3 && e$1.end(n$2) >= r$3) return !0;
	return !1;
}
var F = (e$1) => {
	let t$1 = e$1.indexOf("?");
	if (t$1 < 0) return [e$1];
	let r$3 = e$1.slice(0, t$1), n$2 = e$1.slice(t$1);
	return [r$3, n$2];
}, U$1 = (e$1) => {
	let { type: t$1 } = e$1;
	if (t$1) {
		let r$3 = t$1.toUpperCase();
		return O$1(r$3, W) ? W[r$3] : t$1;
	}
	return rt$1(e$1);
}, Q$1 = (e$1) => e$1 === "VOD" ? _.ON_DEMAND : _.LIVE, Z = (e$1) => e$1 === "EVENT" ? Number.POSITIVE_INFINITY : e$1 === "VOD" ? NaN : 0, rt$1 = (e$1) => {
	let { src: t$1 } = e$1;
	if (!t$1) return "";
	let r$3 = "";
	try {
		r$3 = new URL(t$1).pathname;
	} catch {
		console.error("invalid url");
	}
	let n$2 = r$3.lastIndexOf(".");
	if (n$2 < 0) return ot$1(e$1) ? A$1.M3U8 : "";
	let a$2 = r$3.slice(n$2 + 1).toUpperCase();
	return O$1(a$2, A$1) ? A$1[a$2] : "";
}, nt$1 = "mux.com", ot$1 = ({ src: e$1, customDomain: t$1 = nt$1 }) => {
	let r$3;
	try {
		r$3 = new URL(`${e$1}`);
	} catch {
		return !1;
	}
	let n$2 = r$3.protocol === "https:", o$3 = r$3.hostname === `stream.${t$1}`.toLowerCase(), a$2 = r$3.pathname.split("/"), i$1 = a$2.length === 2, c$3 = !(a$2 != null && a$2[1].includes("."));
	return n$2 && o$3 && i$1 && c$3;
}, ee$1 = (e$1) => {
	let t$1 = (e$1 != null ? e$1 : "").split(".")[1];
	if (t$1) try {
		let r$3 = t$1.replace(/-/g, "+").replace(/_/g, "/"), n$2 = decodeURIComponent(atob(r$3).split("").map(function(o$3) {
			return "%" + ("00" + o$3.charCodeAt(0).toString(16)).slice(-2);
		}).join(""));
		return JSON.parse(n$2);
	} catch {
		return;
	}
}, Te = ({ exp: e$1 }, t$1 = Date.now()) => !e$1 || e$1 * 1e3 < t$1, ye$2 = ({ sub: e$1 }, t$1) => e$1 !== t$1, me$2 = ({ aud: e$1 }, t$1) => !e$1, Ee$2 = ({ aud: e$1 }, t$1) => e$1 !== t$1, ge$1 = "en";
function x$1(e$1, t$1 = !0) {
	var o$3, a$2;
	let r$3 = t$1 && (a$2 = (o$3 = Y$2) == null ? void 0 : o$3[e$1]) != null ? a$2 : e$1, n$2 = t$1 ? Y$2.code : ge$1;
	return new z$1(r$3, n$2);
}
var z$1 = class {
	constructor(t$1, r$3 = ((n$2) => (n$2 = Y$2) != null ? n$2 : ge$1)()) {
		this.message = t$1, this.locale = r$3;
	}
	format(t$1) {
		return this.message.replace(/\{(\w+)\}/g, (r$3, n$2) => {
			var o$3;
			return (o$3 = t$1[n$2]) != null ? o$3 : "";
		});
	}
	toString() {
		return this.message;
	}
};
var at$2 = Object.values(K$1), Me = (e$1) => typeof e$1 == "boolean" || typeof e$1 == "string" && at$2.includes(e$1), xe$2 = (e$1, t$1, r$3) => {
	let { autoplay: n$2 } = e$1, o$3 = !1, a$2 = !1, i$1 = Me(n$2) ? n$2 : !!n$2, c$3 = () => {
		o$3 || v$2(t$1, "playing", () => {
			o$3 = !0;
		}, { once: !0 });
	};
	if (c$3(), v$2(t$1, "loadstart", () => {
		o$3 = !1, c$3(), te$2(t$1, i$1);
	}, { once: !0 }), v$2(t$1, "loadstart", () => {
		r$3 || (e$1.streamType && e$1.streamType !== _.UNKNOWN ? a$2 = e$1.streamType === _.LIVE : a$2 = !Number.isFinite(t$1.duration)), te$2(t$1, i$1);
	}, { once: !0 }), r$3 && r$3.once(g$5.Events.LEVEL_LOADED, (u$4, s$2) => {
		var p$5;
		e$1.streamType && e$1.streamType !== _.UNKNOWN ? a$2 = e$1.streamType === _.LIVE : a$2 = (p$5 = s$2.details.live) != null ? p$5 : !1;
	}), !i$1) {
		let u$4 = () => {
			!a$2 || Number.isFinite(e$1.startTime) || (r$3 != null && r$3.liveSyncPosition ? t$1.currentTime = r$3.liveSyncPosition : Number.isFinite(t$1.seekable.end(0)) && (t$1.currentTime = t$1.seekable.end(0)));
		};
		r$3 && v$2(t$1, "play", () => {
			t$1.preload === "metadata" ? r$3.once(g$5.Events.LEVEL_UPDATED, u$4) : u$4();
		}, { once: !0 });
	}
	return (u$4) => {
		o$3 || (i$1 = Me(u$4) ? u$4 : !!u$4, te$2(t$1, i$1));
	};
}, te$2 = (e$1, t$1) => {
	if (!t$1) return;
	let r$3 = e$1.muted, n$2 = () => e$1.muted = r$3;
	switch (t$1) {
		case K$1.ANY:
			e$1.play().catch(() => {
				e$1.muted = !0, e$1.play().catch(n$2);
			});
			break;
		case K$1.MUTED:
			e$1.muted = !0, e$1.play().catch(n$2);
			break;
		default:
			e$1.play().catch(() => {});
			break;
	}
};
var Re$1 = ({ preload: e$1, src: t$1 }, r$3, n$2) => {
	let o$3 = (p$5) => {
		p$5 != null && [
			"",
			"none",
			"metadata",
			"auto"
		].includes(p$5) ? r$3.setAttribute("preload", p$5) : r$3.removeAttribute("preload");
	};
	if (!n$2) return o$3(e$1), o$3;
	let a$2 = !1, i$1 = !1, c$3 = n$2.config.maxBufferLength, d$2 = n$2.config.maxBufferSize, u$4 = (p$5) => {
		o$3(p$5);
		let l$3 = p$5 != null ? p$5 : r$3.preload;
		i$1 || l$3 === "none" || (l$3 === "metadata" ? (n$2.config.maxBufferLength = 1, n$2.config.maxBufferSize = 1) : (n$2.config.maxBufferLength = c$3, n$2.config.maxBufferSize = d$2), s$2());
	}, s$2 = () => {
		!a$2 && t$1 && (a$2 = !0, n$2.loadSource(t$1));
	};
	return v$2(r$3, "play", () => {
		i$1 = !0, n$2.config.maxBufferLength = c$3, n$2.config.maxBufferSize = d$2, s$2();
	}, { once: !0 }), u$4(e$1), u$4;
};
function be(e$1, t$1) {
	var c$3;
	if (!("videoTracks" in e$1)) return;
	let r$3 = /* @__PURE__ */ new WeakMap();
	t$1.on(g$5.Events.MANIFEST_PARSED, function(d$2, u$4) {
		i$1();
		let s$2 = e$1.addVideoTrack("main");
		s$2.selected = !0;
		for (let [p$5, l$3] of u$4.levels.entries()) {
			let T$2 = s$2.addRendition(l$3.url[0], l$3.width, l$3.height, l$3.videoCodec, l$3.bitrate);
			r$3.set(l$3, `${p$5}`), T$2.id = `${p$5}`;
		}
	}), t$1.on(g$5.Events.AUDIO_TRACKS_UPDATED, function(d$2, u$4) {
		a$2();
		for (let s$2 of u$4.audioTracks) {
			let p$5 = s$2.default ? "main" : "alternative", l$3 = e$1.addAudioTrack(p$5, s$2.name, s$2.lang);
			l$3.id = `${s$2.id}`, s$2.default && (l$3.enabled = !0);
		}
	}), e$1.audioTracks.addEventListener("change", () => {
		var s$2;
		let d$2 = +((s$2 = [...e$1.audioTracks].find((p$5) => p$5.enabled)) == null ? void 0 : s$2.id), u$4 = t$1.audioTracks.map((p$5) => p$5.id);
		d$2 != t$1.audioTrack && u$4.includes(d$2) && (t$1.audioTrack = d$2);
	}), t$1.on(g$5.Events.LEVELS_UPDATED, function(d$2, u$4) {
		var l$3;
		let s$2 = e$1.videoTracks[(l$3 = e$1.videoTracks.selectedIndex) != null ? l$3 : 0];
		if (!s$2) return;
		let p$5 = u$4.levels.map((T$2) => r$3.get(T$2));
		for (let T$2 of e$1.videoRenditions) T$2.id && !p$5.includes(T$2.id) && s$2.removeRendition(T$2);
	});
	let n$2 = (d$2) => {
		let u$4 = d$2.target.selectedIndex;
		u$4 != t$1.nextLevel && (t$1.nextLevel = u$4);
	};
	(c$3 = e$1.videoRenditions) == null || c$3.addEventListener("change", n$2);
	let o$3 = () => {
		for (let d$2 of e$1.videoTracks) e$1.removeVideoTrack(d$2);
	}, a$2 = () => {
		for (let d$2 of e$1.audioTracks) e$1.removeAudioTrack(d$2);
	}, i$1 = () => {
		o$3(), a$2();
	};
	t$1.once(g$5.Events.DESTROYING, i$1);
}
var re$2 = (e$1) => "time" in e$1 ? e$1.time : e$1.startTime;
function De(e$1, t$1) {
	t$1.on(g$5.Events.NON_NATIVE_TEXT_TRACKS_FOUND, (o$3, { tracks: a$2 }) => {
		a$2.forEach((i$1) => {
			var s$2, p$5;
			let c$3 = (s$2 = i$1.subtitleTrack) != null ? s$2 : i$1.closedCaptions, d$2 = t$1.subtitleTracks.findIndex(({ lang: l$3, name: T$2, type: m$5 }) => l$3 == (c$3 == null ? void 0 : c$3.lang) && T$2 === i$1.label && m$5.toLowerCase() === i$1.kind), u$4 = ((p$5 = i$1._id) != null ? p$5 : i$1.default) ? "default" : `${i$1.kind}${d$2}`;
			ne$1(e$1, i$1.kind, i$1.label, c$3 == null ? void 0 : c$3.lang, u$4, i$1.default);
		});
	});
	let r$3 = () => {
		if (!t$1.subtitleTracks.length) return;
		let o$3 = Array.from(e$1.textTracks).find((c$3) => c$3.id && c$3.mode === "showing" && ["subtitles", "captions"].includes(c$3.kind));
		if (!o$3) return;
		let a$2 = t$1.subtitleTracks[t$1.subtitleTrack], i$1 = a$2 ? a$2.default ? "default" : `${t$1.subtitleTracks[t$1.subtitleTrack].type.toLowerCase()}${t$1.subtitleTrack}` : void 0;
		if (t$1.subtitleTrack < 0 || (o$3 == null ? void 0 : o$3.id) !== i$1) t$1.subtitleTrack = t$1.subtitleTracks.findIndex(({ lang: d$2, name: u$4, type: s$2, default: p$5 }) => o$3.id === "default" && p$5 || d$2 == o$3.language && u$4 === o$3.label && s$2.toLowerCase() === o$3.kind);
		(o$3 == null ? void 0 : o$3.id) === i$1 && o$3.cues && Array.from(o$3.cues).forEach((c$3) => {
			o$3.addCue(c$3);
		});
	};
	e$1.textTracks.addEventListener("change", r$3), t$1.on(g$5.Events.CUES_PARSED, (o$3, { track: a$2, cues: i$1 }) => {
		let c$3 = e$1.textTracks.getTrackById(a$2);
		if (!c$3) return;
		let d$2 = c$3.mode === "disabled";
		d$2 && (c$3.mode = "hidden"), i$1.forEach((u$4) => {
			var s$2;
			(s$2 = c$3.cues) != null && s$2.getCueById(u$4.id) || c$3.addCue(u$4);
		}), d$2 && (c$3.mode = "disabled");
	}), t$1.once(g$5.Events.DESTROYING, () => {
		e$1.textTracks.removeEventListener("change", r$3), e$1.querySelectorAll("track[data-removeondestroy]").forEach((a$2) => {
			a$2.remove();
		});
	});
	let n$2 = () => {
		Array.from(e$1.textTracks).forEach((o$3) => {
			var a$2, i$1;
			if (!["subtitles", "caption"].includes(o$3.kind) && (o$3.label === "thumbnails" || o$3.kind === "chapters")) {
				if (!((a$2 = o$3.cues) != null && a$2.length)) {
					let c$3 = "track";
					o$3.kind && (c$3 += `[kind="${o$3.kind}"]`), o$3.label && (c$3 += `[label="${o$3.label}"]`);
					let d$2 = e$1.querySelector(c$3), u$4 = (i$1 = d$2 == null ? void 0 : d$2.getAttribute("src")) != null ? i$1 : "";
					d$2?.removeAttribute("src"), setTimeout(() => {
						d$2?.setAttribute("src", u$4);
					}, 0);
				}
				o$3.mode !== "hidden" && (o$3.mode = "hidden");
			}
		});
	};
	t$1.once(g$5.Events.MANIFEST_LOADED, n$2), t$1.once(g$5.Events.MEDIA_ATTACHED, n$2);
}
function ne$1(e$1, t$1, r$3, n$2, o$3, a$2) {
	let i$1 = document.createElement("track");
	return i$1.kind = t$1, i$1.label = r$3, n$2 && (i$1.srclang = n$2), o$3 && (i$1.id = o$3), a$2 && (i$1.default = !0), i$1.track.mode = ["subtitles", "captions"].includes(t$1) ? "disabled" : "hidden", i$1.setAttribute("data-removeondestroy", ""), e$1.append(i$1), i$1.track;
}
function st(e$1, t$1) {
	Array.prototype.find.call(e$1.querySelectorAll("track"), (n$2) => n$2.track === t$1)?.remove();
}
function w$1(e$1, t$1, r$3) {
	var n$2;
	return (n$2 = Array.from(e$1.querySelectorAll("track")).find((o$3) => o$3.track.label === t$1 && o$3.track.kind === r$3)) == null ? void 0 : n$2.track;
}
async function Ce$1(e$1, t$1, r$3, n$2) {
	let o$3 = w$1(e$1, r$3, n$2);
	return o$3 || (o$3 = ne$1(e$1, n$2, r$3), o$3.mode = "hidden", await new Promise((a$2) => setTimeout(() => a$2(void 0), 0))), o$3.mode !== "hidden" && (o$3.mode = "hidden"), [...t$1].sort((a$2, i$1) => re$2(i$1) - re$2(a$2)).forEach((a$2) => {
		var d$2, u$4;
		let i$1 = a$2.value, c$3 = re$2(a$2);
		if ("endTime" in a$2 && a$2.endTime != null) o$3?.addCue(new VTTCue(c$3, a$2.endTime, n$2 === "chapters" ? i$1 : JSON.stringify(i$1 != null ? i$1 : null)));
		else {
			let s$2 = Array.prototype.findIndex.call(o$3 == null ? void 0 : o$3.cues, (m$5) => m$5.startTime >= c$3), p$5 = (d$2 = o$3 == null ? void 0 : o$3.cues) == null ? void 0 : d$2[s$2], l$3 = p$5 ? p$5.startTime : Number.isFinite(e$1.duration) ? e$1.duration : Number.MAX_SAFE_INTEGER, T$2 = (u$4 = o$3 == null ? void 0 : o$3.cues) == null ? void 0 : u$4[s$2 - 1];
			T$2 && (T$2.endTime = c$3), o$3?.addCue(new VTTCue(c$3, l$3, n$2 === "chapters" ? i$1 : JSON.stringify(i$1 != null ? i$1 : null)));
		}
	}), e$1.textTracks.dispatchEvent(new Event("change", {
		bubbles: !0,
		composed: !0
	})), o$3;
}
var oe$2 = "cuepoints", ve$1 = Object.freeze({ label: oe$2 });
async function Pe$1(e$1, t$1, r$3 = ve$1) {
	return Ce$1(e$1, t$1, r$3.label, "metadata");
}
var $$1 = (e$1) => ({
	time: e$1.startTime,
	value: JSON.parse(e$1.text)
});
function it(e$1, t$1 = { label: oe$2 }) {
	let r$3 = w$1(e$1, t$1.label, "metadata");
	return r$3 != null && r$3.cues ? Array.from(r$3.cues, (n$2) => $$1(n$2)) : [];
}
function _e$1(e$1, t$1 = { label: oe$2 }) {
	var a$2, i$1;
	let r$3 = w$1(e$1, t$1.label, "metadata");
	if (!((a$2 = r$3 == null ? void 0 : r$3.activeCues) != null && a$2.length)) return;
	if (r$3.activeCues.length === 1) return $$1(r$3.activeCues[0]);
	let { currentTime: n$2 } = e$1, o$3 = Array.prototype.find.call((i$1 = r$3.activeCues) != null ? i$1 : [], ({ startTime: c$3, endTime: d$2 }) => c$3 <= n$2 && d$2 > n$2);
	return $$1(o$3 || r$3.activeCues[0]);
}
async function ke$1(e$1, t$1 = ve$1) {
	return new Promise((r$3) => {
		v$2(e$1, "loadstart", async () => {
			let n$2 = await Pe$1(e$1, [], t$1);
			v$2(e$1, "cuechange", () => {
				let o$3 = _e$1(e$1);
				if (o$3) {
					let a$2 = new CustomEvent("cuepointchange", {
						composed: !0,
						bubbles: !0,
						detail: o$3
					});
					e$1.dispatchEvent(a$2);
				}
			}, {}, n$2), r$3(n$2);
		});
	});
}
var ae$2 = "chapters", he$1 = Object.freeze({ label: ae$2 }), B$3 = (e$1) => ({
	startTime: e$1.startTime,
	endTime: e$1.endTime,
	value: e$1.text
});
async function Le(e$1, t$1, r$3 = he$1) {
	return Ce$1(e$1, t$1, r$3.label, "chapters");
}
function ct$1(e$1, t$1 = { label: ae$2 }) {
	var n$2;
	let r$3 = w$1(e$1, t$1.label, "chapters");
	return (n$2 = r$3 == null ? void 0 : r$3.cues) != null && n$2.length ? Array.from(r$3.cues, (o$3) => B$3(o$3)) : [];
}
function Ne$1(e$1, t$1 = { label: ae$2 }) {
	var a$2, i$1;
	let r$3 = w$1(e$1, t$1.label, "chapters");
	if (!((a$2 = r$3 == null ? void 0 : r$3.activeCues) != null && a$2.length)) return;
	if (r$3.activeCues.length === 1) return B$3(r$3.activeCues[0]);
	let { currentTime: n$2 } = e$1, o$3 = Array.prototype.find.call((i$1 = r$3.activeCues) != null ? i$1 : [], ({ startTime: c$3, endTime: d$2 }) => c$3 <= n$2 && d$2 > n$2);
	return B$3(o$3 || r$3.activeCues[0]);
}
async function Ae$1(e$1, t$1 = he$1) {
	return new Promise((r$3) => {
		v$2(e$1, "loadstart", async () => {
			let n$2 = await Le(e$1, [], t$1);
			v$2(e$1, "cuechange", () => {
				let o$3 = Ne$1(e$1);
				if (o$3) {
					let a$2 = new CustomEvent("chapterchange", {
						composed: !0,
						bubbles: !0,
						detail: o$3
					});
					e$1.dispatchEvent(a$2);
				}
			}, {}, n$2), r$3(n$2);
		});
	});
}
function ut$1(e$1, t$1) {
	if (t$1) {
		let r$3 = t$1.playingDate;
		if (r$3 != null) return /* @__PURE__ */ new Date(r$3.getTime() - e$1.currentTime * 1e3);
	}
	return typeof e$1.getStartDate == "function" ? e$1.getStartDate() : /* @__PURE__ */ new Date(NaN);
}
function dt$1(e$1, t$1) {
	if (t$1 && t$1.playingDate) return t$1.playingDate;
	if (typeof e$1.getStartDate == "function") {
		let r$3 = e$1.getStartDate();
		return new Date(r$3.getTime() + e$1.currentTime * 1e3);
	}
	return /* @__PURE__ */ new Date(NaN);
}
var se$1 = {
	VIDEO: "v",
	THUMBNAIL: "t",
	STORYBOARD: "s",
	DRM: "d"
}, lt = (e$1) => {
	if (e$1 === C.VIDEO) return se$1.VIDEO;
	if (e$1 === C.DRM) return se$1.DRM;
}, pt$1 = (e$1, t$1) => {
	var o$3, a$2;
	let r$3 = V(e$1), n$2 = `${r$3}Token`;
	return (o$3 = t$1.tokens) != null && o$3[r$3] ? (a$2 = t$1.tokens) == null ? void 0 : a$2[r$3] : O$1(n$2, t$1) ? t$1[n$2] : void 0;
}, H$1 = (e$1, t$1, r$3, n$2, o$3 = !1, a$2 = !((i$1) => (i$1 = globalThis.navigator) == null ? void 0 : i$1.onLine)()) => {
	var M$2, h$2;
	if (a$2) {
		let E$3 = x$1("Your device appears to be offline", o$3), D$3 = void 0, y$4 = f.MEDIA_ERR_NETWORK, k$1 = new f(E$3, y$4, !1, D$3);
		return k$1.errorCategory = t$1, k$1.muxCode = b$1.NETWORK_OFFLINE, k$1.data = e$1, k$1;
	}
	let c$3 = "status" in e$1 ? e$1.status : e$1.code, d$2 = Date.now(), u$4 = f.MEDIA_ERR_NETWORK;
	if (c$3 === 200) return;
	let s$2 = V(t$1), p$5 = pt$1(t$1, r$3), l$3 = lt(t$1), [T$2] = F((M$2 = r$3.playbackId) != null ? M$2 : "");
	if (!c$3 || !T$2) return;
	let m$5 = ee$1(p$5);
	if (p$5 && !m$5) {
		let E$3 = x$1("The {tokenNamePrefix}-token provided is invalid or malformed.", o$3).format({ tokenNamePrefix: s$2 }), D$3 = x$1("Compact JWT string: {token}", o$3).format({ token: p$5 }), y$4 = new f(E$3, u$4, !0, D$3);
		return y$4.errorCategory = t$1, y$4.muxCode = b$1.NETWORK_TOKEN_MALFORMED, y$4.data = e$1, y$4;
	}
	if (c$3 >= 500) {
		let E$3 = new f("", u$4, n$2 != null ? n$2 : !0);
		return E$3.errorCategory = t$1, E$3.muxCode = b$1.NETWORK_UNKNOWN_ERROR, E$3;
	}
	if (c$3 === 403) if (m$5) {
		if (Te(m$5, d$2)) {
			let E$3 = {
				timeStyle: "medium",
				dateStyle: "medium"
			}, D$3 = x$1("The video’s secured {tokenNamePrefix}-token has expired.", o$3).format({ tokenNamePrefix: s$2 }), y$4 = x$1("Expired at: {expiredDate}. Current time: {currentDate}.", o$3).format({
				expiredDate: new Intl.DateTimeFormat("en", E$3).format((h$2 = m$5.exp) != null ? h$2 : 0),
				currentDate: new Intl.DateTimeFormat("en", E$3).format(d$2)
			}), k$1 = new f(D$3, u$4, !0, y$4);
			return k$1.errorCategory = t$1, k$1.muxCode = b$1.NETWORK_TOKEN_EXPIRED, k$1.data = e$1, k$1;
		}
		if (ye$2(m$5, T$2)) {
			let E$3 = x$1("The video’s playback ID does not match the one encoded in the {tokenNamePrefix}-token.", o$3).format({ tokenNamePrefix: s$2 }), D$3 = x$1("Specified playback ID: {playbackId} and the playback ID encoded in the {tokenNamePrefix}-token: {tokenPlaybackId}", o$3).format({
				tokenNamePrefix: s$2,
				playbackId: T$2,
				tokenPlaybackId: m$5.sub
			}), y$4 = new f(E$3, u$4, !0, D$3);
			return y$4.errorCategory = t$1, y$4.muxCode = b$1.NETWORK_TOKEN_SUB_MISMATCH, y$4.data = e$1, y$4;
		}
		if (me$2(m$5, l$3)) {
			let E$3 = x$1("The {tokenNamePrefix}-token is formatted with incorrect information.", o$3).format({ tokenNamePrefix: s$2 }), D$3 = x$1("The {tokenNamePrefix}-token has no aud value. aud value should be {expectedAud}.", o$3).format({
				tokenNamePrefix: s$2,
				expectedAud: l$3
			}), y$4 = new f(E$3, u$4, !0, D$3);
			return y$4.errorCategory = t$1, y$4.muxCode = b$1.NETWORK_TOKEN_AUD_MISSING, y$4.data = e$1, y$4;
		}
		if (Ee$2(m$5, l$3)) {
			let E$3 = x$1("The {tokenNamePrefix}-token is formatted with incorrect information.", o$3).format({ tokenNamePrefix: s$2 }), D$3 = x$1("The {tokenNamePrefix}-token has an incorrect aud value: {aud}. aud value should be {expectedAud}.", o$3).format({
				tokenNamePrefix: s$2,
				expectedAud: l$3,
				aud: m$5.aud
			}), y$4 = new f(E$3, u$4, !0, D$3);
			return y$4.errorCategory = t$1, y$4.muxCode = b$1.NETWORK_TOKEN_AUD_MISMATCH, y$4.data = e$1, y$4;
		}
	} else {
		let E$3 = x$1("Authorization error trying to access this {category} URL. If this is a signed URL, you might need to provide a {tokenNamePrefix}-token.", o$3).format({
			tokenNamePrefix: s$2,
			category: t$1
		}), D$3 = x$1("Specified playback ID: {playbackId}", o$3).format({ playbackId: T$2 }), y$4 = new f(E$3, u$4, n$2 != null ? n$2 : !0, D$3);
		return y$4.errorCategory = t$1, y$4.muxCode = b$1.NETWORK_TOKEN_MISSING, y$4.data = e$1, y$4;
	}
	if (c$3 === 412) {
		let E$3 = x$1("This playback-id may belong to a live stream that is not currently active or an asset that is not ready.", o$3), D$3 = x$1("Specified playback ID: {playbackId}", o$3).format({ playbackId: T$2 }), y$4 = new f(E$3, u$4, n$2 != null ? n$2 : !0, D$3);
		return y$4.errorCategory = t$1, y$4.muxCode = b$1.NETWORK_NOT_READY, y$4.streamType = r$3.streamType === _.LIVE ? "live" : r$3.streamType === _.ON_DEMAND ? "on-demand" : "unknown", y$4.data = e$1, y$4;
	}
	if (c$3 === 404) {
		let E$3 = x$1("This URL or playback-id does not exist. You may have used an Asset ID or an ID from a different resource.", o$3), D$3 = x$1("Specified playback ID: {playbackId}", o$3).format({ playbackId: T$2 }), y$4 = new f(E$3, u$4, n$2 != null ? n$2 : !0, D$3);
		return y$4.errorCategory = t$1, y$4.muxCode = b$1.NETWORK_NOT_FOUND, y$4.data = e$1, y$4;
	}
	if (c$3 === 400) {
		let E$3 = x$1("The URL or playback-id was invalid. You may have used an invalid value as a playback-id."), D$3 = x$1("Specified playback ID: {playbackId}", o$3).format({ playbackId: T$2 }), y$4 = new f(E$3, u$4, n$2 != null ? n$2 : !0, D$3);
		return y$4.errorCategory = t$1, y$4.muxCode = b$1.NETWORK_INVALID_URL, y$4.data = e$1, y$4;
	}
	let R = new f("", u$4, n$2 != null ? n$2 : !0);
	return R.errorCategory = t$1, R.muxCode = b$1.NETWORK_UNKNOWN_ERROR, R.data = e$1, R;
};
var Ie = g$5.DefaultConfig.capLevelController, j$1 = class j$2 extends Ie {
	constructor(t$1) {
		super(t$1);
	}
	get levels() {
		var t$1;
		return (t$1 = this.hls.levels) != null ? t$1 : [];
	}
	getValidLevels(t$1) {
		return this.levels.filter((r$3, n$2) => this.isLevelAllowed(r$3) && n$2 <= t$1);
	}
	getMaxLevel(t$1) {
		let r$3 = super.getMaxLevel(t$1), n$2 = this.getValidLevels(t$1);
		if (!n$2[r$3]) return r$3;
		let o$3 = Math.min(n$2[r$3].width, n$2[r$3].height), a$2 = j$2.minMaxResolution;
		return o$3 >= a$2 ? r$3 : Ie.getMaxLevelByMediaSize(n$2, a$2 * (16 / 9), a$2);
	}
};
j$1.minMaxResolution = 720;
var Se$1 = j$1;
var J$1 = {
	FAIRPLAY: "fairplay",
	PLAYREADY: "playready",
	WIDEVINE: "widevine"
}, ft = (e$1) => {
	if (e$1.includes("fps")) return J$1.FAIRPLAY;
	if (e$1.includes("playready")) return J$1.PLAYREADY;
	if (e$1.includes("widevine")) return J$1.WIDEVINE;
}, Tt$1 = (e$1) => {
	let t$1 = e$1.split(`
`).find((r$3, n$2, o$3) => n$2 && o$3[n$2 - 1].startsWith("#EXT-X-STREAM-INF"));
	return fetch(t$1).then((r$3) => r$3.status !== 200 ? Promise.reject(r$3) : r$3.text());
}, yt = (e$1) => {
	let t$1 = e$1.split(`
`).filter((n$2) => n$2.startsWith("#EXT-X-SESSION-DATA"));
	if (!t$1.length) return {};
	let r$3 = {};
	for (let n$2 of t$1) {
		let o$3 = Et$1(n$2), a$2 = o$3["DATA-ID"];
		a$2 && (r$3[a$2] = { ...o$3 });
	}
	return { sessionData: r$3 };
}, mt$1 = /([A-Z0-9-]+)="?(.*?)"?(?:,|$)/g;
function Et$1(e$1) {
	let t$1 = [...e$1.matchAll(mt$1)];
	return Object.fromEntries(t$1.map(([, r$3, n$2]) => [r$3, n$2]));
}
var gt$1 = (e$1) => {
	var c$3, d$2, u$4;
	let t$1 = e$1.split(`
`), n$2 = (d$2 = ((c$3 = t$1.find((s$2) => s$2.startsWith("#EXT-X-PLAYLIST-TYPE"))) != null ? c$3 : "").split(":")[1]) == null ? void 0 : d$2.trim(), o$3 = Q$1(n$2), a$2 = Z(n$2), i$1;
	if (o$3 === _.LIVE) {
		let s$2 = t$1.find((l$3) => l$3.startsWith("#EXT-X-PART-INF"));
		if (!!s$2) i$1 = +s$2.split(":")[1].split("=")[1] * 2;
		else {
			let l$3 = t$1.find((R) => R.startsWith("#EXT-X-TARGETDURATION")), T$2 = (u$4 = l$3 == null ? void 0 : l$3.split(":")) == null ? void 0 : u$4[1];
			i$1 = +(T$2 != null ? T$2 : 6) * 3;
		}
	}
	return {
		streamType: o$3,
		targetLiveWindow: a$2,
		liveEdgeStartOffset: i$1
	};
}, Mt$1 = async (e$1, t$1) => {
	if (t$1 === A$1.MP4) return {
		streamType: _.ON_DEMAND,
		targetLiveWindow: NaN,
		liveEdgeStartOffset: void 0,
		sessionData: void 0
	};
	if (t$1 === A$1.M3U8) {
		let r$3 = await fetch(e$1);
		if (!r$3.ok) return Promise.reject(r$3);
		let n$2 = await r$3.text(), o$3 = await Tt$1(n$2);
		return {
			...yt(n$2),
			...gt$1(o$3)
		};
	}
	return console.error(`Media type ${t$1} is an unrecognized or unsupported type for src ${e$1}.`), {
		streamType: void 0,
		targetLiveWindow: void 0,
		liveEdgeStartOffset: void 0,
		sessionData: void 0
	};
}, xt$1 = async (e$1, t$1, r$3 = U$1({ src: e$1 })) => {
	var d$2, u$4, s$2, p$5;
	let { streamType: n$2, targetLiveWindow: o$3, liveEdgeStartOffset: a$2, sessionData: i$1 } = await Mt$1(e$1, r$3), c$3 = i$1 == null ? void 0 : i$1["com.apple.hls.chapters"];
	(c$3 != null && c$3.URI || c$3 != null && c$3.VALUE.toLocaleLowerCase().startsWith("http")) && de$2((d$2 = c$3.URI) != null ? d$2 : c$3.VALUE, t$1), ((u$4 = P$3.get(t$1)) != null ? u$4 : {}).liveEdgeStartOffset = a$2, ((s$2 = P$3.get(t$1)) != null ? s$2 : {}).targetLiveWindow = o$3, t$1.dispatchEvent(new CustomEvent("targetlivewindowchange", {
		composed: !0,
		bubbles: !0
	})), ((p$5 = P$3.get(t$1)) != null ? p$5 : {}).streamType = n$2, t$1.dispatchEvent(new CustomEvent("streamtypechange", {
		composed: !0,
		bubbles: !0
	}));
}, de$2 = async (e$1, t$1) => {
	var r$3, n$2;
	try {
		let o$3 = await fetch(e$1);
		if (!o$3.ok) throw new Error(`Failed to fetch Mux metadata: ${o$3.status} ${o$3.statusText}`);
		let a$2 = await o$3.json(), i$1 = {};
		if (!((r$3 = a$2 == null ? void 0 : a$2[0]) != null && r$3.metadata)) return;
		for (let d$2 of a$2[0].metadata) d$2.key && d$2.value && (i$1[d$2.key] = d$2.value);
		((n$2 = P$3.get(t$1)) != null ? n$2 : {}).metadata = i$1;
		let c$3 = new CustomEvent("muxmetadata");
		t$1.dispatchEvent(c$3);
	} catch (o$3) {
		console.error(o$3);
	}
}, Rt = (e$1) => {
	var i$1;
	let t$1 = e$1.type, r$3 = Q$1(t$1), n$2 = Z(t$1), o$3, a$2 = !!((i$1 = e$1.partList) != null && i$1.length);
	return r$3 === _.LIVE && (o$3 = a$2 ? e$1.partTarget * 2 : e$1.targetduration * 3), {
		streamType: r$3,
		targetLiveWindow: n$2,
		liveEdgeStartOffset: o$3,
		lowLatency: a$2
	};
}, bt$1 = (e$1, t$1, r$3) => {
	var c$3, d$2, u$4, s$2, p$5, l$3, T$2, m$5;
	let { streamType: n$2, targetLiveWindow: o$3, liveEdgeStartOffset: a$2, lowLatency: i$1 } = Rt(e$1);
	if (n$2 === _.LIVE) {
		i$1 ? (r$3.config.backBufferLength = (c$3 = r$3.userConfig.backBufferLength) != null ? c$3 : 4, r$3.config.maxFragLookUpTolerance = (d$2 = r$3.userConfig.maxFragLookUpTolerance) != null ? d$2 : .001, r$3.config.abrBandWidthUpFactor = (u$4 = r$3.userConfig.abrBandWidthUpFactor) != null ? u$4 : r$3.config.abrBandWidthFactor) : r$3.config.backBufferLength = (s$2 = r$3.userConfig.backBufferLength) != null ? s$2 : 8;
		let R = Object.freeze({
			get length() {
				return t$1.seekable.length;
			},
			start(M$2) {
				return t$1.seekable.start(M$2);
			},
			end(M$2) {
				var h$2;
				return M$2 > this.length || M$2 < 0 || Number.isFinite(t$1.duration) ? t$1.seekable.end(M$2) : (h$2 = r$3.liveSyncPosition) != null ? h$2 : t$1.seekable.end(M$2);
			}
		});
		((p$5 = P$3.get(t$1)) != null ? p$5 : {}).seekable = R;
	}
	((l$3 = P$3.get(t$1)) != null ? l$3 : {}).liveEdgeStartOffset = a$2, ((T$2 = P$3.get(t$1)) != null ? T$2 : {}).targetLiveWindow = o$3, t$1.dispatchEvent(new CustomEvent("targetlivewindowchange", {
		composed: !0,
		bubbles: !0
	})), ((m$5 = P$3.get(t$1)) != null ? m$5 : {}).streamType = n$2, t$1.dispatchEvent(new CustomEvent("streamtypechange", {
		composed: !0,
		bubbles: !0
	}));
}, Oe, Ue, Dt$1 = (Ue = (Oe = globalThis == null ? void 0 : globalThis.navigator) == null ? void 0 : Oe.userAgent) != null ? Ue : "", He, Ve, Ke, Ct$1 = (Ke = (Ve = (He = globalThis == null ? void 0 : globalThis.navigator) == null ? void 0 : He.userAgentData) == null ? void 0 : Ve.platform) != null ? Ke : "", vt$1 = Dt$1.toLowerCase().includes("android") || ["x11", "android"].some((e$1) => Ct$1.toLowerCase().includes(e$1)), P$3 = /* @__PURE__ */ new WeakMap(), I$2 = "mux.com", We, Ye, Fe = (Ye = (We = g$5).isSupported) == null ? void 0 : Ye.call(We), Pt$1 = vt$1, Wr = () => Ed.utils.now(), _t = Ed.utils.generateUUID, Yr = ({ playbackId: e$1, customDomain: t$1 = I$2, maxResolution: r$3, minResolution: n$2, renditionOrder: o$3, programStartTime: a$2, programEndTime: i$1, assetStartTime: c$3, assetEndTime: d$2, playbackToken: u$4, tokens: { playback: s$2 = u$4 } = {}, extraSourceParams: p$5 = {} } = {}) => {
	if (!e$1) return;
	let [l$3, T$2 = ""] = F(e$1), m$5 = new URL(`https://stream.${t$1}/${l$3}.m3u8${T$2}`);
	return s$2 || m$5.searchParams.has("token") ? (m$5.searchParams.forEach((R, M$2) => {
		M$2 != "token" && m$5.searchParams.delete(M$2);
	}), s$2 && m$5.searchParams.set("token", s$2)) : (r$3 && m$5.searchParams.set("max_resolution", r$3), n$2 && (m$5.searchParams.set("min_resolution", n$2), r$3 && +r$3.slice(0, -1) < +n$2.slice(0, -1) && console.error("minResolution must be <= maxResolution", "minResolution", n$2, "maxResolution", r$3)), o$3 && m$5.searchParams.set("rendition_order", o$3), a$2 && m$5.searchParams.set("program_start_time", `${a$2}`), i$1 && m$5.searchParams.set("program_end_time", `${i$1}`), c$3 && m$5.searchParams.set("asset_start_time", `${c$3}`), d$2 && m$5.searchParams.set("asset_end_time", `${d$2}`), Object.entries(p$5).forEach(([R, M$2]) => {
		M$2 != null && m$5.searchParams.set(R, M$2);
	})), m$5.toString();
}, G$1 = (e$1) => {
	if (!e$1) return;
	let [t$1] = e$1.split("?");
	return t$1 || void 0;
}, $e = (e$1) => {
	if (!e$1 || !e$1.startsWith("https://stream.")) return;
	let [t$1] = new URL(e$1).pathname.slice(1).split(/\.m3u8|\//);
	return t$1 || void 0;
}, kt = (e$1) => {
	var t$1, r$3, n$2;
	return (t$1 = e$1 == null ? void 0 : e$1.metadata) != null && t$1.video_id ? e$1.metadata.video_id : Xe(e$1) && (n$2 = (r$3 = G$1(e$1.playbackId)) != null ? r$3 : $e(e$1.src)) != null ? n$2 : e$1.src;
}, ht = (e$1) => {
	var t$1;
	return (t$1 = P$3.get(e$1)) == null ? void 0 : t$1.error;
}, Fr = (e$1) => {
	var t$1;
	return (t$1 = P$3.get(e$1)) == null ? void 0 : t$1.metadata;
}, we$1 = (e$1) => {
	var t$1, r$3;
	return (r$3 = (t$1 = P$3.get(e$1)) == null ? void 0 : t$1.streamType) != null ? r$3 : _.UNKNOWN;
}, $r = (e$1) => {
	var t$1, r$3;
	return (r$3 = (t$1 = P$3.get(e$1)) == null ? void 0 : t$1.targetLiveWindow) != null ? r$3 : NaN;
}, Be = (e$1) => {
	var t$1, r$3;
	return (r$3 = (t$1 = P$3.get(e$1)) == null ? void 0 : t$1.seekable) != null ? r$3 : e$1.seekable;
}, Br = (e$1) => {
	var n$2;
	let t$1 = (n$2 = P$3.get(e$1)) == null ? void 0 : n$2.liveEdgeStartOffset;
	if (typeof t$1 != "number") return NaN;
	let r$3 = Be(e$1);
	return r$3.length ? r$3.end(r$3.length - 1) - t$1 : NaN;
}, le$1 = .034, Lt$1 = (e$1, t$1, r$3 = le$1) => Math.abs(e$1 - t$1) <= r$3, je = (e$1, t$1, r$3 = le$1) => e$1 > t$1 || Lt$1(e$1, t$1, r$3), Nt$1 = (e$1, t$1 = le$1) => e$1.paused && je(e$1.currentTime, e$1.duration, t$1), Je$1 = (e$1, t$1) => {
	var u$4, s$2, p$5;
	if (!t$1 || !e$1.buffered.length) return;
	if (e$1.readyState > 2) return !1;
	let r$3 = t$1.currentLevel >= 0 ? (s$2 = (u$4 = t$1.levels) == null ? void 0 : u$4[t$1.currentLevel]) == null ? void 0 : s$2.details : (p$5 = t$1.levels.find((l$3) => !!l$3.details)) == null ? void 0 : p$5.details;
	if (!r$3 || r$3.live) return;
	let { fragments: n$2 } = r$3;
	if (!(n$2 != null && n$2.length)) return;
	if (e$1.currentTime < e$1.duration - (r$3.targetduration + .5)) return !1;
	let o$3 = n$2[n$2.length - 1];
	if (e$1.currentTime <= o$3.start) return !1;
	let a$2 = o$3.start + o$3.duration / 2, i$1 = e$1.buffered.start(e$1.buffered.length - 1), c$3 = e$1.buffered.end(e$1.buffered.length - 1);
	return a$2 > i$1 && a$2 < c$3;
}, At$1 = (e$1, t$1) => e$1.ended || e$1.loop ? e$1.ended : t$1 && Je$1(e$1, t$1) ? !0 : Nt$1(e$1), jr = (e$1, t$1, r$3) => {
	It$1(t$1, r$3, e$1);
	let { metadata: n$2 = {} } = e$1, { view_session_id: o$3 = _t() } = n$2, a$2 = kt(e$1);
	n$2.view_session_id = o$3, n$2.video_id = a$2, e$1.metadata = n$2;
	let i$1 = (s$2) => {
		var p$5;
		(p$5 = t$1.mux) == null || p$5.emit("hb", { view_drm_type: s$2 });
	};
	e$1.drmTypeCb = i$1, P$3.set(t$1, { retryCount: 0 });
	let c$3 = St(e$1, t$1), d$2 = Re$1(e$1, t$1, c$3);
	e$1 != null && e$1.muxDataKeepSession && t$1 != null && t$1.mux && !t$1.mux.deleted ? c$3 && t$1.mux.addHLSJS({
		hlsjs: c$3,
		Hls: c$3 ? g$5 : void 0
	}) : Kt$1(e$1, t$1, c$3), Wt$1(e$1, t$1, c$3), ke$1(t$1), Ae$1(t$1);
	let u$4 = xe$2(e$1, t$1, c$3);
	return {
		engine: c$3,
		setAutoplay: u$4,
		setPreload: d$2
	};
}, It$1 = (e$1, t$1, r$3) => {
	let n$2 = t$1 == null ? void 0 : t$1.engine;
	e$1 != null && e$1.mux && !e$1.mux.deleted && (r$3 != null && r$3.muxDataKeepSession ? n$2 && e$1.mux.removeHLSJS() : (e$1.mux.destroy(), delete e$1.mux)), n$2 && (n$2.detachMedia(), n$2.destroy()), e$1 && (e$1.hasAttribute("src") && (e$1.removeAttribute("src"), e$1.load()), e$1.removeEventListener("error", Qe), e$1.removeEventListener("error", ce$1), e$1.removeEventListener("durationchange", ze$1), P$3.delete(e$1), e$1.dispatchEvent(new Event("teardown")));
};
function qe(e$1, t$1) {
	var u$4;
	let r$3 = U$1(e$1);
	if (!(r$3 === A$1.M3U8)) return !0;
	let o$3 = !r$3 || ((u$4 = t$1.canPlayType(r$3)) != null ? u$4 : !0), { preferPlayback: a$2 } = e$1, i$1 = a$2 === X$1.MSE, c$3 = a$2 === X$1.NATIVE;
	return o$3 && (c$3 || !(Fe && (i$1 || Pt$1)));
}
var St = (e$1, t$1) => {
	let { debug: r$3, streamType: n$2, startTime: o$3 = -1, metadata: a$2, preferCmcd: i$1, _hlsConfig: c$3 = {} } = e$1, u$4 = U$1(e$1) === A$1.M3U8, s$2 = qe(e$1, t$1);
	if (u$4 && !s$2 && Fe) {
		let p$5 = {
			backBufferLength: 30,
			renderTextTracksNatively: !1,
			liveDurationInfinity: !0,
			capLevelToPlayerSize: !0,
			capLevelOnFPSDrop: !0
		}, l$3 = wt$1(n$2), T$2 = Ot$1(e$1), m$5 = [S.QUERY, S.HEADER].includes(i$1) ? {
			useHeaders: i$1 === S.HEADER,
			sessionId: a$2 == null ? void 0 : a$2.view_session_id,
			contentId: a$2 == null ? void 0 : a$2.video_id
		} : void 0, R = new g$5({
			debug: r$3,
			startPosition: o$3,
			cmcd: m$5,
			xhrSetup: (M$2, h$2) => {
				var y$4, k$1;
				if (i$1 && i$1 !== S.QUERY) return;
				let E$3 = new URL(h$2);
				if (!E$3.searchParams.has("CMCD")) return;
				let D$3 = ((k$1 = (y$4 = E$3.searchParams.get("CMCD")) == null ? void 0 : y$4.split(",")) != null ? k$1 : []).filter((pe$2) => pe$2.startsWith("sid") || pe$2.startsWith("cid")).join(",");
				E$3.searchParams.set("CMCD", D$3), M$2.open("GET", E$3);
			},
			capLevelController: Se$1,
			...p$5,
			...l$3,
			...T$2,
			...c$3
		});
		return R.on(g$5.Events.MANIFEST_PARSED, async function(M$2, h$2) {
			var D$3, y$4;
			let E$3 = (D$3 = h$2.sessionData) == null ? void 0 : D$3["com.apple.hls.chapters"];
			(E$3 != null && E$3.URI || E$3 != null && E$3.VALUE.toLocaleLowerCase().startsWith("http")) && de$2((y$4 = E$3 == null ? void 0 : E$3.URI) != null ? y$4 : E$3 == null ? void 0 : E$3.VALUE, t$1);
		}), R;
	}
}, wt$1 = (e$1) => e$1 === _.LIVE ? { backBufferLength: 8 } : {}, Ot$1 = (e$1) => {
	let { tokens: { drm: t$1 } = {}, playbackId: r$3, drmTypeCb: n$2 } = e$1, o$3 = G$1(r$3);
	return !t$1 || !o$3 ? {} : {
		emeEnabled: !0,
		drmSystems: {
			"com.apple.fps": {
				licenseUrl: q$1(e$1, "fairplay"),
				serverCertificateUrl: Ge(e$1, "fairplay")
			},
			"com.widevine.alpha": { licenseUrl: q$1(e$1, "widevine") },
			"com.microsoft.playready": { licenseUrl: q$1(e$1, "playready") }
		},
		requestMediaKeySystemAccessFunc: (a$2, i$1) => (a$2 === "com.widevine.alpha" && (i$1 = [...i$1.map((c$3) => {
			var u$4;
			let d$2 = (u$4 = c$3.videoCapabilities) == null ? void 0 : u$4.map((s$2) => ({
				...s$2,
				robustness: "HW_SECURE_ALL"
			}));
			return {
				...c$3,
				videoCapabilities: d$2
			};
		}), ...i$1]), navigator.requestMediaKeySystemAccess(a$2, i$1).then((c$3) => {
			let d$2 = ft(a$2);
			return n$2?.(d$2), c$3;
		}))
	};
}, Ut$1 = async (e$1) => {
	let t$1 = await fetch(e$1);
	return t$1.status !== 200 ? Promise.reject(t$1) : await t$1.arrayBuffer();
}, Ht$1 = async (e$1, t$1) => {
	let r$3 = await fetch(t$1, {
		method: "POST",
		headers: { "Content-type": "application/octet-stream" },
		body: e$1
	});
	if (r$3.status !== 200) return Promise.reject(r$3);
	let n$2 = await r$3.arrayBuffer();
	return new Uint8Array(n$2);
}, Vt$1 = (e$1, t$1) => {
	v$2(t$1, "encrypted", async (n$2) => {
		try {
			let o$3 = n$2.initDataType;
			if (o$3 !== "skd") {
				console.error(`Received unexpected initialization data type "${o$3}"`);
				return;
			}
			if (!t$1.mediaKeys) {
				let u$4 = await navigator.requestMediaKeySystemAccess("com.apple.fps", [{
					initDataTypes: [o$3],
					videoCapabilities: [{
						contentType: "application/vnd.apple.mpegurl",
						robustness: ""
					}],
					distinctiveIdentifier: "not-allowed",
					persistentState: "not-allowed",
					sessionTypes: ["temporary"]
				}]).then((p$5) => {
					var l$3;
					return (l$3 = e$1.drmTypeCb) == null || l$3.call(e$1, J$1.FAIRPLAY), p$5;
				}).catch(() => {
					let p$5 = x$1("Cannot play DRM-protected content with current security configuration on this browser. Try playing in another browser."), l$3 = new f(p$5, f.MEDIA_ERR_ENCRYPTED, !0);
					l$3.errorCategory = C.DRM, l$3.muxCode = b$1.ENCRYPTED_UNSUPPORTED_KEY_SYSTEM, N$2(t$1, l$3);
				});
				if (!u$4) return;
				let s$2 = await u$4.createMediaKeys();
				try {
					let p$5 = await Ut$1(Ge(e$1, "fairplay")).catch((l$3) => {
						if (l$3 instanceof Response) {
							let T$2 = H$1(l$3, C.DRM, e$1);
							return console.error("mediaError", T$2 == null ? void 0 : T$2.message, T$2 == null ? void 0 : T$2.context), T$2 ? Promise.reject(T$2) : Promise.reject(/* @__PURE__ */ new Error("Unexpected error in app cert request"));
						}
						return Promise.reject(l$3);
					});
					await s$2.setServerCertificate(p$5).catch(() => {
						let l$3 = x$1("Your server certificate failed when attempting to set it. This may be an issue with a no longer valid certificate."), T$2 = new f(l$3, f.MEDIA_ERR_ENCRYPTED, !0);
						return T$2.errorCategory = C.DRM, T$2.muxCode = b$1.ENCRYPTED_UPDATE_SERVER_CERT_FAILED, Promise.reject(T$2);
					});
				} catch (p$5) {
					N$2(t$1, p$5);
					return;
				}
				await t$1.setMediaKeys(s$2);
			}
			let a$2 = n$2.initData;
			if (a$2 == null) {
				console.error(`Could not start encrypted playback due to missing initData in ${n$2.type} event`);
				return;
			}
			let i$1 = t$1.mediaKeys.createSession();
			i$1.addEventListener("keystatuseschange", () => {
				i$1.keyStatuses.forEach((u$4) => {
					let s$2;
					if (u$4 === "internal-error") {
						let p$5 = x$1("The DRM Content Decryption Module system had an internal failure. Try reloading the page, upading your browser, or playing in another browser.");
						s$2 = new f(p$5, f.MEDIA_ERR_ENCRYPTED, !0), s$2.errorCategory = C.DRM, s$2.muxCode = b$1.ENCRYPTED_CDM_ERROR;
					} else if (u$4 === "output-restricted" || u$4 === "output-downscaled") {
						let p$5 = x$1("DRM playback is being attempted in an environment that is not sufficiently secure. User may see black screen.");
						s$2 = new f(p$5, f.MEDIA_ERR_ENCRYPTED, !1), s$2.errorCategory = C.DRM, s$2.muxCode = b$1.ENCRYPTED_OUTPUT_RESTRICTED;
					}
					s$2 && N$2(t$1, s$2);
				});
			});
			let c$3 = await Promise.all([i$1.generateRequest(o$3, a$2).catch(() => {
				let u$4 = x$1("Failed to generate a DRM license request. This may be an issue with the player or your protected content."), s$2 = new f(u$4, f.MEDIA_ERR_ENCRYPTED, !0);
				s$2.errorCategory = C.DRM, s$2.muxCode = b$1.ENCRYPTED_GENERATE_REQUEST_FAILED, N$2(t$1, s$2);
			}), new Promise((u$4) => {
				i$1.addEventListener("message", (s$2) => {
					u$4(s$2.message);
				}, { once: !0 });
			})]).then(([, u$4]) => u$4), d$2 = await Ht$1(c$3, q$1(e$1, "fairplay")).catch((u$4) => {
				if (u$4 instanceof Response) {
					let s$2 = H$1(u$4, C.DRM, e$1);
					return console.error("mediaError", s$2 == null ? void 0 : s$2.message, s$2 == null ? void 0 : s$2.context), s$2 ? Promise.reject(s$2) : Promise.reject(/* @__PURE__ */ new Error("Unexpected error in license key request"));
				}
				return Promise.reject(u$4);
			});
			await i$1.update(d$2).catch(() => {
				let u$4 = x$1("Failed to update DRM license. This may be an issue with the player or your protected content."), s$2 = new f(u$4, f.MEDIA_ERR_ENCRYPTED, !0);
				return s$2.errorCategory = C.DRM, s$2.muxCode = b$1.ENCRYPTED_UPDATE_LICENSE_FAILED, Promise.reject(s$2);
			});
		} catch (o$3) {
			N$2(t$1, o$3);
			return;
		}
	});
}, q$1 = ({ playbackId: e$1, tokens: { drm: t$1 } = {}, customDomain: r$3 = I$2 }, n$2) => {
	let o$3 = G$1(e$1);
	return `https://license.${r$3.toLocaleLowerCase().endsWith(I$2) ? r$3 : I$2}/license/${n$2}/${o$3}?token=${t$1}`;
}, Ge = ({ playbackId: e$1, tokens: { drm: t$1 } = {}, customDomain: r$3 = I$2 }, n$2) => {
	let o$3 = G$1(e$1);
	return `https://license.${r$3.toLocaleLowerCase().endsWith(I$2) ? r$3 : I$2}/appcert/${n$2}/${o$3}?token=${t$1}`;
}, Xe = ({ playbackId: e$1, src: t$1, customDomain: r$3 }) => {
	if (e$1) return !0;
	if (typeof t$1 != "string") return !1;
	let n$2 = window == null ? void 0 : window.location.href, o$3 = new URL(t$1, n$2).hostname.toLocaleLowerCase();
	return o$3.includes(I$2) || !!r$3 && o$3.includes(r$3.toLocaleLowerCase());
}, Kt$1 = (e$1, t$1, r$3) => {
	var d$2;
	let { envKey: n$2, disableTracking: o$3, muxDataSDK: a$2 = Ed, muxDataSDKOptions: i$1 = {} } = e$1, c$3 = Xe(e$1);
	if (!o$3 && (n$2 || c$3)) {
		let { playerInitTime: u$4, playerSoftwareName: s$2, playerSoftwareVersion: p$5, beaconCollectionDomain: l$3, debug: T$2, disableCookies: m$5 } = e$1, R = {
			...e$1.metadata,
			video_title: ((d$2 = e$1 == null ? void 0 : e$1.metadata) == null ? void 0 : d$2.video_title) || void 0
		}, M$2 = (h$2) => typeof h$2.player_error_code == "string" ? !1 : typeof e$1.errorTranslator == "function" ? e$1.errorTranslator(h$2) : h$2;
		a$2.monitor(t$1, {
			debug: T$2,
			beaconCollectionDomain: l$3,
			hlsjs: r$3,
			Hls: r$3 ? g$5 : void 0,
			automaticErrorTracking: !1,
			errorTranslator: M$2,
			disableCookies: m$5,
			...i$1,
			data: {
				...n$2 ? { env_key: n$2 } : {},
				player_software_name: s$2,
				player_software: s$2,
				player_software_version: p$5,
				player_init_time: u$4,
				...R
			}
		});
	}
}, Wt$1 = (e$1, t$1, r$3) => {
	var s$2, p$5;
	let n$2 = qe(e$1, t$1), { src: o$3, customDomain: a$2 = I$2 } = e$1, i$1 = () => {
		t$1.ended || e$1.disablePseudoEnded || !At$1(t$1, r$3) || (Je$1(t$1, r$3) ? t$1.currentTime = t$1.buffered.end(t$1.buffered.length - 1) : t$1.dispatchEvent(new Event("ended")));
	}, c$3, d$2, u$4 = () => {
		let l$3 = Be(t$1), T$2, m$5;
		l$3.length > 0 && (T$2 = l$3.start(0), m$5 = l$3.end(0)), (d$2 !== m$5 || c$3 !== T$2) && t$1.dispatchEvent(new CustomEvent("seekablechange", { composed: !0 })), c$3 = T$2, d$2 = m$5;
	};
	if (v$2(t$1, "durationchange", u$4), t$1 && n$2) {
		let l$3 = U$1(e$1);
		if (typeof o$3 == "string") {
			if (o$3.endsWith(".mp4") && o$3.includes(a$2)) {
				let R = $e(o$3), M$2 = new URL(`https://stream.${a$2}/${R}/metadata.json`);
				de$2(M$2.toString(), t$1);
			}
			let T$2 = () => {
				if (we$1(t$1) !== _.LIVE || Number.isFinite(t$1.duration)) return;
				let R = setInterval(u$4, 1e3);
				t$1.addEventListener("teardown", () => {
					clearInterval(R);
				}, { once: !0 }), v$2(t$1, "durationchange", () => {
					Number.isFinite(t$1.duration) && clearInterval(R);
				});
			}, m$5 = async () => xt$1(o$3, t$1, l$3).then(T$2).catch((R) => {
				if (R instanceof Response) {
					let M$2 = H$1(R, C.VIDEO, e$1);
					if (M$2) {
						N$2(t$1, M$2);
						return;
					}
				} else R instanceof Error;
			});
			if (t$1.preload === "none") {
				let R = () => {
					m$5(), t$1.removeEventListener("loadedmetadata", M$2);
				}, M$2 = () => {
					m$5(), t$1.removeEventListener("play", R);
				};
				v$2(t$1, "play", R, { once: !0 }), v$2(t$1, "loadedmetadata", M$2, { once: !0 });
			} else m$5();
			(s$2 = e$1.tokens) != null && s$2.drm ? Vt$1(e$1, t$1) : v$2(t$1, "encrypted", () => {
				let R = x$1("Attempting to play DRM-protected content without providing a DRM token."), M$2 = new f(R, f.MEDIA_ERR_ENCRYPTED, !0);
				M$2.errorCategory = C.DRM, M$2.muxCode = b$1.ENCRYPTED_MISSING_TOKEN, N$2(t$1, M$2);
			}, { once: !0 }), t$1.setAttribute("src", o$3), e$1.startTime && (((p$5 = P$3.get(t$1)) != null ? p$5 : {}).startTime = e$1.startTime, t$1.addEventListener("durationchange", ze$1, { once: !0 }));
		} else t$1.removeAttribute("src");
		t$1.addEventListener("error", Qe), t$1.addEventListener("error", ce$1), t$1.addEventListener("emptied", () => {
			t$1.querySelectorAll("track[data-removeondestroy]").forEach((m$5) => {
				m$5.remove();
			});
		}, { once: !0 }), v$2(t$1, "pause", i$1), v$2(t$1, "seeked", i$1), v$2(t$1, "play", () => {
			t$1.ended || je(t$1.currentTime, t$1.duration) && (t$1.currentTime = t$1.seekable.length ? t$1.seekable.start(0) : 0);
		});
	} else r$3 && o$3 ? (r$3.once(g$5.Events.LEVEL_LOADED, (l$3, T$2) => {
		bt$1(T$2.details, t$1, r$3), u$4(), we$1(t$1) === _.LIVE && !Number.isFinite(t$1.duration) && (r$3.on(g$5.Events.LEVEL_UPDATED, u$4), v$2(t$1, "durationchange", () => {
			Number.isFinite(t$1.duration) && r$3.off(g$5.Events.LEVELS_UPDATED, u$4);
		}));
	}), r$3.on(g$5.Events.ERROR, (l$3, T$2) => {
		var R, M$2;
		let m$5 = Yt(T$2, e$1);
		if (m$5.muxCode === b$1.NETWORK_NOT_READY) {
			let E$3 = (R = P$3.get(t$1)) != null ? R : {}, D$3 = (M$2 = E$3.retryCount) != null ? M$2 : 0;
			if (D$3 < 6) {
				let y$4 = D$3 === 0 ? 5e3 : 6e4, k$1 = new f(`Retrying in ${y$4 / 1e3} seconds...`, m$5.code, m$5.fatal);
				Object.assign(k$1, m$5), N$2(t$1, k$1), setTimeout(() => {
					E$3.retryCount = D$3 + 1, T$2.details === "manifestLoadError" && T$2.url && r$3.loadSource(T$2.url);
				}, y$4);
				return;
			} else {
				E$3.retryCount = 0;
				let y$4 = new f("Try again later or <a href=\"#\" onclick=\"window.location.reload(); return false;\" style=\"color: #4a90e2;\">click here to retry</a>", m$5.code, m$5.fatal);
				Object.assign(y$4, m$5), N$2(t$1, y$4);
				return;
			}
		}
		N$2(t$1, m$5);
	}), r$3.on(g$5.Events.MANIFEST_LOADED, () => {
		let l$3 = P$3.get(t$1);
		l$3 && l$3.error && (l$3.error = null, l$3.retryCount = 0, t$1.dispatchEvent(new Event("emptied")), t$1.dispatchEvent(new Event("loadstart")));
	}), t$1.addEventListener("error", ce$1), v$2(t$1, "waiting", i$1), be(e$1, r$3), De(t$1, r$3), r$3.attachMedia(t$1)) : console.error("It looks like the video you're trying to play will not work on this system! If possible, try upgrading to the newest versions of your browser or software.");
};
function ze$1(e$1) {
	var n$2;
	let t$1 = e$1.target, r$3 = (n$2 = P$3.get(t$1)) == null ? void 0 : n$2.startTime;
	if (r$3 && fe$2(t$1.seekable, t$1.duration, r$3)) {
		let o$3 = t$1.preload === "auto";
		o$3 && (t$1.preload = "none"), t$1.currentTime = r$3, o$3 && (t$1.preload = "auto");
	}
}
async function Qe(e$1) {
	if (!e$1.isTrusted) return;
	e$1.stopImmediatePropagation();
	let t$1 = e$1.target;
	if (!(t$1 != null && t$1.error)) return;
	let { message: r$3, code: n$2 } = t$1.error, o$3 = new f(r$3, n$2);
	if (t$1.src && n$2 === f.MEDIA_ERR_SRC_NOT_SUPPORTED && t$1.readyState === HTMLMediaElement.HAVE_NOTHING) {
		setTimeout(() => {
			var i$1;
			let a$2 = (i$1 = ht(t$1)) != null ? i$1 : t$1.error;
			(a$2 == null ? void 0 : a$2.code) === f.MEDIA_ERR_SRC_NOT_SUPPORTED && N$2(t$1, o$3);
		}, 500);
		return;
	}
	if (t$1.src && (n$2 !== f.MEDIA_ERR_DECODE || n$2 !== void 0)) try {
		let { status: a$2 } = await fetch(t$1.src);
		o$3.data = { response: { code: a$2 } };
	} catch {}
	N$2(t$1, o$3);
}
function N$2(e$1, t$1) {
	var r$3;
	t$1.fatal && (((r$3 = P$3.get(e$1)) != null ? r$3 : {}).error = t$1, e$1.dispatchEvent(new CustomEvent("error", { detail: t$1 })));
}
function ce$1(e$1) {
	var n$2, o$3;
	if (!(e$1 instanceof CustomEvent) || !(e$1.detail instanceof f)) return;
	let t$1 = e$1.target, r$3 = e$1.detail;
	!r$3 || !r$3.fatal || (((n$2 = P$3.get(t$1)) != null ? n$2 : {}).error = r$3, (o$3 = t$1.mux) == null || o$3.emit("error", {
		player_error_code: r$3.code,
		player_error_message: r$3.message,
		player_error_context: r$3.context
	}));
}
var Yt = (e$1, t$1) => {
	var c$3, d$2, u$4;
	console.error("getErrorFromHlsErrorData()", e$1);
	let r$3 = {
		[g$5.ErrorTypes.NETWORK_ERROR]: f.MEDIA_ERR_NETWORK,
		[g$5.ErrorTypes.MEDIA_ERROR]: f.MEDIA_ERR_DECODE,
		[g$5.ErrorTypes.KEY_SYSTEM_ERROR]: f.MEDIA_ERR_ENCRYPTED
	}, n$2 = (s$2) => [g$5.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED, g$5.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED].includes(s$2.details) ? f.MEDIA_ERR_NETWORK : r$3[s$2.type], o$3 = (s$2) => {
		if (s$2.type === g$5.ErrorTypes.KEY_SYSTEM_ERROR) return C.DRM;
		if (s$2.type === g$5.ErrorTypes.NETWORK_ERROR) return C.VIDEO;
	}, a$2, i$1 = n$2(e$1);
	if (i$1 === f.MEDIA_ERR_NETWORK && e$1.response) {
		let s$2 = (c$3 = o$3(e$1)) != null ? c$3 : C.VIDEO;
		a$2 = (d$2 = H$1(e$1.response, s$2, t$1, e$1.fatal)) != null ? d$2 : new f("", i$1, e$1.fatal);
	} else if (i$1 === f.MEDIA_ERR_ENCRYPTED) if (e$1.details === g$5.ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE) {
		let s$2 = x$1("Attempting to play DRM-protected content without providing a DRM token.");
		a$2 = new f(s$2, f.MEDIA_ERR_ENCRYPTED, e$1.fatal), a$2.errorCategory = C.DRM, a$2.muxCode = b$1.ENCRYPTED_MISSING_TOKEN;
	} else if (e$1.details === g$5.ErrorDetails.KEY_SYSTEM_NO_ACCESS) {
		let s$2 = x$1("Cannot play DRM-protected content with current security configuration on this browser. Try playing in another browser.");
		a$2 = new f(s$2, f.MEDIA_ERR_ENCRYPTED, e$1.fatal), a$2.errorCategory = C.DRM, a$2.muxCode = b$1.ENCRYPTED_UNSUPPORTED_KEY_SYSTEM;
	} else if (e$1.details === g$5.ErrorDetails.KEY_SYSTEM_NO_SESSION) {
		let s$2 = x$1("Failed to generate a DRM license request. This may be an issue with the player or your protected content.");
		a$2 = new f(s$2, f.MEDIA_ERR_ENCRYPTED, !0), a$2.errorCategory = C.DRM, a$2.muxCode = b$1.ENCRYPTED_GENERATE_REQUEST_FAILED;
	} else if (e$1.details === g$5.ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED) {
		let s$2 = x$1("Failed to update DRM license. This may be an issue with the player or your protected content.");
		a$2 = new f(s$2, f.MEDIA_ERR_ENCRYPTED, e$1.fatal), a$2.errorCategory = C.DRM, a$2.muxCode = b$1.ENCRYPTED_UPDATE_LICENSE_FAILED;
	} else if (e$1.details === g$5.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED) {
		let s$2 = x$1("Your server certificate failed when attempting to set it. This may be an issue with a no longer valid certificate.");
		a$2 = new f(s$2, f.MEDIA_ERR_ENCRYPTED, e$1.fatal), a$2.errorCategory = C.DRM, a$2.muxCode = b$1.ENCRYPTED_UPDATE_SERVER_CERT_FAILED;
	} else if (e$1.details === g$5.ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR) {
		let s$2 = x$1("The DRM Content Decryption Module system had an internal failure. Try reloading the page, upading your browser, or playing in another browser.");
		a$2 = new f(s$2, f.MEDIA_ERR_ENCRYPTED, e$1.fatal), a$2.errorCategory = C.DRM, a$2.muxCode = b$1.ENCRYPTED_CDM_ERROR;
	} else if (e$1.details === g$5.ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED) {
		let s$2 = x$1("DRM playback is being attempted in an environment that is not sufficiently secure. User may see black screen.");
		a$2 = new f(s$2, f.MEDIA_ERR_ENCRYPTED, !1), a$2.errorCategory = C.DRM, a$2.muxCode = b$1.ENCRYPTED_OUTPUT_RESTRICTED;
	} else a$2 = new f(e$1.error.message, f.MEDIA_ERR_ENCRYPTED, e$1.fatal), a$2.errorCategory = C.DRM, a$2.muxCode = b$1.ENCRYPTED_ERROR;
	else a$2 = new f("", i$1, e$1.fatal);
	return a$2.context || (a$2.context = `${e$1.url ? `url: ${e$1.url}
` : ""}${e$1.response && (e$1.response.code || e$1.response.text) ? `response: ${e$1.response.code}, ${e$1.response.text}
` : ""}${e$1.reason ? `failure reason: ${e$1.reason}
` : ""}${e$1.level ? `level: ${e$1.level}
` : ""}${e$1.parent ? `parent stream controller: ${e$1.parent}
` : ""}${e$1.buffer ? `buffer length: ${e$1.buffer}
` : ""}${e$1.error ? `error: ${e$1.error}
` : ""}${e$1.event ? `event: ${e$1.event}
` : ""}${e$1.err ? `error message: ${(u$4 = e$1.err) == null ? void 0 : u$4.message}
` : ""}`), a$2.data = e$1, a$2;
};

//#endregion
//#region node_modules/@mux/mux-video/dist/base.mjs
var C$3 = (s$2) => {
	throw TypeError(s$2);
};
var N$1 = (s$2, a$2, t$1) => a$2.has(s$2) || C$3("Cannot " + t$1);
var n$1 = (s$2, a$2, t$1) => (N$1(s$2, a$2, "read from private field"), t$1 ? t$1.call(s$2) : a$2.get(s$2)), u$3 = (s$2, a$2, t$1) => a$2.has(s$2) ? C$3("Cannot add the same private member more than once") : a$2 instanceof WeakSet ? a$2.add(s$2) : a$2.set(s$2, t$1), o$2 = (s$2, a$2, t$1, i$1) => (N$1(s$2, a$2, "write to private field"), i$1 ? i$1.call(s$2, t$1) : a$2.set(s$2, t$1), t$1), I$1 = (s$2, a$2, t$1) => (N$1(s$2, a$2, "access private method"), t$1);
var B$2 = () => {
	try {
		return "0.27.0";
	} catch {}
	return "UNKNOWN";
}, Y$1 = B$2(), P$2 = () => Y$1;
var D$1 = `
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" part="logo" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2" viewBox="0 0 1600 500"><g fill="#fff"><path d="M994.287 93.486c-17.121 0-31-13.879-31-31 0-17.121 13.879-31 31-31 17.121 0 31 13.879 31 31 0 17.121-13.879 31-31 31m0-93.486c-34.509 0-62.484 27.976-62.484 62.486v187.511c0 68.943-56.09 125.033-125.032 125.033s-125.03-56.09-125.03-125.033V62.486C681.741 27.976 653.765 0 619.256 0s-62.484 27.976-62.484 62.486v187.511C556.772 387.85 668.921 500 806.771 500c137.851 0 250.001-112.15 250.001-250.003V62.486c0-34.51-27.976-62.486-62.485-62.486M1537.51 468.511c-17.121 0-31-13.879-31-31 0-17.121 13.879-31 31-31 17.121 0 31 13.879 31 31 0 17.121-13.879 31-31 31m-275.883-218.509-143.33 143.329c-24.402 24.402-24.402 63.966 0 88.368 24.402 24.402 63.967 24.402 88.369 0l143.33-143.329 143.328 143.329c24.402 24.4 63.967 24.402 88.369 0 24.403-24.402 24.403-63.966.001-88.368l-143.33-143.329.001-.004 143.329-143.329c24.402-24.402 24.402-63.965 0-88.367s-63.967-24.402-88.369 0L1349.996 161.63 1206.667 18.302c-24.402-24.401-63.967-24.402-88.369 0s-24.402 63.965 0 88.367l143.329 143.329v.004ZM437.511 468.521c-17.121 0-31-13.879-31-31 0-17.121 13.879-31 31-31 17.121 0 31 13.879 31 31 0 17.121-13.879 31-31 31M461.426 4.759C438.078-4.913 411.2.432 393.33 18.303L249.999 161.632 106.669 18.303C88.798.432 61.922-4.913 38.573 4.759 15.224 14.43-.001 37.214-.001 62.488v375.026c0 34.51 27.977 62.486 62.487 62.486 34.51 0 62.486-27.976 62.486-62.486V213.341l80.843 80.844c24.404 24.402 63.965 24.402 88.369 0l80.843-80.844v224.173c0 34.51 27.976 62.486 62.486 62.486s62.486-27.976 62.486-62.486V62.488c0-25.274-15.224-48.058-38.573-57.729" style="fill-rule:nonzero"/></g></svg>`;
var e = {
	BEACON_COLLECTION_DOMAIN: "beacon-collection-domain",
	CUSTOM_DOMAIN: "custom-domain",
	DEBUG: "debug",
	DISABLE_TRACKING: "disable-tracking",
	DISABLE_COOKIES: "disable-cookies",
	DISABLE_PSEUDO_ENDED: "disable-pseudo-ended",
	DRM_TOKEN: "drm-token",
	PLAYBACK_TOKEN: "playback-token",
	ENV_KEY: "env-key",
	MAX_RESOLUTION: "max-resolution",
	MIN_RESOLUTION: "min-resolution",
	RENDITION_ORDER: "rendition-order",
	PROGRAM_START_TIME: "program-start-time",
	PROGRAM_END_TIME: "program-end-time",
	ASSET_START_TIME: "asset-start-time",
	ASSET_END_TIME: "asset-end-time",
	METADATA_URL: "metadata-url",
	PLAYBACK_ID: "playback-id",
	PLAYER_SOFTWARE_NAME: "player-software-name",
	PLAYER_SOFTWARE_VERSION: "player-software-version",
	PLAYER_INIT_TIME: "player-init-time",
	PREFER_CMCD: "prefer-cmcd",
	PREFER_PLAYBACK: "prefer-playback",
	START_TIME: "start-time",
	STREAM_TYPE: "stream-type",
	TARGET_LIVE_WINDOW: "target-live-window",
	LIVE_EDGE_OFFSET: "live-edge-offset",
	TYPE: "type",
	LOGO: "logo"
}, at$1 = Object.values(e), v$1 = P$2(), x$4 = "mux-video", l$1, f$4, b$3, A, c$2, T$1, _$1, p$4, O, g$4, m$4, y$3, K = class extends CustomVideoElement {
	constructor() {
		super();
		u$3(this, m$4);
		u$3(this, l$1);
		u$3(this, f$4);
		u$3(this, b$3);
		u$3(this, A, {});
		u$3(this, c$2, {});
		u$3(this, T$1);
		u$3(this, _$1);
		u$3(this, p$4);
		u$3(this, O);
		u$3(this, g$4, "");
		o$2(this, b$3, Wr()), this.nativeEl.addEventListener("muxmetadata", (t$1) => {
			var d$2;
			let i$1 = Fr(this.nativeEl), r$3 = (d$2 = this.metadata) != null ? d$2 : {};
			this.metadata = {
				...i$1,
				...r$3
			}, (i$1 == null ? void 0 : i$1["com.mux.video.branding"]) === "mux-free-plan" && (o$2(this, g$4, "default"), this.updateLogo());
		});
	}
	static get NAME() {
		return x$4;
	}
	static get VERSION() {
		return v$1;
	}
	static get observedAttributes() {
		var t$1;
		return [...at$1, ...(t$1 = CustomVideoElement.observedAttributes) != null ? t$1 : []];
	}
	static getLogoHTML(t$1) {
		return !t$1 || t$1 === "false" ? "" : t$1 === "default" ? D$1 : `<img part="logo" src="${t$1}" />`;
	}
	static getTemplateHTML(t$1 = {}) {
		var i$1;
		return `
      ${CustomVideoElement.getTemplateHTML(t$1)}
      <style>
        :host {
          position: relative;
        }
        slot[name="logo"] {
          display: flex;
          justify-content: end;
          position: absolute;
          top: 1rem;
          right: 1rem;
          opacity: 0;
          transition: opacity 0.25s ease-in-out;
          z-index: 1;
        }
        slot[name="logo"]:has([part="logo"]) {
          opacity: 1;
        }
        slot[name="logo"] [part="logo"] {
          width: 5rem;
          pointer-events: none;
          user-select: none;
        }
      </style>
      <slot name="logo">
        ${this.getLogoHTML((i$1 = t$1[e.LOGO]) != null ? i$1 : "")}
      </slot>
    `;
	}
	get preferCmcd() {
		var t$1;
		return (t$1 = this.getAttribute(e.PREFER_CMCD)) != null ? t$1 : void 0;
	}
	set preferCmcd(t$1) {
		t$1 !== this.preferCmcd && (t$1 ? jt.includes(t$1) ? this.setAttribute(e.PREFER_CMCD, t$1) : console.warn(`Invalid value for preferCmcd. Must be one of ${jt.join()}`) : this.removeAttribute(e.PREFER_CMCD));
	}
	get playerInitTime() {
		return this.hasAttribute(e.PLAYER_INIT_TIME) ? +this.getAttribute(e.PLAYER_INIT_TIME) : n$1(this, b$3);
	}
	set playerInitTime(t$1) {
		t$1 != this.playerInitTime && (t$1 == null ? this.removeAttribute(e.PLAYER_INIT_TIME) : this.setAttribute(e.PLAYER_INIT_TIME, `${+t$1}`));
	}
	get playerSoftwareName() {
		var t$1;
		return (t$1 = n$1(this, p$4)) != null ? t$1 : x$4;
	}
	set playerSoftwareName(t$1) {
		o$2(this, p$4, t$1);
	}
	get playerSoftwareVersion() {
		var t$1;
		return (t$1 = n$1(this, _$1)) != null ? t$1 : v$1;
	}
	set playerSoftwareVersion(t$1) {
		o$2(this, _$1, t$1);
	}
	get _hls() {
		var t$1;
		return (t$1 = n$1(this, l$1)) == null ? void 0 : t$1.engine;
	}
	get mux() {
		var t$1;
		return (t$1 = this.nativeEl) == null ? void 0 : t$1.mux;
	}
	get error() {
		var t$1;
		return (t$1 = ht(this.nativeEl)) != null ? t$1 : null;
	}
	get errorTranslator() {
		return n$1(this, O);
	}
	set errorTranslator(t$1) {
		o$2(this, O, t$1);
	}
	get src() {
		return this.getAttribute("src");
	}
	set src(t$1) {
		t$1 !== this.src && (t$1 == null ? this.removeAttribute("src") : this.setAttribute("src", t$1));
	}
	get type() {
		var t$1;
		return (t$1 = this.getAttribute(e.TYPE)) != null ? t$1 : void 0;
	}
	set type(t$1) {
		t$1 !== this.type && (t$1 ? this.setAttribute(e.TYPE, t$1) : this.removeAttribute(e.TYPE));
	}
	get preload() {
		let t$1 = this.getAttribute("preload");
		return t$1 === "" ? "auto" : [
			"none",
			"metadata",
			"auto"
		].includes(t$1) ? t$1 : super.preload;
	}
	set preload(t$1) {
		t$1 != this.getAttribute("preload") && ([
			"",
			"none",
			"metadata",
			"auto"
		].includes(t$1) ? this.setAttribute("preload", t$1) : this.removeAttribute("preload"));
	}
	get debug() {
		return this.getAttribute(e.DEBUG) != null;
	}
	set debug(t$1) {
		t$1 !== this.debug && (t$1 ? this.setAttribute(e.DEBUG, "") : this.removeAttribute(e.DEBUG));
	}
	get disableTracking() {
		return this.hasAttribute(e.DISABLE_TRACKING);
	}
	set disableTracking(t$1) {
		t$1 !== this.disableTracking && this.toggleAttribute(e.DISABLE_TRACKING, !!t$1);
	}
	get disableCookies() {
		return this.hasAttribute(e.DISABLE_COOKIES);
	}
	set disableCookies(t$1) {
		t$1 !== this.disableCookies && (t$1 ? this.setAttribute(e.DISABLE_COOKIES, "") : this.removeAttribute(e.DISABLE_COOKIES));
	}
	get disablePseudoEnded() {
		return this.hasAttribute(e.DISABLE_PSEUDO_ENDED);
	}
	set disablePseudoEnded(t$1) {
		t$1 !== this.disablePseudoEnded && (t$1 ? this.setAttribute(e.DISABLE_PSEUDO_ENDED, "") : this.removeAttribute(e.DISABLE_PSEUDO_ENDED));
	}
	get startTime() {
		let t$1 = this.getAttribute(e.START_TIME);
		if (t$1 == null) return;
		let i$1 = +t$1;
		return Number.isNaN(i$1) ? void 0 : i$1;
	}
	set startTime(t$1) {
		t$1 !== this.startTime && (t$1 == null ? this.removeAttribute(e.START_TIME) : this.setAttribute(e.START_TIME, `${t$1}`));
	}
	get playbackId() {
		var t$1;
		return this.hasAttribute(e.PLAYBACK_ID) ? this.getAttribute(e.PLAYBACK_ID) : (t$1 = $e(this.src)) != null ? t$1 : void 0;
	}
	set playbackId(t$1) {
		t$1 !== this.playbackId && (t$1 ? this.setAttribute(e.PLAYBACK_ID, t$1) : this.removeAttribute(e.PLAYBACK_ID));
	}
	get maxResolution() {
		var t$1;
		return (t$1 = this.getAttribute(e.MAX_RESOLUTION)) != null ? t$1 : void 0;
	}
	set maxResolution(t$1) {
		t$1 !== this.maxResolution && (t$1 ? this.setAttribute(e.MAX_RESOLUTION, t$1) : this.removeAttribute(e.MAX_RESOLUTION));
	}
	get minResolution() {
		var t$1;
		return (t$1 = this.getAttribute(e.MIN_RESOLUTION)) != null ? t$1 : void 0;
	}
	set minResolution(t$1) {
		t$1 !== this.minResolution && (t$1 ? this.setAttribute(e.MIN_RESOLUTION, t$1) : this.removeAttribute(e.MIN_RESOLUTION));
	}
	get renditionOrder() {
		var t$1;
		return (t$1 = this.getAttribute(e.RENDITION_ORDER)) != null ? t$1 : void 0;
	}
	set renditionOrder(t$1) {
		t$1 !== this.renditionOrder && (t$1 ? this.setAttribute(e.RENDITION_ORDER, t$1) : this.removeAttribute(e.RENDITION_ORDER));
	}
	get programStartTime() {
		let t$1 = this.getAttribute(e.PROGRAM_START_TIME);
		if (t$1 == null) return;
		let i$1 = +t$1;
		return Number.isNaN(i$1) ? void 0 : i$1;
	}
	set programStartTime(t$1) {
		t$1 == null ? this.removeAttribute(e.PROGRAM_START_TIME) : this.setAttribute(e.PROGRAM_START_TIME, `${t$1}`);
	}
	get programEndTime() {
		let t$1 = this.getAttribute(e.PROGRAM_END_TIME);
		if (t$1 == null) return;
		let i$1 = +t$1;
		return Number.isNaN(i$1) ? void 0 : i$1;
	}
	set programEndTime(t$1) {
		t$1 == null ? this.removeAttribute(e.PROGRAM_END_TIME) : this.setAttribute(e.PROGRAM_END_TIME, `${t$1}`);
	}
	get assetStartTime() {
		let t$1 = this.getAttribute(e.ASSET_START_TIME);
		if (t$1 == null) return;
		let i$1 = +t$1;
		return Number.isNaN(i$1) ? void 0 : i$1;
	}
	set assetStartTime(t$1) {
		t$1 == null ? this.removeAttribute(e.ASSET_START_TIME) : this.setAttribute(e.ASSET_START_TIME, `${t$1}`);
	}
	get assetEndTime() {
		let t$1 = this.getAttribute(e.ASSET_END_TIME);
		if (t$1 == null) return;
		let i$1 = +t$1;
		return Number.isNaN(i$1) ? void 0 : i$1;
	}
	set assetEndTime(t$1) {
		t$1 == null ? this.removeAttribute(e.ASSET_END_TIME) : this.setAttribute(e.ASSET_END_TIME, `${t$1}`);
	}
	get customDomain() {
		var t$1;
		return (t$1 = this.getAttribute(e.CUSTOM_DOMAIN)) != null ? t$1 : void 0;
	}
	set customDomain(t$1) {
		t$1 !== this.customDomain && (t$1 ? this.setAttribute(e.CUSTOM_DOMAIN, t$1) : this.removeAttribute(e.CUSTOM_DOMAIN));
	}
	get drmToken() {
		var t$1;
		return (t$1 = this.getAttribute(e.DRM_TOKEN)) != null ? t$1 : void 0;
	}
	set drmToken(t$1) {
		t$1 !== this.drmToken && (t$1 ? this.setAttribute(e.DRM_TOKEN, t$1) : this.removeAttribute(e.DRM_TOKEN));
	}
	get playbackToken() {
		var t$1, i$1, r$3, d$2;
		if (this.hasAttribute(e.PLAYBACK_TOKEN)) return (t$1 = this.getAttribute(e.PLAYBACK_TOKEN)) != null ? t$1 : void 0;
		if (this.hasAttribute(e.PLAYBACK_ID)) {
			let [, h$2] = F((i$1 = this.playbackId) != null ? i$1 : "");
			return (r$3 = new URLSearchParams(h$2).get("token")) != null ? r$3 : void 0;
		}
		if (this.src) return (d$2 = new URLSearchParams(this.src).get("token")) != null ? d$2 : void 0;
	}
	set playbackToken(t$1) {
		t$1 !== this.playbackToken && (t$1 ? this.setAttribute(e.PLAYBACK_TOKEN, t$1) : this.removeAttribute(e.PLAYBACK_TOKEN));
	}
	get tokens() {
		let t$1 = this.getAttribute(e.PLAYBACK_TOKEN), i$1 = this.getAttribute(e.DRM_TOKEN);
		return {
			...n$1(this, c$2),
			...t$1 != null ? { playback: t$1 } : {},
			...i$1 != null ? { drm: i$1 } : {}
		};
	}
	set tokens(t$1) {
		o$2(this, c$2, t$1 != null ? t$1 : {});
	}
	get ended() {
		return At$1(this.nativeEl, this._hls);
	}
	get envKey() {
		var t$1;
		return (t$1 = this.getAttribute(e.ENV_KEY)) != null ? t$1 : void 0;
	}
	set envKey(t$1) {
		t$1 !== this.envKey && (t$1 ? this.setAttribute(e.ENV_KEY, t$1) : this.removeAttribute(e.ENV_KEY));
	}
	get beaconCollectionDomain() {
		var t$1;
		return (t$1 = this.getAttribute(e.BEACON_COLLECTION_DOMAIN)) != null ? t$1 : void 0;
	}
	set beaconCollectionDomain(t$1) {
		t$1 !== this.beaconCollectionDomain && (t$1 ? this.setAttribute(e.BEACON_COLLECTION_DOMAIN, t$1) : this.removeAttribute(e.BEACON_COLLECTION_DOMAIN));
	}
	get streamType() {
		var t$1;
		return (t$1 = this.getAttribute(e.STREAM_TYPE)) != null ? t$1 : we$1(this.nativeEl);
	}
	set streamType(t$1) {
		t$1 !== this.streamType && (t$1 ? this.setAttribute(e.STREAM_TYPE, t$1) : this.removeAttribute(e.STREAM_TYPE));
	}
	get targetLiveWindow() {
		return this.hasAttribute(e.TARGET_LIVE_WINDOW) ? +this.getAttribute(e.TARGET_LIVE_WINDOW) : $r(this.nativeEl);
	}
	set targetLiveWindow(t$1) {
		t$1 != this.targetLiveWindow && (t$1 == null ? this.removeAttribute(e.TARGET_LIVE_WINDOW) : this.setAttribute(e.TARGET_LIVE_WINDOW, `${+t$1}`));
	}
	get liveEdgeStart() {
		var t$1, i$1;
		if (this.hasAttribute(e.LIVE_EDGE_OFFSET)) {
			let { liveEdgeOffset: r$3 } = this, d$2 = (t$1 = this.nativeEl.seekable.end(0)) != null ? t$1 : 0, h$2 = (i$1 = this.nativeEl.seekable.start(0)) != null ? i$1 : 0;
			return Math.max(h$2, d$2 - r$3);
		}
		return Br(this.nativeEl);
	}
	get liveEdgeOffset() {
		if (this.hasAttribute(e.LIVE_EDGE_OFFSET)) return +this.getAttribute(e.LIVE_EDGE_OFFSET);
	}
	set liveEdgeOffset(t$1) {
		t$1 != this.liveEdgeOffset && (t$1 == null ? this.removeAttribute(e.LIVE_EDGE_OFFSET) : this.setAttribute(e.LIVE_EDGE_OFFSET, `${+t$1}`));
	}
	get seekable() {
		return Be(this.nativeEl);
	}
	async addCuePoints(t$1) {
		return Pe$1(this.nativeEl, t$1);
	}
	get activeCuePoint() {
		return _e$1(this.nativeEl);
	}
	get cuePoints() {
		return it(this.nativeEl);
	}
	async addChapters(t$1) {
		return Le(this.nativeEl, t$1);
	}
	get activeChapter() {
		return Ne$1(this.nativeEl);
	}
	get chapters() {
		return ct$1(this.nativeEl);
	}
	getStartDate() {
		return ut$1(this.nativeEl, this._hls);
	}
	get currentPdt() {
		return dt$1(this.nativeEl, this._hls);
	}
	get preferPlayback() {
		let t$1 = this.getAttribute(e.PREFER_PLAYBACK);
		if (t$1 === X$1.MSE || t$1 === X$1.NATIVE) return t$1;
	}
	set preferPlayback(t$1) {
		t$1 !== this.preferPlayback && (t$1 === X$1.MSE || t$1 === X$1.NATIVE ? this.setAttribute(e.PREFER_PLAYBACK, t$1) : this.removeAttribute(e.PREFER_PLAYBACK));
	}
	get metadata() {
		return {
			...this.getAttributeNames().filter((i$1) => i$1.startsWith("metadata-") && ![e.METADATA_URL].includes(i$1)).reduce((i$1, r$3) => {
				let d$2 = this.getAttribute(r$3);
				return d$2 != null && (i$1[r$3.replace(/^metadata-/, "").replace(/-/g, "_")] = d$2), i$1;
			}, {}),
			...n$1(this, A)
		};
	}
	set metadata(t$1) {
		o$2(this, A, t$1 != null ? t$1 : {}), this.mux && this.mux.emit("hb", n$1(this, A));
	}
	get _hlsConfig() {
		return n$1(this, T$1);
	}
	set _hlsConfig(t$1) {
		o$2(this, T$1, t$1);
	}
	get logo() {
		var t$1;
		return (t$1 = this.getAttribute(e.LOGO)) != null ? t$1 : n$1(this, g$4);
	}
	set logo(t$1) {
		t$1 ? this.setAttribute(e.LOGO, t$1) : this.removeAttribute(e.LOGO);
	}
	load() {
		o$2(this, l$1, jr(this, this.nativeEl, n$1(this, l$1)));
	}
	unload() {
		It$1(this.nativeEl, n$1(this, l$1), this), o$2(this, l$1, void 0);
	}
	attributeChangedCallback(t$1, i$1, r$3) {
		var h$2, L$2;
		switch (CustomVideoElement.observedAttributes.includes(t$1) && ![
			"src",
			"autoplay",
			"preload"
		].includes(t$1) && super.attributeChangedCallback(t$1, i$1, r$3), t$1) {
			case e.PLAYER_SOFTWARE_NAME:
				this.playerSoftwareName = r$3 != null ? r$3 : void 0;
				break;
			case e.PLAYER_SOFTWARE_VERSION:
				this.playerSoftwareVersion = r$3 != null ? r$3 : void 0;
				break;
			case "src": {
				let E$3 = !!i$1, S$1 = !!r$3;
				!E$3 && S$1 ? I$1(this, m$4, y$3).call(this) : E$3 && !S$1 ? this.unload() : E$3 && S$1 && (this.unload(), I$1(this, m$4, y$3).call(this));
				break;
			}
			case "autoplay":
				if (r$3 === i$1) break;
				(h$2 = n$1(this, l$1)) == null || h$2.setAutoplay(this.autoplay);
				break;
			case "preload":
				if (r$3 === i$1) break;
				(L$2 = n$1(this, l$1)) == null || L$2.setPreload(r$3);
				break;
			case e.PLAYBACK_ID:
				this.src = Yr(this);
				break;
			case e.DEBUG: {
				let E$3 = this.debug;
				this.mux && console.info("Cannot toggle debug mode of mux data after initialization. Make sure you set all metadata to override before setting the src."), this._hls && (this._hls.config.debug = E$3);
				break;
			}
			case e.METADATA_URL:
				r$3 && fetch(r$3).then((E$3) => E$3.json()).then((E$3) => this.metadata = E$3).catch(() => console.error(`Unable to load or parse metadata JSON from metadata-url ${r$3}!`));
				break;
			case e.STREAM_TYPE:
				(r$3 == null || r$3 !== i$1) && this.dispatchEvent(new CustomEvent("streamtypechange", {
					composed: !0,
					bubbles: !0
				}));
				break;
			case e.TARGET_LIVE_WINDOW:
				(r$3 == null || r$3 !== i$1) && this.dispatchEvent(new CustomEvent("targetlivewindowchange", {
					composed: !0,
					bubbles: !0,
					detail: this.targetLiveWindow
				}));
				break;
			case e.LOGO:
				(r$3 == null || r$3 !== i$1) && this.updateLogo();
				break;
		}
	}
	updateLogo() {
		if (!this.shadowRoot) return;
		let t$1 = this.shadowRoot.querySelector("slot[name=\"logo\"]");
		if (!t$1) return;
		t$1.innerHTML = this.constructor.getLogoHTML(n$1(this, g$4) || this.logo);
	}
	connectedCallback() {
		var t$1;
		(t$1 = super.connectedCallback) == null || t$1.call(this), this.nativeEl && this.src && !n$1(this, l$1) && I$1(this, m$4, y$3).call(this);
	}
	disconnectedCallback() {
		this.unload();
	}
	handleEvent(t$1) {
		t$1.target === this.nativeEl && this.dispatchEvent(new CustomEvent(t$1.type, {
			composed: !0,
			detail: t$1.detail
		}));
	}
};
l$1 = /* @__PURE__ */ new WeakMap(), f$4 = /* @__PURE__ */ new WeakMap(), b$3 = /* @__PURE__ */ new WeakMap(), A = /* @__PURE__ */ new WeakMap(), c$2 = /* @__PURE__ */ new WeakMap(), T$1 = /* @__PURE__ */ new WeakMap(), _$1 = /* @__PURE__ */ new WeakMap(), p$4 = /* @__PURE__ */ new WeakMap(), O = /* @__PURE__ */ new WeakMap(), g$4 = /* @__PURE__ */ new WeakMap(), m$4 = /* @__PURE__ */ new WeakSet(), y$3 = async function() {
	n$1(this, f$4) || (await o$2(this, f$4, Promise.resolve()), o$2(this, f$4, null), this.load());
};

//#endregion
//#region node_modules/castable-video/castable-utils.js
const privateProps = /* @__PURE__ */ new WeakMap();
var InvalidStateError = class extends Error {};
var NotSupportedError = class extends Error {};
var HLS_RESPONSE_HEADERS = [
	"application/x-mpegURL",
	"application/vnd.apple.mpegurl",
	"audio/mpegurl"
];
const IterableWeakSet = globalThis.WeakRef ? class extends Set {
	add(el) {
		super.add(new WeakRef(el));
	}
	forEach(fn) {
		super.forEach((ref) => {
			const value = ref.deref();
			if (value) fn(value);
		});
	}
} : Set;
function onCastApiAvailable(callback) {
	if (!globalThis.chrome?.cast?.isAvailable) globalThis.__onGCastApiAvailable = () => {
		customElements.whenDefined("google-cast-button").then(callback);
	};
	else if (!globalThis.cast?.framework) customElements.whenDefined("google-cast-button").then(callback);
	else callback();
}
function requiresCastFramework() {
	return globalThis.chrome;
}
function loadCastFramework() {
	const sdkUrl = "https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1";
	if (globalThis.chrome?.cast || document.querySelector(`script[src="${sdkUrl}"]`)) return;
	const script = document.createElement("script");
	script.src = sdkUrl;
	document.head.append(script);
}
function castContext() {
	return globalThis.cast?.framework?.CastContext.getInstance();
}
function currentSession() {
	return castContext()?.getCurrentSession();
}
function currentMedia() {
	return currentSession()?.getSessionObj().media[0];
}
function editTracksInfo(request$1) {
	return new Promise((resolve, reject) => {
		currentMedia().editTracksInfo(request$1, resolve, reject);
	});
}
function getMediaStatus(request$1) {
	return new Promise((resolve, reject) => {
		currentMedia().getStatus(request$1, resolve, reject);
	});
}
function setCastOptions(options) {
	return castContext().setOptions({
		...getDefaultCastOptions(),
		...options
	});
}
function getDefaultCastOptions() {
	return {
		receiverApplicationId: "CC1AD845",
		autoJoinPolicy: "origin_scoped",
		androidReceiverCompatible: false,
		language: "en-US",
		resumeSavedSession: true
	};
}
function getFormat(segment) {
	if (!segment) return void 0;
	const match = segment.match(/\.([a-zA-Z0-9]+)(?:\?.*)?$/);
	return match ? match[1] : null;
}
function parsePlaylistUrls(playlistContent) {
	const lines = playlistContent.split("\n");
	const urls = [];
	for (let i$1 = 0; i$1 < lines.length; i$1++) if (lines[i$1].trim().startsWith("#EXT-X-STREAM-INF")) {
		const nextLine = lines[i$1 + 1] ? lines[i$1 + 1].trim() : "";
		if (nextLine && !nextLine.startsWith("#")) urls.push(nextLine);
	}
	return urls;
}
function parseSegment(playlistContent) {
	return playlistContent.split("\n").find((line) => !line.trim().startsWith("#") && line.trim() !== "");
}
async function isHls(url) {
	try {
		const contentType = (await fetch(url, { method: "HEAD" })).headers.get("Content-Type");
		return HLS_RESPONSE_HEADERS.some((header) => contentType === header);
	} catch (err) {
		console.error("Error while trying to get the Content-Type of the manifest", err);
		return false;
	}
}
async function getPlaylistSegmentFormat(url) {
	try {
		const mainManifestContent = await (await fetch(url)).text();
		let availableChunksContent = mainManifestContent;
		const playlists = parsePlaylistUrls(mainManifestContent);
		if (playlists.length > 0) {
			const chosenPlaylistUrl = new URL(playlists[0], url).toString();
			availableChunksContent = await (await fetch(chosenPlaylistUrl)).text();
		}
		const segment = parseSegment(availableChunksContent);
		return getFormat(segment);
	} catch (err) {
		console.error("Error while trying to parse the manifest playlist", err);
		return;
	}
}

//#endregion
//#region node_modules/castable-video/castable-remote-playback.js
var remoteInstances = new IterableWeakSet();
var castElementRef = /* @__PURE__ */ new WeakSet();
var cf;
onCastApiAvailable(() => {
	if (!globalThis.chrome?.cast?.isAvailable) {
		console.debug("chrome.cast.isAvailable", globalThis.chrome?.cast?.isAvailable);
		return;
	}
	if (!cf) {
		cf = cast.framework;
		castContext().addEventListener(cf.CastContextEventType.CAST_STATE_CHANGED, (e$1) => {
			remoteInstances.forEach((r$3) => privateProps.get(r$3).onCastStateChanged?.(e$1));
		});
		castContext().addEventListener(cf.CastContextEventType.SESSION_STATE_CHANGED, (e$1) => {
			remoteInstances.forEach((r$3) => privateProps.get(r$3).onSessionStateChanged?.(e$1));
		});
		remoteInstances.forEach((r$3) => privateProps.get(r$3).init?.());
	}
});
var remotePlaybackCallbackIdCount = 0;
/**
* Remote Playback shim for the Google cast SDK.
* https://w3c.github.io/remote-playback/
*/
var RemotePlayback = class extends EventTarget {
	#media;
	#isInit;
	#remotePlayer;
	#remoteListeners;
	#state = "disconnected";
	#available = false;
	#callbacks = /* @__PURE__ */ new Set();
	#callbackIds = /* @__PURE__ */ new WeakMap();
	constructor(media) {
		super();
		this.#media = media;
		remoteInstances.add(this);
		privateProps.set(this, {
			init: () => this.#init(),
			onCastStateChanged: () => this.#onCastStateChanged(),
			onSessionStateChanged: () => this.#onSessionStateChanged(),
			getCastPlayer: () => this.#castPlayer
		});
		this.#init();
	}
	get #castPlayer() {
		if (castElementRef.has(this.#media)) return this.#remotePlayer;
	}
	/**
	* https://developer.mozilla.org/en-US/docs/Web/API/RemotePlayback/state
	* @return {'disconnected'|'connecting'|'connected'}
	*/
	get state() {
		return this.#state;
	}
	async watchAvailability(callback) {
		if (this.#media.disableRemotePlayback) throw new InvalidStateError("disableRemotePlayback attribute is present.");
		this.#callbackIds.set(callback, ++remotePlaybackCallbackIdCount);
		this.#callbacks.add(callback);
		queueMicrotask(() => callback(this.#hasDevicesAvailable()));
		return remotePlaybackCallbackIdCount;
	}
	async cancelWatchAvailability(callback) {
		if (this.#media.disableRemotePlayback) throw new InvalidStateError("disableRemotePlayback attribute is present.");
		if (callback) this.#callbacks.delete(callback);
		else this.#callbacks.clear();
	}
	async prompt() {
		if (this.#media.disableRemotePlayback) throw new InvalidStateError("disableRemotePlayback attribute is present.");
		if (!globalThis.chrome?.cast?.isAvailable) throw new NotSupportedError("The RemotePlayback API is disabled on this platform.");
		const willDisconnect = castElementRef.has(this.#media);
		castElementRef.add(this.#media);
		setCastOptions(this.#media.castOptions);
		Object.entries(this.#remoteListeners).forEach(([event, listener]) => {
			this.#remotePlayer.controller.addEventListener(event, listener);
		});
		try {
			await castContext().requestSession();
		} catch (err) {
			if (!willDisconnect) castElementRef.delete(this.#media);
			if (err === "cancel") return;
			throw new Error(err);
		}
		privateProps.get(this.#media)?.loadOnPrompt?.();
	}
	#disconnect() {
		if (!castElementRef.has(this.#media)) return;
		Object.entries(this.#remoteListeners).forEach(([event, listener]) => {
			this.#remotePlayer.controller.removeEventListener(event, listener);
		});
		castElementRef.delete(this.#media);
		this.#media.muted = this.#remotePlayer.isMuted;
		this.#media.currentTime = this.#remotePlayer.savedPlayerState.currentTime;
		if (this.#remotePlayer.savedPlayerState.isPaused === false) this.#media.play();
	}
	#hasDevicesAvailable() {
		const castState = castContext()?.getCastState();
		return castState && castState !== "NO_DEVICES_AVAILABLE";
	}
	#onCastStateChanged() {
		const castState = castContext().getCastState();
		if (castElementRef.has(this.#media)) {
			if (castState === "CONNECTING") {
				this.#state = "connecting";
				this.dispatchEvent(new Event("connecting"));
			}
		}
		if (!this.#available && castState?.includes("CONNECT")) {
			this.#available = true;
			for (let callback of this.#callbacks) callback(true);
		} else if (this.#available && (!castState || castState === "NO_DEVICES_AVAILABLE")) {
			this.#available = false;
			for (let callback of this.#callbacks) callback(false);
		}
	}
	async #onSessionStateChanged() {
		const { SESSION_RESUMED } = cf.SessionState;
		if (castContext().getSessionState() === SESSION_RESUMED) {
			/**
			* Figure out if this was the video that started the resumed session.
			* @TODO make this more specific than just checking against the video src!! (WL)
			*
			* If this video element can get the same unique id on each browser refresh
			* it would be possible to pass this unique id w/ `LoadRequest.customData`
			* and verify against currentMedia().customData below.
			*/
			if (this.#media.castSrc === currentMedia()?.media.contentId) {
				castElementRef.add(this.#media);
				Object.entries(this.#remoteListeners).forEach(([event, listener]) => {
					this.#remotePlayer.controller.addEventListener(event, listener);
				});
				/**
				* There is cast framework resume session bug when you refresh the page a few
				* times the this.#remotePlayer.currentTime will not be in sync with the receiver :(
				* The below status request syncs it back up.
				*/
				try {
					await getMediaStatus(new chrome.cast.media.GetStatusRequest());
				} catch (error) {
					console.error(error);
				}
				this.#remoteListeners[cf.RemotePlayerEventType.IS_PAUSED_CHANGED]();
				this.#remoteListeners[cf.RemotePlayerEventType.PLAYER_STATE_CHANGED]();
			}
		}
	}
	#init() {
		if (!cf || this.#isInit) return;
		this.#isInit = true;
		setCastOptions(this.#media.castOptions);
		/**
		* @TODO add listeners for addtrack, removetrack (WL)
		* This only has an impact on <track> with a `src` because these have to be
		* loaded manually in the load() method. This will require a new load() call
		* for each added/removed track w/ src.
		*/
		this.#media.textTracks.addEventListener("change", () => this.#updateRemoteTextTrack());
		this.#onCastStateChanged();
		this.#remotePlayer = new cf.RemotePlayer();
		new cf.RemotePlayerController(this.#remotePlayer);
		this.#remoteListeners = {
			[cf.RemotePlayerEventType.IS_CONNECTED_CHANGED]: ({ value }) => {
				if (value === true) {
					this.#state = "connected";
					this.dispatchEvent(new Event("connect"));
				} else {
					this.#disconnect();
					this.#state = "disconnected";
					this.dispatchEvent(new Event("disconnect"));
				}
			},
			[cf.RemotePlayerEventType.DURATION_CHANGED]: () => {
				this.#media.dispatchEvent(new Event("durationchange"));
			},
			[cf.RemotePlayerEventType.VOLUME_LEVEL_CHANGED]: () => {
				this.#media.dispatchEvent(new Event("volumechange"));
			},
			[cf.RemotePlayerEventType.IS_MUTED_CHANGED]: () => {
				this.#media.dispatchEvent(new Event("volumechange"));
			},
			[cf.RemotePlayerEventType.CURRENT_TIME_CHANGED]: () => {
				if (!this.#castPlayer?.isMediaLoaded) return;
				this.#media.dispatchEvent(new Event("timeupdate"));
			},
			[cf.RemotePlayerEventType.VIDEO_INFO_CHANGED]: () => {
				this.#media.dispatchEvent(new Event("resize"));
			},
			[cf.RemotePlayerEventType.IS_PAUSED_CHANGED]: () => {
				this.#media.dispatchEvent(new Event(this.paused ? "pause" : "play"));
			},
			[cf.RemotePlayerEventType.PLAYER_STATE_CHANGED]: () => {
				if (this.#castPlayer?.playerState === chrome.cast.media.PlayerState.PAUSED) return;
				this.#media.dispatchEvent(new Event({
					[chrome.cast.media.PlayerState.PLAYING]: "playing",
					[chrome.cast.media.PlayerState.BUFFERING]: "waiting",
					[chrome.cast.media.PlayerState.IDLE]: "emptied"
				}[this.#castPlayer?.playerState]));
			},
			[cf.RemotePlayerEventType.IS_MEDIA_LOADED_CHANGED]: async () => {
				if (!this.#castPlayer?.isMediaLoaded) return;
				await Promise.resolve();
				this.#onRemoteMediaLoaded();
			}
		};
	}
	#onRemoteMediaLoaded() {
		this.#updateRemoteTextTrack();
	}
	async #updateRemoteTextTrack() {
		if (!this.#castPlayer) return;
		const remoteSubtitles = (this.#remotePlayer.mediaInfo?.tracks ?? []).filter(({ type }) => type === chrome.cast.media.TrackType.TEXT);
		const localSubtitles = [...this.#media.textTracks].filter(({ kind }) => kind === "subtitles" || kind === "captions");
		const subtitles = remoteSubtitles.map(({ language, name, trackId }) => {
			const { mode } = localSubtitles.find((local) => local.language === language && local.label === name) ?? {};
			if (mode) return {
				mode,
				trackId
			};
			return false;
		}).filter(Boolean);
		const hiddenTrackIds = subtitles.filter(({ mode }) => mode !== "showing").map(({ trackId }) => trackId);
		const showingSubtitle = subtitles.find(({ mode }) => mode === "showing");
		const activeTrackIds = currentSession()?.getSessionObj().media[0]?.activeTrackIds ?? [];
		let requestTrackIds = activeTrackIds;
		if (activeTrackIds.length) requestTrackIds = requestTrackIds.filter((id) => !hiddenTrackIds.includes(id));
		if (showingSubtitle?.trackId) requestTrackIds = [...requestTrackIds, showingSubtitle.trackId];
		requestTrackIds = [...new Set(requestTrackIds)];
		const arrayEquals = (a$2, b$4) => a$2.length === b$4.length && a$2.every((a$3) => b$4.includes(a$3));
		if (!arrayEquals(activeTrackIds, requestTrackIds)) try {
			const request$1 = new chrome.cast.media.EditTracksInfoRequest(requestTrackIds);
			await editTracksInfo(request$1);
		} catch (error) {
			console.error(error);
		}
	}
};

//#endregion
//#region node_modules/castable-video/castable-mixin.js
/**
* CastableMediaMixin
*
* This mixin function provides a way to compose multiple classes.
* @see https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/
*
* @param  {HTMLMediaElement} superclass - HTMLMediaElement or an extended class of it.
* @return {CastableMedia}
*/
const CastableMediaMixin = (superclass) => class CastableMedia extends superclass {
	static observedAttributes = [
		...superclass.observedAttributes ?? [],
		"cast-src",
		"cast-content-type",
		"cast-stream-type",
		"cast-receiver"
	];
	#localState = { paused: false };
	#castOptions = getDefaultCastOptions();
	#castCustomData;
	#remote;
	get remote() {
		if (this.#remote) return this.#remote;
		if (requiresCastFramework()) {
			if (!this.disableRemotePlayback) loadCastFramework();
			privateProps.set(this, { loadOnPrompt: () => this.#loadOnPrompt() });
			return this.#remote = new RemotePlayback(this);
		}
		return super.remote;
	}
	get #castPlayer() {
		return privateProps.get(this.remote)?.getCastPlayer?.();
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === "cast-receiver" && newValue) {
			this.#castOptions.receiverApplicationId = newValue;
			return;
		}
		if (!this.#castPlayer) return;
		switch (attrName) {
			case "cast-stream-type":
			case "cast-src":
				this.load();
				break;
		}
	}
	async #loadOnPrompt() {
		this.#localState.paused = super.paused;
		super.pause();
		this.muted = super.muted;
		try {
			await this.load();
		} catch (err) {
			console.error(err);
		}
	}
	async load() {
		if (!this.#castPlayer) return super.load();
		const mediaInfo = new chrome.cast.media.MediaInfo(this.castSrc, this.castContentType);
		mediaInfo.customData = this.castCustomData;
		const subtitles = [...this.querySelectorAll("track")].filter(({ kind, src }) => src && (kind === "subtitles" || kind === "captions"));
		const activeTrackIds = [];
		let textTrackIdCount = 0;
		if (subtitles.length) mediaInfo.tracks = subtitles.map((trackEl) => {
			const trackId = ++textTrackIdCount;
			if (activeTrackIds.length === 0 && trackEl.track.mode === "showing") activeTrackIds.push(trackId);
			const track = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);
			track.trackContentId = trackEl.src;
			track.trackContentType = "text/vtt";
			track.subtype = trackEl.kind === "captions" ? chrome.cast.media.TextTrackType.CAPTIONS : chrome.cast.media.TextTrackType.SUBTITLES;
			track.name = trackEl.label;
			track.language = trackEl.srclang;
			return track;
		});
		if (this.castStreamType === "live") mediaInfo.streamType = chrome.cast.media.StreamType.LIVE;
		else mediaInfo.streamType = chrome.cast.media.StreamType.BUFFERED;
		mediaInfo.metadata = new chrome.cast.media.GenericMediaMetadata();
		mediaInfo.metadata.title = this.title;
		mediaInfo.metadata.images = [{ url: this.poster }];
		if (isHls(this.castSrc)) {
			const segmentFormat = await getPlaylistSegmentFormat(this.castSrc);
			if (segmentFormat?.includes("m4s") || segmentFormat?.includes("mp4")) {
				mediaInfo.hlsSegmentFormat = chrome.cast.media.HlsSegmentFormat.FMP4;
				mediaInfo.hlsVideoSegmentFormat = chrome.cast.media.HlsVideoSegmentFormat.FMP4;
			} else if (segmentFormat?.includes("ts")) {
				mediaInfo.hlsSegmentFormat = chrome.cast.media.HlsSegmentFormat.TS;
				mediaInfo.hlsVideoSegmentFormat = chrome.cast.media.HlsVideoSegmentFormat.TS;
			}
		}
		const request$1 = new chrome.cast.media.LoadRequest(mediaInfo);
		request$1.currentTime = super.currentTime ?? 0;
		request$1.autoplay = !this.#localState.paused;
		request$1.activeTrackIds = activeTrackIds;
		await currentSession()?.loadMedia(request$1);
		this.dispatchEvent(new Event("volumechange"));
	}
	play() {
		if (this.#castPlayer) {
			if (this.#castPlayer.isPaused) this.#castPlayer.controller?.playOrPause();
			return;
		}
		return super.play();
	}
	pause() {
		if (this.#castPlayer) {
			if (!this.#castPlayer.isPaused) this.#castPlayer.controller?.playOrPause();
			return;
		}
		super.pause();
	}
	/**
	* @see https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastOptions
	* @readonly
	*
	* @typedef {Object} CastOptions
	* @property {string} [receiverApplicationId='CC1AD845'] - The app id of the cast receiver.
	* @property {string} [autoJoinPolicy='origin_scoped'] - The auto join policy.
	* @property {string} [language='en-US'] - The language to use for the cast receiver.
	* @property {boolean} [androidReceiverCompatible=false] - Whether to use the Cast Connect.
	* @property {boolean} [resumeSavedSession=true] - Whether to resume the last session.
	*
	* @return {CastOptions}
	*/
	get castOptions() {
		return this.#castOptions;
	}
	get castReceiver() {
		return this.getAttribute("cast-receiver") ?? void 0;
	}
	set castReceiver(val) {
		if (this.castReceiver == val) return;
		this.setAttribute("cast-receiver", `${val}`);
	}
	get castSrc() {
		return this.getAttribute("cast-src") ?? this.querySelector("source")?.src ?? this.currentSrc;
	}
	set castSrc(val) {
		if (this.castSrc == val) return;
		this.setAttribute("cast-src", `${val}`);
	}
	get castContentType() {
		return this.getAttribute("cast-content-type") ?? void 0;
	}
	set castContentType(val) {
		this.setAttribute("cast-content-type", `${val}`);
	}
	get castStreamType() {
		return this.getAttribute("cast-stream-type") ?? this.streamType ?? void 0;
	}
	set castStreamType(val) {
		this.setAttribute("cast-stream-type", `${val}`);
	}
	get castCustomData() {
		return this.#castCustomData;
	}
	set castCustomData(val) {
		const valType = typeof val;
		if (!["object", "undefined"].includes(valType)) {
			console.error(`castCustomData must be nullish or an object but value was of type ${valType}`);
			return;
		}
		this.#castCustomData = val;
	}
	get readyState() {
		if (this.#castPlayer) switch (this.#castPlayer.playerState) {
			case chrome.cast.media.PlayerState.IDLE: return 0;
			case chrome.cast.media.PlayerState.BUFFERING: return 2;
			default: return 3;
		}
		return super.readyState;
	}
	get paused() {
		if (this.#castPlayer) return this.#castPlayer.isPaused;
		return super.paused;
	}
	get muted() {
		if (this.#castPlayer) return this.#castPlayer?.isMuted;
		return super.muted;
	}
	set muted(val) {
		if (this.#castPlayer) {
			if (val && !this.#castPlayer.isMuted || !val && this.#castPlayer.isMuted) this.#castPlayer.controller?.muteOrUnmute();
			return;
		}
		super.muted = val;
	}
	get volume() {
		if (this.#castPlayer) return this.#castPlayer?.volumeLevel ?? 1;
		return super.volume;
	}
	set volume(val) {
		if (this.#castPlayer) {
			this.#castPlayer.volumeLevel = +val;
			this.#castPlayer.controller?.setVolumeLevel();
			return;
		}
		super.volume = val;
	}
	get duration() {
		if (this.#castPlayer && this.#castPlayer?.isMediaLoaded) return this.#castPlayer?.duration ?? NaN;
		return super.duration;
	}
	get currentTime() {
		if (this.#castPlayer && this.#castPlayer?.isMediaLoaded) return this.#castPlayer?.currentTime ?? 0;
		return super.currentTime;
	}
	set currentTime(val) {
		if (this.#castPlayer) {
			this.#castPlayer.currentTime = val;
			this.#castPlayer.controller?.seek();
			return;
		}
		super.currentTime = val;
	}
};

//#endregion
//#region node_modules/@mux/mux-video/dist/index.mjs
var f$3 = (e$1) => {
	throw TypeError(e$1);
};
var g$3 = (e$1, o$3, t$1) => o$3.has(e$1) || f$3("Cannot " + t$1);
var u$2 = (e$1, o$3, t$1) => (g$3(e$1, o$3, "read from private field"), t$1 ? t$1.call(e$1) : o$3.get(e$1)), m$3 = (e$1, o$3, t$1) => o$3.has(e$1) ? f$3("Cannot add the same private member more than once") : o$3 instanceof WeakSet ? o$3.add(e$1) : o$3.set(e$1, t$1), d$1 = (e$1, o$3, t$1, l$3) => (g$3(e$1, o$3, "write to private field"), l$3 ? l$3.call(e$1, t$1) : o$3.set(e$1, t$1), t$1);
var s$1 = class {
	addEventListener() {}
	removeEventListener() {}
	dispatchEvent(o$3) {
		return !0;
	}
};
if (typeof DocumentFragment == "undefined") {
	class e$1 extends s$1 {}
	globalThis.DocumentFragment = e$1;
}
var n = class extends s$1 {}, p$3 = class extends s$1 {}, x$3 = {
	get(e$1) {},
	define(e$1, o$3, t$1) {},
	getName(e$1) {
		return null;
	},
	upgrade(e$1) {},
	whenDefined(e$1) {
		return Promise.resolve(n);
	}
}, a$1, h$1 = class {
	constructor(o$3, t$1 = {}) {
		m$3(this, a$1);
		d$1(this, a$1, t$1 == null ? void 0 : t$1.detail);
	}
	get detail() {
		return u$2(this, a$1);
	}
	initCustomEvent() {}
};
a$1 = /* @__PURE__ */ new WeakMap();
function C$2(e$1, o$3) {
	return new n();
}
var y$2 = {
	document: { createElement: C$2 },
	DocumentFragment,
	customElements: x$3,
	CustomEvent: h$1,
	EventTarget: s$1,
	HTMLElement: n,
	HTMLVideoElement: p$3
}, b$2 = typeof window == "undefined" || typeof globalThis.customElements == "undefined", c$1 = b$2 ? y$2 : globalThis;
b$2 ? y$2.document : globalThis.document;
var r$2, i = class extends CastableMediaMixin(MediaTracksMixin(K)) {
	constructor() {
		super(...arguments);
		m$3(this, r$2);
	}
	get autoplay() {
		let t$1 = this.getAttribute("autoplay");
		return t$1 === null ? !1 : t$1 === "" ? !0 : t$1;
	}
	set autoplay(t$1) {
		let l$3 = this.autoplay;
		t$1 !== l$3 && (t$1 ? this.setAttribute("autoplay", typeof t$1 == "string" ? t$1 : "") : this.removeAttribute("autoplay"));
	}
	get muxCastCustomData() {
		return { mux: {
			playbackId: this.playbackId,
			minResolution: this.minResolution,
			maxResolution: this.maxResolution,
			renditionOrder: this.renditionOrder,
			customDomain: this.customDomain,
			tokens: { drm: this.drmToken },
			envKey: this.envKey,
			metadata: this.metadata,
			disableCookies: this.disableCookies,
			disableTracking: this.disableTracking,
			beaconCollectionDomain: this.beaconCollectionDomain,
			startTime: this.startTime,
			preferCmcd: this.preferCmcd
		} };
	}
	get castCustomData() {
		var t$1;
		return (t$1 = u$2(this, r$2)) != null ? t$1 : this.muxCastCustomData;
	}
	set castCustomData(t$1) {
		d$1(this, r$2, t$1);
	}
};
r$2 = /* @__PURE__ */ new WeakMap();
c$1.customElements.get("mux-video") || (c$1.customElements.define("mux-video", i), c$1.MuxVideoElement = i);

//#endregion
//#region node_modules/media-chrome/dist/constants.js
var MediaUIEvents = {
	MEDIA_PLAY_REQUEST: "mediaplayrequest",
	MEDIA_PAUSE_REQUEST: "mediapauserequest",
	MEDIA_MUTE_REQUEST: "mediamuterequest",
	MEDIA_UNMUTE_REQUEST: "mediaunmuterequest",
	MEDIA_VOLUME_REQUEST: "mediavolumerequest",
	MEDIA_SEEK_REQUEST: "mediaseekrequest",
	MEDIA_AIRPLAY_REQUEST: "mediaairplayrequest",
	MEDIA_ENTER_FULLSCREEN_REQUEST: "mediaenterfullscreenrequest",
	MEDIA_EXIT_FULLSCREEN_REQUEST: "mediaexitfullscreenrequest",
	MEDIA_PREVIEW_REQUEST: "mediapreviewrequest",
	MEDIA_ENTER_PIP_REQUEST: "mediaenterpiprequest",
	MEDIA_EXIT_PIP_REQUEST: "mediaexitpiprequest",
	MEDIA_ENTER_CAST_REQUEST: "mediaentercastrequest",
	MEDIA_EXIT_CAST_REQUEST: "mediaexitcastrequest",
	MEDIA_SHOW_TEXT_TRACKS_REQUEST: "mediashowtexttracksrequest",
	MEDIA_HIDE_TEXT_TRACKS_REQUEST: "mediahidetexttracksrequest",
	MEDIA_SHOW_SUBTITLES_REQUEST: "mediashowsubtitlesrequest",
	MEDIA_DISABLE_SUBTITLES_REQUEST: "mediadisablesubtitlesrequest",
	MEDIA_TOGGLE_SUBTITLES_REQUEST: "mediatogglesubtitlesrequest",
	MEDIA_PLAYBACK_RATE_REQUEST: "mediaplaybackraterequest",
	MEDIA_RENDITION_REQUEST: "mediarenditionrequest",
	MEDIA_AUDIO_TRACK_REQUEST: "mediaaudiotrackrequest",
	MEDIA_SEEK_TO_LIVE_REQUEST: "mediaseektoliverequest",
	REGISTER_MEDIA_STATE_RECEIVER: "registermediastatereceiver",
	UNREGISTER_MEDIA_STATE_RECEIVER: "unregistermediastatereceiver"
};
var MediaStateReceiverAttributes = {
	MEDIA_CHROME_ATTRIBUTES: "mediachromeattributes",
	MEDIA_CONTROLLER: "mediacontroller"
};
var MediaUIProps = {
	MEDIA_AIRPLAY_UNAVAILABLE: "mediaAirplayUnavailable",
	MEDIA_AUDIO_TRACK_ENABLED: "mediaAudioTrackEnabled",
	MEDIA_AUDIO_TRACK_LIST: "mediaAudioTrackList",
	MEDIA_AUDIO_TRACK_UNAVAILABLE: "mediaAudioTrackUnavailable",
	MEDIA_BUFFERED: "mediaBuffered",
	MEDIA_CAST_UNAVAILABLE: "mediaCastUnavailable",
	MEDIA_CHAPTERS_CUES: "mediaChaptersCues",
	MEDIA_CURRENT_TIME: "mediaCurrentTime",
	MEDIA_DURATION: "mediaDuration",
	MEDIA_ENDED: "mediaEnded",
	MEDIA_ERROR: "mediaError",
	MEDIA_ERROR_CODE: "mediaErrorCode",
	MEDIA_ERROR_MESSAGE: "mediaErrorMessage",
	MEDIA_FULLSCREEN_UNAVAILABLE: "mediaFullscreenUnavailable",
	MEDIA_HAS_PLAYED: "mediaHasPlayed",
	MEDIA_HEIGHT: "mediaHeight",
	MEDIA_IS_AIRPLAYING: "mediaIsAirplaying",
	MEDIA_IS_CASTING: "mediaIsCasting",
	MEDIA_IS_FULLSCREEN: "mediaIsFullscreen",
	MEDIA_IS_PIP: "mediaIsPip",
	MEDIA_LOADING: "mediaLoading",
	MEDIA_MUTED: "mediaMuted",
	MEDIA_PAUSED: "mediaPaused",
	MEDIA_PIP_UNAVAILABLE: "mediaPipUnavailable",
	MEDIA_PLAYBACK_RATE: "mediaPlaybackRate",
	MEDIA_PREVIEW_CHAPTER: "mediaPreviewChapter",
	MEDIA_PREVIEW_COORDS: "mediaPreviewCoords",
	MEDIA_PREVIEW_IMAGE: "mediaPreviewImage",
	MEDIA_PREVIEW_TIME: "mediaPreviewTime",
	MEDIA_RENDITION_LIST: "mediaRenditionList",
	MEDIA_RENDITION_SELECTED: "mediaRenditionSelected",
	MEDIA_RENDITION_UNAVAILABLE: "mediaRenditionUnavailable",
	MEDIA_SEEKABLE: "mediaSeekable",
	MEDIA_STREAM_TYPE: "mediaStreamType",
	MEDIA_SUBTITLES_LIST: "mediaSubtitlesList",
	MEDIA_SUBTITLES_SHOWING: "mediaSubtitlesShowing",
	MEDIA_TARGET_LIVE_WINDOW: "mediaTargetLiveWindow",
	MEDIA_TIME_IS_LIVE: "mediaTimeIsLive",
	MEDIA_VOLUME: "mediaVolume",
	MEDIA_VOLUME_LEVEL: "mediaVolumeLevel",
	MEDIA_VOLUME_UNAVAILABLE: "mediaVolumeUnavailable",
	MEDIA_LANG: "mediaLang",
	MEDIA_WIDTH: "mediaWidth"
};
var MediaUIPropsEntries = Object.entries(MediaUIProps);
var MediaUIAttributes = MediaUIPropsEntries.reduce((dictObj, [key, propName]) => {
	dictObj[key] = propName.toLowerCase();
	return dictObj;
}, {});
var MediaStateChangeEvents = MediaUIPropsEntries.reduce((dictObj, [key, propName]) => {
	dictObj[key] = propName.toLowerCase();
	return dictObj;
}, {
	USER_INACTIVE_CHANGE: "userinactivechange",
	BREAKPOINTS_CHANGE: "breakpointchange",
	BREAKPOINTS_COMPUTED: "breakpointscomputed"
});
var StateChangeEventToAttributeMap = Object.entries(MediaStateChangeEvents).reduce((mapObj, [key, eventType]) => {
	const attrName = MediaUIAttributes[key];
	if (attrName) mapObj[eventType] = attrName;
	return mapObj;
}, { userinactivechange: "userinactive" });
var AttributeToStateChangeEventMap = Object.entries(MediaUIAttributes).reduce((mapObj, [key, attrName]) => {
	const evtType = MediaStateChangeEvents[key];
	if (evtType) mapObj[attrName] = evtType;
	return mapObj;
}, { userinactive: "userinactivechange" });
var TextTrackKinds = {
	SUBTITLES: "subtitles",
	CAPTIONS: "captions",
	DESCRIPTIONS: "descriptions",
	CHAPTERS: "chapters",
	METADATA: "metadata"
};
var TextTrackModes = {
	DISABLED: "disabled",
	HIDDEN: "hidden",
	SHOWING: "showing"
};
var PointerTypes = {
	MOUSE: "mouse",
	PEN: "pen",
	TOUCH: "touch"
};
var AvailabilityStates = {
	UNAVAILABLE: "unavailable",
	UNSUPPORTED: "unsupported"
};
var StreamTypes = {
	LIVE: "live",
	ON_DEMAND: "on-demand",
	UNKNOWN: "unknown"
};
var WebkitPresentationModes = {
	INLINE: "inline",
	FULLSCREEN: "fullscreen",
	PICTURE_IN_PICTURE: "picture-in-picture"
};

//#endregion
//#region node_modules/media-chrome/dist/utils/utils.js
function stringifyRenditionList(renditions) {
	return renditions == null ? void 0 : renditions.map(stringifyRendition).join(" ");
}
function parseRenditionList(renditions) {
	return renditions == null ? void 0 : renditions.split(/\s+/).map(parseRendition);
}
function stringifyRendition(rendition) {
	if (rendition) {
		const { id, width, height } = rendition;
		return [
			id,
			width,
			height
		].filter((a$2) => a$2 != null).join(":");
	}
}
function parseRendition(rendition) {
	if (rendition) {
		const [id, width, height] = rendition.split(":");
		return {
			id,
			width: +width,
			height: +height
		};
	}
}
function stringifyAudioTrackList(audioTracks) {
	return audioTracks == null ? void 0 : audioTracks.map(stringifyAudioTrack).join(" ");
}
function parseAudioTrackList(audioTracks) {
	return audioTracks == null ? void 0 : audioTracks.split(/\s+/).map(parseAudioTrack);
}
function stringifyAudioTrack(audioTrack) {
	if (audioTrack) {
		const { id, kind, language, label } = audioTrack;
		return [
			id,
			kind,
			language,
			label
		].filter((a$2) => a$2 != null).join(":");
	}
}
function parseAudioTrack(audioTrack) {
	if (audioTrack) {
		const [id, kind, language, label] = audioTrack.split(":");
		return {
			id,
			kind,
			language,
			label
		};
	}
}
function camelCase(name) {
	return name.replace(/[-_]([a-z])/g, ($0, $1) => $1.toUpperCase());
}
function isValidNumber(x$5) {
	return typeof x$5 === "number" && !Number.isNaN(x$5) && Number.isFinite(x$5);
}
function isNumericString(str) {
	if (typeof str != "string") return false;
	return !isNaN(str) && !isNaN(parseFloat(str));
}
var delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

//#endregion
//#region node_modules/media-chrome/dist/utils/time.js
var UnitLabels = [
	{
		singular: "hour",
		plural: "hours"
	},
	{
		singular: "minute",
		plural: "minutes"
	},
	{
		singular: "second",
		plural: "seconds"
	}
];
var toTimeUnitPhrase = (timeUnitValue, unitIndex) => {
	const unitLabel = timeUnitValue === 1 ? UnitLabels[unitIndex].singular : UnitLabels[unitIndex].plural;
	return `${timeUnitValue} ${unitLabel}`;
};
var formatAsTimePhrase = (seconds) => {
	if (!isValidNumber(seconds)) return "";
	const positiveSeconds = Math.abs(seconds);
	const negative = positiveSeconds !== seconds;
	const secondsDateTime = new Date(0, 0, 0, 0, 0, positiveSeconds, 0);
	return `${[
		secondsDateTime.getHours(),
		secondsDateTime.getMinutes(),
		secondsDateTime.getSeconds()
	].map((timeUnitValue, index) => timeUnitValue && toTimeUnitPhrase(timeUnitValue, index)).filter((x$5) => x$5).join(", ")}${negative ? " remaining" : ""}`;
};
function formatTime(seconds, guide) {
	let negative = false;
	if (seconds < 0) {
		negative = true;
		seconds = 0 - seconds;
	}
	seconds = seconds < 0 ? 0 : seconds;
	let s$2 = Math.floor(seconds % 60);
	let m$5 = Math.floor(seconds / 60 % 60);
	let h$2 = Math.floor(seconds / 3600);
	const gm = Math.floor(guide / 60 % 60);
	const gh = Math.floor(guide / 3600);
	if (isNaN(seconds) || seconds === Infinity) h$2 = m$5 = s$2 = "0";
	h$2 = h$2 > 0 || gh > 0 ? h$2 + ":" : "";
	m$5 = ((h$2 || gm >= 10) && m$5 < 10 ? "0" + m$5 : m$5) + ":";
	s$2 = s$2 < 10 ? "0" + s$2 : s$2;
	return (negative ? "-" : "") + h$2 + m$5 + s$2;
}
var emptyTimeRanges = Object.freeze({
	length: 0,
	start(index) {
		const unsignedIdx = index >>> 0;
		if (unsignedIdx >= this.length) throw new DOMException(`Failed to execute 'start' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`);
		return 0;
	},
	end(index) {
		const unsignedIdx = index >>> 0;
		if (unsignedIdx >= this.length) throw new DOMException(`Failed to execute 'end' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`);
		return 0;
	}
});

//#endregion
//#region node_modules/media-chrome/dist/lang/en.js
var En = {
	"Start airplay": "Start airplay",
	"Stop airplay": "Stop airplay",
	Audio: "Audio",
	Captions: "Captions",
	"Enable captions": "Enable captions",
	"Disable captions": "Disable captions",
	"Start casting": "Start casting",
	"Stop casting": "Stop casting",
	"Enter fullscreen mode": "Enter fullscreen mode",
	"Exit fullscreen mode": "Exit fullscreen mode",
	Mute: "Mute",
	Unmute: "Unmute",
	"Enter picture in picture mode": "Enter picture in picture mode",
	"Exit picture in picture mode": "Exit picture in picture mode",
	Play: "Play",
	Pause: "Pause",
	"Playback rate": "Playback rate",
	"Playback rate {playbackRate}": "Playback rate {playbackRate}",
	Quality: "Quality",
	"Seek backward": "Seek backward",
	"Seek forward": "Seek forward",
	Settings: "Settings",
	Auto: "Auto",
	"audio player": "audio player",
	"video player": "video player",
	volume: "volume",
	seek: "seek",
	"closed captions": "closed captions",
	"current playback rate": "current playback rate",
	"playback time": "playback time",
	"media loading": "media loading",
	settings: "settings",
	"audio tracks": "audio tracks",
	quality: "quality",
	play: "play",
	pause: "pause",
	mute: "mute",
	unmute: "unmute",
	"chapter: {chapterName}": "chapter: {chapterName}",
	live: "live",
	Off: "Off",
	"start airplay": "start airplay",
	"stop airplay": "stop airplay",
	"start casting": "start casting",
	"stop casting": "stop casting",
	"enter fullscreen mode": "enter fullscreen mode",
	"exit fullscreen mode": "exit fullscreen mode",
	"enter picture in picture mode": "enter picture in picture mode",
	"exit picture in picture mode": "exit picture in picture mode",
	"seek to live": "seek to live",
	"playing live": "playing live",
	"seek back {seekOffset} seconds": "seek back {seekOffset} seconds",
	"seek forward {seekOffset} seconds": "seek forward {seekOffset} seconds",
	"Network Error": "Network Error",
	"Decode Error": "Decode Error",
	"Source Not Supported": "Source Not Supported",
	"Encryption Error": "Encryption Error",
	"A network error caused the media download to fail.": "A network error caused the media download to fail.",
	"A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.": "A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.",
	"An unsupported error occurred. The server or network failed, or your browser does not support this format.": "An unsupported error occurred. The server or network failed, or your browser does not support this format.",
	"The media is encrypted and there are no keys to decrypt it.": "The media is encrypted and there are no keys to decrypt it."
};

//#endregion
//#region node_modules/media-chrome/dist/utils/i18n.js
var _a$1;
var translations = { en: En };
var currentLang = ((_a$1 = globalThis.navigator) == null ? void 0 : _a$1.language) || "en";
var setLanguage = (langCode) => {
	currentLang = langCode;
};
var resolveTranslation = (key) => {
	var _a2, _b, _c;
	const [base] = currentLang.split("-");
	return ((_a2 = translations[currentLang]) == null ? void 0 : _a2[key]) || ((_b = translations[base]) == null ? void 0 : _b[key]) || ((_c = translations.en) == null ? void 0 : _c[key]) || key;
};
var t = (key, vars = {}) => resolveTranslation(key).replace(/\{(\w+)\}/g, (_$2, v$3) => v$3 in vars ? String(vars[v$3]) : `{${v$3}}`);

//#endregion
//#region node_modules/media-chrome/dist/utils/server-safe-globals.js
var EventTarget$1 = class {
	addEventListener() {}
	removeEventListener() {}
	dispatchEvent() {
		return true;
	}
};
var Node = class extends EventTarget$1 {};
var Element$1 = class extends Node {
	constructor() {
		super(...arguments);
		this.role = null;
	}
};
var ResizeObserver = class {
	observe() {}
	unobserve() {}
	disconnect() {}
};
var documentShim = {
	createElement: function() {
		return new globalThisShim.HTMLElement();
	},
	createElementNS: function() {
		return new globalThisShim.HTMLElement();
	},
	addEventListener() {},
	removeEventListener() {},
	dispatchEvent(_event) {
		return false;
	}
};
var globalThisShim = {
	ResizeObserver,
	document: documentShim,
	Node,
	Element: Element$1,
	HTMLElement: class HTMLElement extends Element$1 {
		constructor() {
			super(...arguments);
			this.innerHTML = "";
		}
		get content() {
			return new globalThisShim.DocumentFragment();
		}
	},
	DocumentFragment: class DocumentFragment$1 extends EventTarget$1 {},
	customElements: {
		get: function() {},
		define: function() {},
		whenDefined: function() {}
	},
	localStorage: {
		getItem(_key) {
			return null;
		},
		setItem(_key, _value$1) {},
		removeItem(_key) {}
	},
	CustomEvent: function CustomEvent$1() {},
	getComputedStyle: function() {},
	navigator: {
		languages: [],
		get userAgent() {
			return "";
		}
	},
	matchMedia(media) {
		return {
			matches: false,
			media
		};
	},
	DOMParser: class DOMParser {
		parseFromString(string, _contentType) {
			return { body: { textContent: string } };
		}
	}
};
var isServer = typeof window === "undefined" || typeof window.customElements === "undefined";
var isShimmed = Object.keys(globalThisShim).every((key) => key in globalThis);
var GlobalThis = isServer && !isShimmed ? globalThisShim : globalThis;
var Document$1 = isServer && !isShimmed ? documentShim : globalThis.document;

//#endregion
//#region node_modules/media-chrome/dist/utils/resize-observer.js
var callbacksMap = /* @__PURE__ */ new WeakMap();
var getCallbacks = (element) => {
	let callbacks = callbacksMap.get(element);
	if (!callbacks) callbacksMap.set(element, callbacks = /* @__PURE__ */ new Set());
	return callbacks;
};
var observer = new GlobalThis.ResizeObserver((entries) => {
	for (const entry of entries) for (const callback of getCallbacks(entry.target)) callback(entry);
});
function observeResize(element, callback) {
	getCallbacks(element).add(callback);
	observer.observe(element);
}
function unobserveResize(element, callback) {
	const callbacks = getCallbacks(element);
	callbacks.delete(callback);
	if (!callbacks.size) observer.unobserve(element);
}

//#endregion
//#region node_modules/media-chrome/dist/utils/element-utils.js
function namedNodeMapToObject(namedNodeMap) {
	const obj = {};
	for (const attr of namedNodeMap) obj[attr.name] = attr.value;
	return obj;
}
function getMediaController(host) {
	var _a$2;
	return (_a$2 = getAttributeMediaController(host)) != null ? _a$2 : closestComposedNode(host, "media-controller");
}
function getAttributeMediaController(host) {
	var _a$2;
	const { MEDIA_CONTROLLER } = MediaStateReceiverAttributes;
	const mediaControllerId = host.getAttribute(MEDIA_CONTROLLER);
	if (mediaControllerId) return (_a$2 = getDocumentOrShadowRoot(host)) == null ? void 0 : _a$2.getElementById(mediaControllerId);
}
var updateIconText = (svg, value, selector = ".value") => {
	const node = svg.querySelector(selector);
	if (!node) return;
	node.textContent = value;
};
var getAllSlotted = (el, name) => {
	const slotSelector = `slot[name="${name}"]`;
	const slot = el.shadowRoot.querySelector(slotSelector);
	if (!slot) return [];
	return slot.children;
};
var getSlotted = (el, name) => getAllSlotted(el, name)[0];
var containsComposedNode = (rootNode, childNode) => {
	if (!rootNode || !childNode) return false;
	if (rootNode == null ? void 0 : rootNode.contains(childNode)) return true;
	return containsComposedNode(rootNode, childNode.getRootNode().host);
};
var closestComposedNode = (childNode, selector) => {
	if (!childNode) return null;
	const closest = childNode.closest(selector);
	if (closest) return closest;
	return closestComposedNode(childNode.getRootNode().host, selector);
};
function getActiveElement(root = document) {
	var _a$2;
	const activeEl = root == null ? void 0 : root.activeElement;
	if (!activeEl) return null;
	return (_a$2 = getActiveElement(activeEl.shadowRoot)) != null ? _a$2 : activeEl;
}
function getDocumentOrShadowRoot(node) {
	var _a$2;
	const rootNode = (_a$2 = node == null ? void 0 : node.getRootNode) == null ? void 0 : _a$2.call(node);
	if (rootNode instanceof ShadowRoot || rootNode instanceof Document) return rootNode;
	return null;
}
function isElementVisible(element, { depth = 3, checkOpacity = true, checkVisibilityCSS = true } = {}) {
	if (element.checkVisibility) return element.checkVisibility({
		checkOpacity,
		checkVisibilityCSS
	});
	let el = element;
	while (el && depth > 0) {
		const style = getComputedStyle(el);
		if (checkOpacity && style.opacity === "0" || checkVisibilityCSS && style.visibility === "hidden" || style.display === "none") return false;
		el = el.parentElement;
		depth--;
	}
	return true;
}
function getPointProgressOnLine(x$5, y$4, p1, p2) {
	const dx = p2.x - p1.x;
	const dy = p2.y - p1.y;
	const lengthSquared = dx * dx + dy * dy;
	if (lengthSquared === 0) return 0;
	const projection = ((x$5 - p1.x) * dx + (y$4 - p1.y) * dy) / lengthSquared;
	return Math.max(0, Math.min(1, projection));
}
function getOrInsertCSSRule(styleParent, selectorText) {
	const cssRule = getCSSRule(styleParent, (st$3) => st$3 === selectorText);
	if (cssRule) return cssRule;
	return insertCSSRule(styleParent, selectorText);
}
function getCSSRule(styleParent, predicate) {
	var _a$2, _b;
	let style;
	for (style of (_a$2 = styleParent.querySelectorAll("style:not([media])")) != null ? _a$2 : []) {
		let cssRules;
		try {
			cssRules = (_b = style.sheet) == null ? void 0 : _b.cssRules;
		} catch {
			continue;
		}
		for (const rule of cssRules != null ? cssRules : []) if (predicate(rule.selectorText)) return rule;
	}
}
function insertCSSRule(styleParent, selectorText) {
	var _a$2, _b;
	const styles = (_a$2 = styleParent.querySelectorAll("style:not([media])")) != null ? _a$2 : [];
	const style = styles == null ? void 0 : styles[styles.length - 1];
	if (!(style == null ? void 0 : style.sheet)) {
		console.warn("Media Chrome: No style sheet found on style tag of", styleParent);
		return { style: {
			setProperty: () => {},
			removeProperty: () => "",
			getPropertyValue: () => ""
		} };
	}
	style?.sheet.insertRule(`${selectorText}{}`, style.sheet.cssRules.length);
	return (_b = style.sheet.cssRules) == null ? void 0 : _b[style.sheet.cssRules.length - 1];
}
function getNumericAttr(el, attrName, defaultValue = NaN) {
	const attrVal = el.getAttribute(attrName);
	return attrVal != null ? +attrVal : defaultValue;
}
function setNumericAttr(el, attrName, value) {
	const nextNumericValue = +value;
	if (value == null || Number.isNaN(nextNumericValue)) {
		if (el.hasAttribute(attrName)) el.removeAttribute(attrName);
		return;
	}
	if (getNumericAttr(el, attrName, void 0) === nextNumericValue) return;
	el.setAttribute(attrName, `${nextNumericValue}`);
}
function getBooleanAttr(el, attrName) {
	return el.hasAttribute(attrName);
}
function setBooleanAttr(el, attrName, value) {
	if (value == null) {
		if (el.hasAttribute(attrName)) el.removeAttribute(attrName);
		return;
	}
	if (getBooleanAttr(el, attrName) == value) return;
	el.toggleAttribute(attrName, value);
}
function getStringAttr(el, attrName, defaultValue = null) {
	var _a$2;
	return (_a$2 = el.getAttribute(attrName)) != null ? _a$2 : defaultValue;
}
function setStringAttr(el, attrName, value) {
	if (value == null) {
		if (el.hasAttribute(attrName)) el.removeAttribute(attrName);
		return;
	}
	const nextValue = `${value}`;
	if (getStringAttr(el, attrName, void 0) === nextValue) return;
	el.setAttribute(attrName, nextValue);
}

//#endregion
//#region node_modules/media-chrome/dist/media-gesture-receiver.js
var __accessCheck$26 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$26 = (obj, member, getter) => {
	__accessCheck$26(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$26 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$24 = (obj, member, value, setter) => {
	__accessCheck$26(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController$7;
function getTemplateHTML$16(_attrs) {
	return `
    <style>
      :host {
        display: var(--media-control-display, var(--media-gesture-receiver-display, inline-block));
        box-sizing: border-box;
      }
    </style>
  `;
}
var MediaGestureReceiver = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$26(this, _mediaController$7, void 0);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [MediaStateReceiverAttributes.MEDIA_CONTROLLER, MediaUIAttributes.MEDIA_PAUSED];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2, _b, _c, _d, _e$3;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$2 = __privateGet$26(this, _mediaController$7)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
				__privateSet$24(this, _mediaController$7, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$24(this, _mediaController$7, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e$3 = (_d = __privateGet$26(this, _mediaController$7)) == null ? void 0 : _d.associateElement) == null || _e$3.call(_d, this);
			}
		}
	}
	connectedCallback() {
		var _a$2, _b, _c, _d;
		this.tabIndex = -1;
		this.setAttribute("aria-hidden", "true");
		__privateSet$24(this, _mediaController$7, getMediaControllerEl(this));
		if (this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER)) (_b = (_a$2 = __privateGet$26(this, _mediaController$7)) == null ? void 0 : _a$2.associateElement) == null || _b.call(_a$2, this);
		(_c = __privateGet$26(this, _mediaController$7)) == null || _c.addEventListener("pointerdown", this);
		(_d = __privateGet$26(this, _mediaController$7)) == null || _d.addEventListener("click", this);
	}
	disconnectedCallback() {
		var _a$2, _b, _c, _d;
		if (this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER)) (_b = (_a$2 = __privateGet$26(this, _mediaController$7)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
		(_c = __privateGet$26(this, _mediaController$7)) == null || _c.removeEventListener("pointerdown", this);
		(_d = __privateGet$26(this, _mediaController$7)) == null || _d.removeEventListener("click", this);
		__privateSet$24(this, _mediaController$7, null);
	}
	handleEvent(event) {
		var _a$2;
		const composedTarget = (_a$2 = event.composedPath()) == null ? void 0 : _a$2[0];
		if (!["video", "media-controller"].includes(composedTarget == null ? void 0 : composedTarget.localName)) return;
		if (event.type === "pointerdown") this._pointerType = event.pointerType;
		else if (event.type === "click") {
			const { clientX, clientY } = event;
			const { left, top, width, height } = this.getBoundingClientRect();
			const x$5 = clientX - left;
			const y$4 = clientY - top;
			if (x$5 < 0 || y$4 < 0 || x$5 > width || y$4 > height || width === 0 && height === 0) return;
			const pointerType = this._pointerType || "mouse";
			this._pointerType = void 0;
			if (pointerType === PointerTypes.TOUCH) {
				this.handleTap(event);
				return;
			} else if (pointerType === PointerTypes.MOUSE) {
				this.handleMouseClick(event);
				return;
			}
		}
	}
	/**
	* @type {boolean} Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	/**
	* @abstract
	* @argument {Event} e
	*/
	handleTap(e$1) {}
	handleMouseClick(e$1) {
		const eventName = this.mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
_mediaController$7 = /* @__PURE__ */ new WeakMap();
MediaGestureReceiver.shadowRootOptions = { mode: "open" };
MediaGestureReceiver.getTemplateHTML = getTemplateHTML$16;
function getMediaControllerEl(controlEl) {
	var _a$2;
	const mediaControllerId = controlEl.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
	if (mediaControllerId) return (_a$2 = controlEl.getRootNode()) == null ? void 0 : _a$2.getElementById(mediaControllerId);
	return closestComposedNode(controlEl, "media-controller");
}
if (!GlobalThis.customElements.get("media-gesture-receiver")) GlobalThis.customElements.define("media-gesture-receiver", MediaGestureReceiver);
var media_gesture_receiver_default = MediaGestureReceiver;

//#endregion
//#region node_modules/media-chrome/dist/media-container.js
var __accessCheck$25 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$25 = (obj, member, getter) => {
	__accessCheck$25(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$25 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$23 = (obj, member, value, setter) => {
	__accessCheck$25(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$12 = (obj, member, method) => {
	__accessCheck$25(obj, member, "access private method");
	return method;
};
var _pointerDownTimeStamp, _currentMedia, _inactiveTimeout, _autohide, _mutationObserver$1, _handleMutation, handleMutation_fn, _isResizePending, _handleResize, _handlePointerMove$2, handlePointerMove_fn$2, _handlePointerUp$1, handlePointerUp_fn$1, _setInactive, setInactive_fn, _setActive, setActive_fn, _scheduleInactive, scheduleInactive_fn;
var Attributes = {
	AUDIO: "audio",
	AUTOHIDE: "autohide",
	BREAKPOINTS: "breakpoints",
	GESTURES_DISABLED: "gesturesdisabled",
	KEYBOARD_CONTROL: "keyboardcontrol",
	NO_AUTOHIDE: "noautohide",
	USER_INACTIVE: "userinactive",
	AUTOHIDE_OVER_CONTROLS: "autohideovercontrols"
};
function getTemplateHTML$15(_attrs) {
	return `
    <style>
      
      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) ::slotted([slot=media]) {
        outline: none;
      }

      :host {
        box-sizing: border-box;
        position: relative;
        display: inline-block;
        line-height: 0;
        background-color: var(--media-background-color, #000);
      }

      :host(:not([${Attributes.AUDIO}])) [part~=layer]:not([part~=media-layer]) {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        display: flex;
        flex-flow: column nowrap;
        align-items: start;
        pointer-events: none;
        background: none;
      }

      slot[name=media] {
        display: var(--media-slot-display, contents);
      }

      
      :host([${Attributes.AUDIO}]) slot[name=media] {
        display: var(--media-slot-display, none);
      }

      
      :host([${Attributes.AUDIO}]) [part~=layer][part~=gesture-layer] {
        height: 0;
        display: block;
      }

      
      :host(:not([${Attributes.AUDIO}])[${Attributes.GESTURES_DISABLED}]) ::slotted([slot=gestures-chrome]),
          :host(:not([${Attributes.AUDIO}])[${Attributes.GESTURES_DISABLED}]) media-gesture-receiver[slot=gestures-chrome] {
        display: none;
      }

      
      ::slotted(:not([slot=media]):not([slot=poster]):not(media-loading-indicator):not([role=dialog]):not([hidden])) {
        pointer-events: auto;
      }

      :host(:not([${Attributes.AUDIO}])) *[part~=layer][part~=centered-layer] {
        align-items: center;
        justify-content: center;
      }

      :host(:not([${Attributes.AUDIO}])) ::slotted(media-gesture-receiver[slot=gestures-chrome]),
      :host(:not([${Attributes.AUDIO}])) media-gesture-receiver[slot=gestures-chrome] {
        align-self: stretch;
        flex-grow: 1;
      }

      slot[name=middle-chrome] {
        display: inline;
        flex-grow: 1;
        pointer-events: none;
        background: none;
      }

      
      ::slotted([slot=media]),
      ::slotted([slot=poster]) {
        width: 100%;
        height: 100%;
      }

      
      :host(:not([${Attributes.AUDIO}])) .spacer {
        flex-grow: 1;
      }

      
      :host(:-webkit-full-screen) {
        
        width: 100% !important;
        height: 100% !important;
      }

      
      ::slotted(:not([slot=media]):not([slot=poster]):not([${Attributes.NO_AUTOHIDE}]):not([hidden]):not([role=dialog])) {
        opacity: 1;
        transition: var(--media-control-transition-in, opacity 0.25s);
      }

      
      :host([${Attributes.USER_INACTIVE}]:not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes.AUDIO}])) ::slotted(:not([slot=media]):not([slot=poster]):not([${Attributes.NO_AUTOHIDE}]):not([role=dialog])) {
        opacity: 0;
        transition: var(--media-control-transition-out, opacity 1s);
      }

      :host([${Attributes.USER_INACTIVE}]:not([${Attributes.NO_AUTOHIDE}]):not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes.AUDIO}])) ::slotted([slot=media]) {
        cursor: none;
      }

      :host([${Attributes.USER_INACTIVE}][${Attributes.AUTOHIDE_OVER_CONTROLS}]:not([${Attributes.NO_AUTOHIDE}]):not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes.AUDIO}])) * {
        --media-cursor: none;
        cursor: none;
      }


      ::slotted(media-control-bar)  {
        align-self: stretch;
      }

      
      :host(:not([${Attributes.AUDIO}])[${MediaUIAttributes.MEDIA_HAS_PLAYED}]) slot[name=poster] {
        display: none;
      }

      ::slotted([role=dialog]) {
        width: 100%;
        height: 100%;
        align-self: center;
      }

      ::slotted([role=menu]) {
        align-self: end;
      }
    </style>

    <slot name="media" part="layer media-layer"></slot>
    <slot name="poster" part="layer poster-layer"></slot>
    <slot name="gestures-chrome" part="layer gesture-layer">
      <media-gesture-receiver slot="gestures-chrome">
        <template shadowrootmode="${media_gesture_receiver_default.shadowRootOptions.mode}">
          ${media_gesture_receiver_default.getTemplateHTML({})}
        </template>
      </media-gesture-receiver>
    </slot>
    <span part="layer vertical-layer">
      <slot name="top-chrome" part="top chrome"></slot>
      <slot name="middle-chrome" part="middle chrome"></slot>
      <slot name="centered-chrome" part="layer centered-layer center centered chrome"></slot>
      
      <slot part="bottom chrome"></slot>
    </span>
    <slot name="dialog" part="layer dialog-layer"></slot>
  `;
}
var MEDIA_UI_ATTRIBUTE_NAMES$1 = Object.values(MediaUIAttributes);
var defaultBreakpoints = "sm:384 md:576 lg:768 xl:960";
function resizeCallback(entry) {
	setBreakpoints(entry.target, entry.contentRect.width);
}
function setBreakpoints(container, width) {
	var _a$2;
	if (!container.isConnected) return;
	const breakpoints = (_a$2 = container.getAttribute(Attributes.BREAKPOINTS)) != null ? _a$2 : defaultBreakpoints;
	const ranges = createBreakpointMap(breakpoints);
	const activeBreakpoints = getBreakpoints(ranges, width);
	let changed = false;
	Object.keys(ranges).forEach((name) => {
		if (activeBreakpoints.includes(name)) {
			if (!container.hasAttribute(`breakpoint${name}`)) {
				container.setAttribute(`breakpoint${name}`, "");
				changed = true;
			}
			return;
		}
		if (container.hasAttribute(`breakpoint${name}`)) {
			container.removeAttribute(`breakpoint${name}`);
			changed = true;
		}
	});
	if (changed) {
		const evt = new CustomEvent(MediaStateChangeEvents.BREAKPOINTS_CHANGE, { detail: activeBreakpoints });
		container.dispatchEvent(evt);
	}
	if (!container.breakpointsComputed) {
		container.breakpointsComputed = true;
		container.dispatchEvent(new CustomEvent(MediaStateChangeEvents.BREAKPOINTS_COMPUTED, {
			bubbles: true,
			composed: true
		}));
	}
}
function createBreakpointMap(breakpoints) {
	const pairs = breakpoints.split(/\s+/);
	return Object.fromEntries(pairs.map((pair) => pair.split(":")));
}
function getBreakpoints(breakpoints, width) {
	return Object.keys(breakpoints).filter((name) => {
		return width >= parseInt(breakpoints[name]);
	});
}
var MediaContainer = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$25(this, _handleMutation);
		__privateAdd$25(this, _handlePointerMove$2);
		__privateAdd$25(this, _handlePointerUp$1);
		__privateAdd$25(this, _setInactive);
		__privateAdd$25(this, _setActive);
		__privateAdd$25(this, _scheduleInactive);
		__privateAdd$25(this, _pointerDownTimeStamp, 0);
		__privateAdd$25(this, _currentMedia, null);
		__privateAdd$25(this, _inactiveTimeout, null);
		__privateAdd$25(this, _autohide, void 0);
		this.breakpointsComputed = false;
		__privateAdd$25(this, _mutationObserver$1, new MutationObserver(__privateMethod$12(this, _handleMutation, handleMutation_fn).bind(this)));
		__privateAdd$25(this, _isResizePending, false);
		__privateAdd$25(this, _handleResize, (entry) => {
			if (__privateGet$25(this, _isResizePending)) return;
			setTimeout(() => {
				resizeCallback(entry);
				__privateSet$23(this, _isResizePending, false);
			}, 0);
			__privateSet$23(this, _isResizePending, true);
		});
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			const html = this.constructor.getTemplateHTML(attrs);
			this.shadowRoot.setHTMLUnsafe ? this.shadowRoot.setHTMLUnsafe(html) : this.shadowRoot.innerHTML = html;
		}
		const chainedSlot = this.querySelector(":scope > slot[slot=media]");
		if (chainedSlot) chainedSlot.addEventListener("slotchange", () => {
			if (!chainedSlot.assignedElements({ flatten: true }).length) {
				if (__privateGet$25(this, _currentMedia)) this.mediaUnsetCallback(__privateGet$25(this, _currentMedia));
				return;
			}
			this.handleMediaUpdated(this.media);
		});
	}
	static get observedAttributes() {
		return [Attributes.AUTOHIDE, Attributes.GESTURES_DISABLED].concat(MEDIA_UI_ATTRIBUTE_NAMES$1).filter((name) => ![
			MediaUIAttributes.MEDIA_RENDITION_LIST,
			MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST,
			MediaUIAttributes.MEDIA_CHAPTERS_CUES,
			MediaUIAttributes.MEDIA_WIDTH,
			MediaUIAttributes.MEDIA_HEIGHT,
			MediaUIAttributes.MEDIA_ERROR,
			MediaUIAttributes.MEDIA_ERROR_MESSAGE
		].includes(name));
	}
	attributeChangedCallback(attrName, _oldValue, newValue) {
		if (attrName.toLowerCase() == Attributes.AUTOHIDE) this.autohide = newValue;
	}
	get media() {
		let media = this.querySelector(":scope > [slot=media]");
		if ((media == null ? void 0 : media.nodeName) == "SLOT") media = media.assignedElements({ flatten: true })[0];
		return media;
	}
	async handleMediaUpdated(media) {
		if (!media) return;
		__privateSet$23(this, _currentMedia, media);
		if (media.localName.includes("-")) await GlobalThis.customElements.whenDefined(media.localName);
		this.mediaSetCallback(media);
	}
	connectedCallback() {
		var _a$2;
		__privateGet$25(this, _mutationObserver$1).observe(this, {
			childList: true,
			subtree: true
		});
		observeResize(this, __privateGet$25(this, _handleResize));
		const label = this.getAttribute(Attributes.AUDIO) != null ? t("audio player") : t("video player");
		this.setAttribute("role", "region");
		this.setAttribute("aria-label", label);
		this.handleMediaUpdated(this.media);
		this.setAttribute(Attributes.USER_INACTIVE, "");
		setBreakpoints(this, this.getBoundingClientRect().width);
		this.addEventListener("pointerdown", this);
		this.addEventListener("pointermove", this);
		this.addEventListener("pointerup", this);
		this.addEventListener("mouseleave", this);
		this.addEventListener("keyup", this);
		(_a$2 = GlobalThis.window) == null || _a$2.addEventListener("mouseup", this);
	}
	disconnectedCallback() {
		var _a$2;
		__privateGet$25(this, _mutationObserver$1).disconnect();
		unobserveResize(this, __privateGet$25(this, _handleResize));
		if (this.media) this.mediaUnsetCallback(this.media);
		(_a$2 = GlobalThis.window) == null || _a$2.removeEventListener("mouseup", this);
	}
	/**
	* @abstract
	*/
	mediaSetCallback(_media) {}
	mediaUnsetCallback(_media) {
		__privateSet$23(this, _currentMedia, null);
	}
	handleEvent(event) {
		switch (event.type) {
			case "pointerdown":
				__privateSet$23(this, _pointerDownTimeStamp, event.timeStamp);
				break;
			case "pointermove":
				__privateMethod$12(this, _handlePointerMove$2, handlePointerMove_fn$2).call(this, event);
				break;
			case "pointerup":
				__privateMethod$12(this, _handlePointerUp$1, handlePointerUp_fn$1).call(this, event);
				break;
			case "mouseleave":
				__privateMethod$12(this, _setInactive, setInactive_fn).call(this);
				break;
			case "mouseup":
				this.removeAttribute(Attributes.KEYBOARD_CONTROL);
				break;
			case "keyup":
				__privateMethod$12(this, _scheduleInactive, scheduleInactive_fn).call(this);
				this.setAttribute(Attributes.KEYBOARD_CONTROL, "");
				break;
		}
	}
	set autohide(seconds) {
		const parsedSeconds = Number(seconds);
		__privateSet$23(this, _autohide, isNaN(parsedSeconds) ? 0 : parsedSeconds);
	}
	get autohide() {
		return (__privateGet$25(this, _autohide) === void 0 ? 2 : __privateGet$25(this, _autohide)).toString();
	}
	get breakpoints() {
		return getStringAttr(this, Attributes.BREAKPOINTS);
	}
	set breakpoints(value) {
		setStringAttr(this, Attributes.BREAKPOINTS, value);
	}
	get audio() {
		return getBooleanAttr(this, Attributes.AUDIO);
	}
	set audio(value) {
		setBooleanAttr(this, Attributes.AUDIO, value);
	}
	get gesturesDisabled() {
		return getBooleanAttr(this, Attributes.GESTURES_DISABLED);
	}
	set gesturesDisabled(value) {
		setBooleanAttr(this, Attributes.GESTURES_DISABLED, value);
	}
	get keyboardControl() {
		return getBooleanAttr(this, Attributes.KEYBOARD_CONTROL);
	}
	set keyboardControl(value) {
		setBooleanAttr(this, Attributes.KEYBOARD_CONTROL, value);
	}
	get noAutohide() {
		return getBooleanAttr(this, Attributes.NO_AUTOHIDE);
	}
	set noAutohide(value) {
		setBooleanAttr(this, Attributes.NO_AUTOHIDE, value);
	}
	get autohideOverControls() {
		return getBooleanAttr(this, Attributes.AUTOHIDE_OVER_CONTROLS);
	}
	set autohideOverControls(value) {
		setBooleanAttr(this, Attributes.AUTOHIDE_OVER_CONTROLS, value);
	}
	get userInteractive() {
		return getBooleanAttr(this, Attributes.USER_INACTIVE);
	}
	set userInteractive(value) {
		setBooleanAttr(this, Attributes.USER_INACTIVE, value);
	}
};
_pointerDownTimeStamp = /* @__PURE__ */ new WeakMap();
_currentMedia = /* @__PURE__ */ new WeakMap();
_inactiveTimeout = /* @__PURE__ */ new WeakMap();
_autohide = /* @__PURE__ */ new WeakMap();
_mutationObserver$1 = /* @__PURE__ */ new WeakMap();
_handleMutation = /* @__PURE__ */ new WeakSet();
handleMutation_fn = function(mutationsList) {
	const media = this.media;
	for (const mutation of mutationsList) {
		if (mutation.type !== "childList") continue;
		const removedNodes = mutation.removedNodes;
		for (const node of removedNodes) {
			if (node.slot != "media" || mutation.target != this) continue;
			let previousSibling = mutation.previousSibling && mutation.previousSibling.previousElementSibling;
			if (!previousSibling || !media) this.mediaUnsetCallback(node);
			else {
				let wasFirst = previousSibling.slot !== "media";
				while ((previousSibling = previousSibling.previousSibling) !== null) if (previousSibling.slot == "media") wasFirst = false;
				if (wasFirst) this.mediaUnsetCallback(node);
			}
		}
		if (media) {
			for (const node of mutation.addedNodes) if (node === media) this.handleMediaUpdated(media);
		}
	}
};
_isResizePending = /* @__PURE__ */ new WeakMap();
_handleResize = /* @__PURE__ */ new WeakMap();
_handlePointerMove$2 = /* @__PURE__ */ new WeakSet();
handlePointerMove_fn$2 = function(event) {
	if (event.pointerType !== "mouse") {
		if (event.timeStamp - __privateGet$25(this, _pointerDownTimeStamp) < 250) return;
	}
	__privateMethod$12(this, _setActive, setActive_fn).call(this);
	clearTimeout(__privateGet$25(this, _inactiveTimeout));
	const autohideOverControls = this.hasAttribute(Attributes.AUTOHIDE_OVER_CONTROLS);
	if ([this, this.media].includes(event.target) || autohideOverControls) __privateMethod$12(this, _scheduleInactive, scheduleInactive_fn).call(this);
};
_handlePointerUp$1 = /* @__PURE__ */ new WeakSet();
handlePointerUp_fn$1 = function(event) {
	if (event.pointerType === "touch") {
		const controlsVisible = !this.hasAttribute(Attributes.USER_INACTIVE);
		if ([this, this.media].includes(event.target) && controlsVisible) __privateMethod$12(this, _setInactive, setInactive_fn).call(this);
		else __privateMethod$12(this, _scheduleInactive, scheduleInactive_fn).call(this);
	} else if (event.composedPath().some((el) => ["media-play-button", "media-fullscreen-button"].includes(el == null ? void 0 : el.localName))) __privateMethod$12(this, _scheduleInactive, scheduleInactive_fn).call(this);
};
_setInactive = /* @__PURE__ */ new WeakSet();
setInactive_fn = function() {
	if (__privateGet$25(this, _autohide) < 0) return;
	if (this.hasAttribute(Attributes.USER_INACTIVE)) return;
	this.setAttribute(Attributes.USER_INACTIVE, "");
	const evt = new GlobalThis.CustomEvent(MediaStateChangeEvents.USER_INACTIVE_CHANGE, {
		composed: true,
		bubbles: true,
		detail: true
	});
	this.dispatchEvent(evt);
};
_setActive = /* @__PURE__ */ new WeakSet();
setActive_fn = function() {
	if (!this.hasAttribute(Attributes.USER_INACTIVE)) return;
	this.removeAttribute(Attributes.USER_INACTIVE);
	const evt = new GlobalThis.CustomEvent(MediaStateChangeEvents.USER_INACTIVE_CHANGE, {
		composed: true,
		bubbles: true,
		detail: false
	});
	this.dispatchEvent(evt);
};
_scheduleInactive = /* @__PURE__ */ new WeakSet();
scheduleInactive_fn = function() {
	__privateMethod$12(this, _setActive, setActive_fn).call(this);
	clearTimeout(__privateGet$25(this, _inactiveTimeout));
	const autohide = parseInt(this.autohide);
	if (autohide < 0) return;
	__privateSet$23(this, _inactiveTimeout, setTimeout(() => {
		__privateMethod$12(this, _setInactive, setInactive_fn).call(this);
	}, autohide * 1e3));
};
MediaContainer.shadowRootOptions = { mode: "open" };
MediaContainer.getTemplateHTML = getTemplateHTML$15;
if (!GlobalThis.customElements.get("media-container")) GlobalThis.customElements.define("media-container", MediaContainer);

//#endregion
//#region node_modules/media-chrome/dist/utils/attribute-token-list.js
var __accessCheck$24 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$24 = (obj, member, getter) => {
	__accessCheck$24(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$24 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$22 = (obj, member, value, setter) => {
	__accessCheck$24(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _el, _attr, _defaultSet, _tokenSet, _tokens, tokens_get;
var AttributeTokenList = class {
	constructor(el, attr, { defaultValue } = { defaultValue: void 0 }) {
		__privateAdd$24(this, _tokens);
		__privateAdd$24(this, _el, void 0);
		__privateAdd$24(this, _attr, void 0);
		__privateAdd$24(this, _defaultSet, void 0);
		__privateAdd$24(this, _tokenSet, /* @__PURE__ */ new Set());
		__privateSet$22(this, _el, el);
		__privateSet$22(this, _attr, attr);
		__privateSet$22(this, _defaultSet, new Set(defaultValue));
	}
	[Symbol.iterator]() {
		return __privateGet$24(this, _tokens, tokens_get).values();
	}
	get length() {
		return __privateGet$24(this, _tokens, tokens_get).size;
	}
	get value() {
		var _a$2;
		return (_a$2 = [...__privateGet$24(this, _tokens, tokens_get)].join(" ")) != null ? _a$2 : "";
	}
	set value(val) {
		var _a$2;
		if (val === this.value) return;
		__privateSet$22(this, _tokenSet, /* @__PURE__ */ new Set());
		this.add(...(_a$2 = val == null ? void 0 : val.split(" ")) != null ? _a$2 : []);
	}
	toString() {
		return this.value;
	}
	item(index) {
		return [...__privateGet$24(this, _tokens, tokens_get)][index];
	}
	values() {
		return __privateGet$24(this, _tokens, tokens_get).values();
	}
	forEach(callback, thisArg) {
		__privateGet$24(this, _tokens, tokens_get).forEach(callback, thisArg);
	}
	add(...tokens) {
		var _a$2, _b;
		tokens.forEach((t$1) => __privateGet$24(this, _tokenSet).add(t$1));
		if (this.value === "" && !((_a$2 = __privateGet$24(this, _el)) == null ? void 0 : _a$2.hasAttribute(`${__privateGet$24(this, _attr)}`))) return;
		(_b = __privateGet$24(this, _el)) == null || _b.setAttribute(`${__privateGet$24(this, _attr)}`, `${this.value}`);
	}
	remove(...tokens) {
		var _a$2;
		tokens.forEach((t$1) => __privateGet$24(this, _tokenSet).delete(t$1));
		(_a$2 = __privateGet$24(this, _el)) == null || _a$2.setAttribute(`${__privateGet$24(this, _attr)}`, `${this.value}`);
	}
	contains(token) {
		return __privateGet$24(this, _tokens, tokens_get).has(token);
	}
	toggle(token, force) {
		if (typeof force !== "undefined") if (force) {
			this.add(token);
			return true;
		} else {
			this.remove(token);
			return false;
		}
		if (this.contains(token)) {
			this.remove(token);
			return false;
		}
		this.add(token);
		return true;
	}
	replace(oldToken, newToken) {
		this.remove(oldToken);
		this.add(newToken);
		return oldToken === newToken;
	}
};
_el = /* @__PURE__ */ new WeakMap();
_attr = /* @__PURE__ */ new WeakMap();
_defaultSet = /* @__PURE__ */ new WeakMap();
_tokenSet = /* @__PURE__ */ new WeakMap();
_tokens = /* @__PURE__ */ new WeakSet();
tokens_get = function() {
	return __privateGet$24(this, _tokenSet).size ? __privateGet$24(this, _tokenSet) : __privateGet$24(this, _defaultSet);
};

//#endregion
//#region node_modules/media-chrome/dist/utils/captions.js
var splitTextTracksStr = (textTracksStr = "") => textTracksStr.split(/\s+/);
var parseTextTrackStr = (textTrackStr = "") => {
	const [kind, language, encodedLabel] = textTrackStr.split(":");
	const label = encodedLabel ? decodeURIComponent(encodedLabel) : void 0;
	return {
		kind: kind === "cc" ? TextTrackKinds.CAPTIONS : TextTrackKinds.SUBTITLES,
		language,
		label
	};
};
var parseTextTracksStr = (textTracksStr = "", textTrackLikeObj = {}) => {
	return splitTextTracksStr(textTracksStr).map((textTrackStr) => {
		const textTrackObj = parseTextTrackStr(textTrackStr);
		return {
			...textTrackLikeObj,
			...textTrackObj
		};
	});
};
var parseTracks = (trackOrTracks) => {
	if (!trackOrTracks) return [];
	if (Array.isArray(trackOrTracks)) return trackOrTracks.map((trackObjOrStr) => {
		if (typeof trackObjOrStr === "string") return parseTextTrackStr(trackObjOrStr);
		return trackObjOrStr;
	});
	if (typeof trackOrTracks === "string") return parseTextTracksStr(trackOrTracks);
	return [trackOrTracks];
};
var formatTextTrackObj = ({ kind, label, language } = { kind: "subtitles" }) => {
	if (!label) return language;
	return `${kind === "captions" ? "cc" : "sb"}:${language}:${encodeURIComponent(label)}`;
};
var stringifyTextTrackList = (textTracks = []) => {
	return Array.prototype.map.call(textTracks, formatTextTrackObj).join(" ");
};
var isMatchingPropOf = (key, value) => (obj) => obj[key] === value;
var textTrackObjAsPred = (filterObj) => {
	const preds = Object.entries(filterObj).map(([key, value]) => {
		return isMatchingPropOf(key, value);
	});
	return (textTrack) => preds.every((pred) => pred(textTrack));
};
var updateTracksModeTo = (mode, tracks = [], tracksToUpdate = []) => {
	const preds = parseTracks(tracksToUpdate).map(textTrackObjAsPred);
	const isTrackToUpdate = (textTrack) => {
		return preds.some((pred) => pred(textTrack));
	};
	Array.from(tracks).filter(isTrackToUpdate).forEach((textTrack) => {
		textTrack.mode = mode;
	});
};
var getTextTracksList = (media, filterPredOrObj = () => true) => {
	if (!(media == null ? void 0 : media.textTracks)) return [];
	const filterPred = typeof filterPredOrObj === "function" ? filterPredOrObj : textTrackObjAsPred(filterPredOrObj);
	return Array.from(media.textTracks).filter(filterPred);
};
var areSubsOn = (el) => {
	var _a$2;
	return !!((_a$2 = el.mediaSubtitlesShowing) == null ? void 0 : _a$2.length) || el.hasAttribute(MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);
};

//#endregion
//#region node_modules/media-chrome/dist/utils/fullscreen-api.js
var enterFullscreen = (stateOwners) => {
	var _a$2;
	const { media, fullscreenElement } = stateOwners;
	try {
		const enterFullscreenKey = fullscreenElement && "requestFullscreen" in fullscreenElement ? "requestFullscreen" : fullscreenElement && "webkitRequestFullScreen" in fullscreenElement ? "webkitRequestFullScreen" : void 0;
		if (enterFullscreenKey) {
			const maybePromise = (_a$2 = fullscreenElement[enterFullscreenKey]) == null ? void 0 : _a$2.call(fullscreenElement);
			if (maybePromise instanceof Promise) return maybePromise.catch(() => {});
		} else if (media == null ? void 0 : media.webkitEnterFullscreen) media.webkitEnterFullscreen();
		else if (media == null ? void 0 : media.requestFullscreen) media.requestFullscreen();
	} catch (e$1) {
		console.error(e$1);
	}
};
var exitFullscreenKey = "exitFullscreen" in Document$1 ? "exitFullscreen" : "webkitExitFullscreen" in Document$1 ? "webkitExitFullscreen" : "webkitCancelFullScreen" in Document$1 ? "webkitCancelFullScreen" : void 0;
var exitFullscreen = (stateOwners) => {
	var _a$2;
	const { documentElement } = stateOwners;
	if (exitFullscreenKey) {
		const maybePromise = (_a$2 = documentElement == null ? void 0 : documentElement[exitFullscreenKey]) == null ? void 0 : _a$2.call(documentElement);
		if (maybePromise instanceof Promise) return maybePromise.catch(() => {});
	}
};
var fullscreenElementKey = "fullscreenElement" in Document$1 ? "fullscreenElement" : "webkitFullscreenElement" in Document$1 ? "webkitFullscreenElement" : void 0;
var getFullscreenElement = (stateOwners) => {
	const { documentElement, media } = stateOwners;
	const docFullscreenElement = documentElement == null ? void 0 : documentElement[fullscreenElementKey];
	if (!docFullscreenElement && "webkitDisplayingFullscreen" in media && "webkitPresentationMode" in media && media.webkitDisplayingFullscreen && media.webkitPresentationMode === WebkitPresentationModes.FULLSCREEN) return media;
	return docFullscreenElement;
};
var isFullscreen = (stateOwners) => {
	var _a$2;
	const { media, documentElement, fullscreenElement = media } = stateOwners;
	if (!media || !documentElement) return false;
	const currentFullscreenElement = getFullscreenElement(stateOwners);
	if (!currentFullscreenElement) return false;
	if (currentFullscreenElement === fullscreenElement || currentFullscreenElement === media) return true;
	if (currentFullscreenElement.localName.includes("-")) {
		let currentRoot = currentFullscreenElement.shadowRoot;
		if (!(fullscreenElementKey in currentRoot)) return containsComposedNode(
			currentFullscreenElement,
			/** @TODO clean up type assumptions (e.g. Node) (CJP) */
			fullscreenElement
		);
		while (currentRoot == null ? void 0 : currentRoot[fullscreenElementKey]) {
			if (currentRoot[fullscreenElementKey] === fullscreenElement) return true;
			currentRoot = (_a$2 = currentRoot[fullscreenElementKey]) == null ? void 0 : _a$2.shadowRoot;
		}
	}
	return false;
};
var fullscreenEnabledKey = "fullscreenEnabled" in Document$1 ? "fullscreenEnabled" : "webkitFullscreenEnabled" in Document$1 ? "webkitFullscreenEnabled" : void 0;
var isFullscreenEnabled = (stateOwners) => {
	const { documentElement, media } = stateOwners;
	return !!(documentElement == null ? void 0 : documentElement[fullscreenEnabledKey]) || media && "webkitSupportsFullscreen" in media;
};

//#endregion
//#region node_modules/media-chrome/dist/utils/platform-tests.js
var testMediaEl;
var getTestMediaEl = () => {
	var _a$2, _b;
	if (testMediaEl) return testMediaEl;
	testMediaEl = (_b = (_a$2 = Document$1) == null ? void 0 : _a$2.createElement) == null ? void 0 : _b.call(_a$2, "video");
	return testMediaEl;
};
var hasVolumeSupportAsync = async (mediaEl = getTestMediaEl()) => {
	if (!mediaEl) return false;
	const prevVolume = mediaEl.volume;
	mediaEl.volume = prevVolume / 2 + .1;
	const abortController = new AbortController();
	const volumeSupported$1 = await Promise.race([dispatchedVolumeChange(mediaEl, abortController.signal), volumeChanged(mediaEl, prevVolume)]);
	abortController.abort();
	return volumeSupported$1;
};
var dispatchedVolumeChange = (mediaEl, signal) => {
	return new Promise((resolve) => {
		mediaEl.addEventListener("volumechange", () => resolve(true), { signal });
	});
};
var volumeChanged = async (mediaEl, prevVolume) => {
	for (let i$1 = 0; i$1 < 10; i$1++) {
		if (mediaEl.volume === prevVolume) return false;
		await delay(10);
	}
	return mediaEl.volume !== prevVolume;
};
var isSafari = /.*Version\/.*Safari\/.*/.test(GlobalThis.navigator.userAgent);
var hasPipSupport = (mediaEl = getTestMediaEl()) => {
	if (GlobalThis.matchMedia("(display-mode: standalone)").matches && isSafari) return false;
	return typeof (mediaEl == null ? void 0 : mediaEl.requestPictureInPicture) === "function";
};
var hasFullscreenSupport = (mediaEl = getTestMediaEl()) => {
	return isFullscreenEnabled({
		documentElement: Document$1,
		media: mediaEl
	});
};
var fullscreenSupported = hasFullscreenSupport();
var pipSupported = hasPipSupport();
var airplaySupported = !!GlobalThis.WebKitPlaybackTargetAvailabilityEvent;
var castSupported = !!GlobalThis.chrome;

//#endregion
//#region node_modules/media-chrome/dist/media-store/util.js
var getSubtitleTracks = (stateOwners) => {
	return getTextTracksList(stateOwners.media, (textTrack) => {
		return [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(textTrack.kind);
	}).sort((a$2, b$4) => a$2.kind >= b$4.kind ? 1 : -1);
};
var getShowingSubtitleTracks = (stateOwners) => {
	return getTextTracksList(stateOwners.media, (textTrack) => {
		return textTrack.mode === TextTrackModes.SHOWING && [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(textTrack.kind);
	});
};
var toggleSubtitleTracks = (stateOwners, force) => {
	const tracks = getSubtitleTracks(stateOwners);
	const showingSubitleTracks = getShowingSubtitleTracks(stateOwners);
	const subtitlesShowing = !!showingSubitleTracks.length;
	if (!tracks.length) return;
	if (force === false || subtitlesShowing && force !== true) updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);
	else if (force === true || !subtitlesShowing && force !== false) {
		let subTrack = tracks[0];
		const { options } = stateOwners;
		if (!(options == null ? void 0 : options.noSubtitlesLangPref)) {
			const subtitlesPref = globalThis.localStorage.getItem("media-chrome-pref-subtitles-lang");
			const userLangPrefs = subtitlesPref ? [subtitlesPref, ...globalThis.navigator.languages] : globalThis.navigator.languages;
			const preferredAvailableSubs = tracks.filter((textTrack) => {
				return userLangPrefs.some((lang) => textTrack.language.toLowerCase().startsWith(lang.split("-")[0]));
			}).sort((textTrackA, textTrackB) => {
				const idxA = userLangPrefs.findIndex((lang) => textTrackA.language.toLowerCase().startsWith(lang.split("-")[0]));
				const idxB = userLangPrefs.findIndex((lang) => textTrackB.language.toLowerCase().startsWith(lang.split("-")[0]));
				return idxA - idxB;
			});
			if (preferredAvailableSubs[0]) subTrack = preferredAvailableSubs[0];
		}
		const { language, label, kind } = subTrack;
		updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);
		updateTracksModeTo(TextTrackModes.SHOWING, tracks, [{
			language,
			label,
			kind
		}]);
	}
};
var areValuesEq = (x$5, y$4) => {
	if (x$5 === y$4) return true;
	if (x$5 == null || y$4 == null) return false;
	if (typeof x$5 !== typeof y$4) return false;
	if (typeof x$5 === "number" && Number.isNaN(x$5) && Number.isNaN(y$4)) return true;
	if (typeof x$5 !== "object") return false;
	if (Array.isArray(x$5)) return areArraysEq(x$5, y$4);
	return Object.entries(x$5).every(([key, value]) => key in y$4 && areValuesEq(value, y$4[key]));
};
var areArraysEq = (xs, ys) => {
	const xIsArray = Array.isArray(xs);
	const yIsArray = Array.isArray(ys);
	if (xIsArray !== yIsArray) return false;
	if (!(xIsArray || yIsArray)) return true;
	if (xs.length !== ys.length) return false;
	return xs.every((x$5, i$1) => areValuesEq(x$5, ys[i$1]));
};

//#endregion
//#region node_modules/media-chrome/dist/media-store/state-mediator.js
var StreamTypeValues = Object.values(StreamTypes);
var volumeSupported;
var volumeSupportPromise = hasVolumeSupportAsync().then((supported) => {
	volumeSupported = supported;
	return volumeSupported;
});
var prepareStateOwners = async (...stateOwners) => {
	await Promise.all(stateOwners.filter((x$5) => x$5).map(async (stateOwner) => {
		if (!("localName" in stateOwner && stateOwner instanceof GlobalThis.HTMLElement)) return;
		const name = stateOwner.localName;
		if (!name.includes("-")) return;
		const classDef = GlobalThis.customElements.get(name);
		if (classDef && stateOwner instanceof classDef) return;
		await GlobalThis.customElements.whenDefined(name);
		GlobalThis.customElements.upgrade(stateOwner);
	}));
};
var domParser = new GlobalThis.DOMParser();
var parseHtmlToText = (text) => text ? domParser.parseFromString(text, "text/html").body.textContent || text : text;
var stateMediator = {
	mediaError: {
		get(stateOwners, event) {
			const { media } = stateOwners;
			if ((event == null ? void 0 : event.type) === "playing") return;
			return media == null ? void 0 : media.error;
		},
		mediaEvents: [
			"emptied",
			"error",
			"playing"
		]
	},
	mediaErrorCode: {
		get(stateOwners, event) {
			var _a$2;
			const { media } = stateOwners;
			if ((event == null ? void 0 : event.type) === "playing") return;
			return (_a$2 = media == null ? void 0 : media.error) == null ? void 0 : _a$2.code;
		},
		mediaEvents: [
			"emptied",
			"error",
			"playing"
		]
	},
	mediaErrorMessage: {
		get(stateOwners, event) {
			var _a$2, _b;
			const { media } = stateOwners;
			if ((event == null ? void 0 : event.type) === "playing") return;
			return (_b = (_a$2 = media == null ? void 0 : media.error) == null ? void 0 : _a$2.message) != null ? _b : "";
		},
		mediaEvents: [
			"emptied",
			"error",
			"playing"
		]
	},
	mediaWidth: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return (_a$2 = media == null ? void 0 : media.videoWidth) != null ? _a$2 : 0;
		},
		mediaEvents: ["resize"]
	},
	mediaHeight: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return (_a$2 = media == null ? void 0 : media.videoHeight) != null ? _a$2 : 0;
		},
		mediaEvents: ["resize"]
	},
	mediaPaused: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return (_a$2 = media == null ? void 0 : media.paused) != null ? _a$2 : true;
		},
		set(value, stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			if (!media) return;
			if (value) media.pause();
			else (_a$2 = media.play()) == null || _a$2.catch(() => {});
		},
		mediaEvents: [
			"play",
			"playing",
			"pause",
			"emptied"
		]
	},
	mediaHasPlayed: {
		get(stateOwners, event) {
			const { media } = stateOwners;
			if (!media) return false;
			if (!event) return !media.paused;
			return event.type === "playing";
		},
		mediaEvents: ["playing", "emptied"]
	},
	mediaEnded: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return (_a$2 = media == null ? void 0 : media.ended) != null ? _a$2 : false;
		},
		mediaEvents: [
			"seeked",
			"ended",
			"emptied"
		]
	},
	mediaPlaybackRate: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return (_a$2 = media == null ? void 0 : media.playbackRate) != null ? _a$2 : 1;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!media) return;
			if (!Number.isFinite(+value)) return;
			media.playbackRate = +value;
		},
		mediaEvents: ["ratechange", "loadstart"]
	},
	mediaMuted: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return (_a$2 = media == null ? void 0 : media.muted) != null ? _a$2 : false;
		},
		set(value, stateOwners) {
			const { media, options: { noMutedPref } = {} } = stateOwners;
			if (!media) return;
			if (!media.hasAttribute("muted") && !noMutedPref) try {
				GlobalThis.localStorage.setItem("media-chrome-pref-muted", value ? "true" : "false");
			} catch (e$1) {
				console.debug("Error setting muted pref", e$1);
			}
			media.muted = value;
		},
		mediaEvents: ["volumechange"],
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			const { options: { noMutedPref } } = stateOwners;
			const { media } = stateOwners;
			if (!media || media.muted || noMutedPref) return;
			try {
				const mutedPref = GlobalThis.localStorage.getItem("media-chrome-pref-muted") === "true";
				stateMediator.mediaMuted.set(mutedPref, stateOwners);
				handler(mutedPref);
			} catch (e$1) {
				console.debug("Error getting muted pref", e$1);
			}
		}]
	},
	mediaVolume: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return (_a$2 = media == null ? void 0 : media.volume) != null ? _a$2 : 1;
		},
		set(value, stateOwners) {
			const { media, options: { noVolumePref } = {} } = stateOwners;
			if (!media) return;
			try {
				if (value == null) GlobalThis.localStorage.removeItem("media-chrome-pref-volume");
				else if (!media.hasAttribute("muted") && !noVolumePref) GlobalThis.localStorage.setItem("media-chrome-pref-volume", value.toString());
			} catch (e$1) {
				console.debug("Error setting volume pref", e$1);
			}
			if (!Number.isFinite(+value)) return;
			media.volume = +value;
		},
		mediaEvents: ["volumechange"],
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			const { options: { noVolumePref } } = stateOwners;
			if (noVolumePref) return;
			try {
				const { media } = stateOwners;
				if (!media) return;
				const volumePref = GlobalThis.localStorage.getItem("media-chrome-pref-volume");
				if (volumePref == null) return;
				stateMediator.mediaVolume.set(+volumePref, stateOwners);
				handler(+volumePref);
			} catch (e$1) {
				console.debug("Error getting volume pref", e$1);
			}
		}]
	},
	mediaVolumeLevel: {
		get(stateOwners) {
			const { media } = stateOwners;
			if (typeof (media == null ? void 0 : media.volume) == "undefined") return "high";
			if (media.muted || media.volume === 0) return "off";
			if (media.volume < .5) return "low";
			if (media.volume < .75) return "medium";
			return "high";
		},
		mediaEvents: ["volumechange"]
	},
	mediaCurrentTime: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return (_a$2 = media == null ? void 0 : media.currentTime) != null ? _a$2 : 0;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!media || !isValidNumber(value)) return;
			media.currentTime = value;
		},
		mediaEvents: ["timeupdate", "loadedmetadata"]
	},
	mediaDuration: {
		get(stateOwners) {
			const { media, options: { defaultDuration } = {} } = stateOwners;
			if (defaultDuration && (!media || !media.duration || Number.isNaN(media.duration) || !Number.isFinite(media.duration))) return defaultDuration;
			return Number.isFinite(media == null ? void 0 : media.duration) ? media.duration : NaN;
		},
		mediaEvents: [
			"durationchange",
			"loadedmetadata",
			"emptied"
		]
	},
	mediaLoading: {
		get(stateOwners) {
			const { media } = stateOwners;
			return (media == null ? void 0 : media.readyState) < 3;
		},
		mediaEvents: [
			"waiting",
			"playing",
			"emptied"
		]
	},
	mediaSeekable: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			if (!((_a$2 = media == null ? void 0 : media.seekable) == null ? void 0 : _a$2.length)) return void 0;
			const start = media.seekable.start(0);
			const end = media.seekable.end(media.seekable.length - 1);
			if (!start && !end) return void 0;
			return [Number(start.toFixed(3)), Number(end.toFixed(3))];
		},
		mediaEvents: [
			"loadedmetadata",
			"emptied",
			"progress",
			"seekablechange"
		]
	},
	mediaBuffered: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			const timeRanges = (_a$2 = media == null ? void 0 : media.buffered) != null ? _a$2 : [];
			return Array.from(timeRanges).map((_$2, i$1) => [Number(timeRanges.start(i$1).toFixed(3)), Number(timeRanges.end(i$1).toFixed(3))]);
		},
		mediaEvents: ["progress", "emptied"]
	},
	mediaStreamType: {
		get(stateOwners) {
			const { media, options: { defaultStreamType } = {} } = stateOwners;
			const usedDefaultStreamType = [StreamTypes.LIVE, StreamTypes.ON_DEMAND].includes(defaultStreamType) ? defaultStreamType : void 0;
			if (!media) return usedDefaultStreamType;
			const { streamType } = media;
			if (StreamTypeValues.includes(streamType)) {
				if (streamType === StreamTypes.UNKNOWN) return usedDefaultStreamType;
				return streamType;
			}
			const duration = media.duration;
			if (duration === Infinity) return StreamTypes.LIVE;
			else if (Number.isFinite(duration)) return StreamTypes.ON_DEMAND;
			return usedDefaultStreamType;
		},
		mediaEvents: [
			"emptied",
			"durationchange",
			"loadedmetadata",
			"streamtypechange"
		]
	},
	mediaTargetLiveWindow: {
		get(stateOwners) {
			const { media } = stateOwners;
			if (!media) return NaN;
			const { targetLiveWindow } = media;
			const streamType = stateMediator.mediaStreamType.get(stateOwners);
			if ((targetLiveWindow == null || Number.isNaN(targetLiveWindow)) && streamType === StreamTypes.LIVE) return 0;
			return targetLiveWindow;
		},
		mediaEvents: [
			"emptied",
			"durationchange",
			"loadedmetadata",
			"streamtypechange",
			"targetlivewindowchange"
		]
	},
	mediaTimeIsLive: {
		get(stateOwners) {
			const { media, options: { liveEdgeOffset = 10 } = {} } = stateOwners;
			if (!media) return false;
			if (typeof media.liveEdgeStart === "number") {
				if (Number.isNaN(media.liveEdgeStart)) return false;
				return media.currentTime >= media.liveEdgeStart;
			}
			if (!(stateMediator.mediaStreamType.get(stateOwners) === StreamTypes.LIVE)) return false;
			const seekable = media.seekable;
			if (!seekable) return true;
			if (!seekable.length) return false;
			const liveEdgeStart = seekable.end(seekable.length - 1) - liveEdgeOffset;
			return media.currentTime >= liveEdgeStart;
		},
		mediaEvents: [
			"playing",
			"timeupdate",
			"progress",
			"waiting",
			"emptied"
		]
	},
	mediaSubtitlesList: {
		get(stateOwners) {
			return getSubtitleTracks(stateOwners).map(({ kind, label, language }) => ({
				kind,
				label,
				language
			}));
		},
		mediaEvents: ["loadstart"],
		textTracksEvents: ["addtrack", "removetrack"]
	},
	mediaSubtitlesShowing: {
		get(stateOwners) {
			return getShowingSubtitleTracks(stateOwners).map(({ kind, label, language }) => ({
				kind,
				label,
				language
			}));
		},
		mediaEvents: ["loadstart"],
		textTracksEvents: [
			"addtrack",
			"removetrack",
			"change"
		],
		stateOwnersUpdateHandlers: [(_handler, stateOwners) => {
			var _a$2, _b;
			const { media, options } = stateOwners;
			if (!media) return;
			const updateDefaultSubtitlesCallback = (event) => {
				var _a2;
				if (!options.defaultSubtitles) return;
				if (event && ![TextTrackKinds.CAPTIONS, TextTrackKinds.SUBTITLES].includes((_a2 = event == null ? void 0 : event.track) == null ? void 0 : _a2.kind)) return;
				toggleSubtitleTracks(stateOwners, true);
			};
			media.addEventListener("loadstart", updateDefaultSubtitlesCallback);
			(_a$2 = media.textTracks) == null || _a$2.addEventListener("addtrack", updateDefaultSubtitlesCallback);
			(_b = media.textTracks) == null || _b.addEventListener("removetrack", updateDefaultSubtitlesCallback);
			return () => {
				var _a2, _b2;
				media.removeEventListener("loadstart", updateDefaultSubtitlesCallback);
				(_a2 = media.textTracks) == null || _a2.removeEventListener("addtrack", updateDefaultSubtitlesCallback);
				(_b2 = media.textTracks) == null || _b2.removeEventListener("removetrack", updateDefaultSubtitlesCallback);
			};
		}]
	},
	mediaChaptersCues: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			if (!media) return [];
			const [chaptersTrack] = getTextTracksList(media, { kind: TextTrackKinds.CHAPTERS });
			return Array.from((_a$2 = chaptersTrack == null ? void 0 : chaptersTrack.cues) != null ? _a$2 : []).map(({ text, startTime, endTime }) => ({
				text: parseHtmlToText(text),
				startTime,
				endTime
			}));
		},
		mediaEvents: ["loadstart", "loadedmetadata"],
		textTracksEvents: [
			"addtrack",
			"removetrack",
			"change"
		],
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			var _a$2;
			const { media } = stateOwners;
			if (!media) return;
			const chaptersTrack = media.querySelector("track[kind=\"chapters\"][default][src]");
			const shadowChaptersTrack = (_a$2 = media.shadowRoot) == null ? void 0 : _a$2.querySelector(":is(video,audio) > track[kind=\"chapters\"][default][src]");
			chaptersTrack?.addEventListener("load", handler);
			shadowChaptersTrack?.addEventListener("load", handler);
			return () => {
				chaptersTrack?.removeEventListener("load", handler);
				shadowChaptersTrack?.removeEventListener("load", handler);
			};
		}]
	},
	mediaIsPip: {
		get(stateOwners) {
			var _a$2, _b;
			const { media, documentElement } = stateOwners;
			if (!media || !documentElement) return false;
			if (!documentElement.pictureInPictureElement) return false;
			if (documentElement.pictureInPictureElement === media) return true;
			if (documentElement.pictureInPictureElement instanceof HTMLMediaElement) {
				if (!((_a$2 = media.localName) == null ? void 0 : _a$2.includes("-"))) return false;
				return containsComposedNode(media, documentElement.pictureInPictureElement);
			}
			if (documentElement.pictureInPictureElement.localName.includes("-")) {
				let currentRoot = documentElement.pictureInPictureElement.shadowRoot;
				while (currentRoot == null ? void 0 : currentRoot.pictureInPictureElement) {
					if (currentRoot.pictureInPictureElement === media) return true;
					currentRoot = (_b = currentRoot.pictureInPictureElement) == null ? void 0 : _b.shadowRoot;
				}
			}
			return false;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!media) return;
			if (value) {
				if (!Document$1.pictureInPictureEnabled) {
					console.warn("MediaChrome: Picture-in-picture is not enabled");
					return;
				}
				if (!media.requestPictureInPicture) {
					console.warn("MediaChrome: The current media does not support picture-in-picture");
					return;
				}
				const warnNotReady = () => {
					console.warn("MediaChrome: The media is not ready for picture-in-picture. It must have a readyState > 0.");
				};
				media.requestPictureInPicture().catch((err) => {
					if (err.code === 11) {
						if (!media.src) {
							console.warn("MediaChrome: The media is not ready for picture-in-picture. It must have a src set.");
							return;
						}
						if (media.readyState === 0 && media.preload === "none") {
							const cleanup = () => {
								media.removeEventListener("loadedmetadata", tryPip);
								media.preload = "none";
							};
							const tryPip = () => {
								media.requestPictureInPicture().catch(warnNotReady);
								cleanup();
							};
							media.addEventListener("loadedmetadata", tryPip);
							media.preload = "metadata";
							setTimeout(() => {
								if (media.readyState === 0) warnNotReady();
								cleanup();
							}, 1e3);
						} else throw err;
					} else throw err;
				});
			} else if (Document$1.pictureInPictureElement) Document$1.exitPictureInPicture();
		},
		mediaEvents: ["enterpictureinpicture", "leavepictureinpicture"]
	},
	mediaRenditionList: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return [...(_a$2 = media == null ? void 0 : media.videoRenditions) != null ? _a$2 : []].map((videoRendition) => ({ ...videoRendition }));
		},
		mediaEvents: ["emptied", "loadstart"],
		videoRenditionsEvents: ["addrendition", "removerendition"]
	},
	mediaRenditionSelected: {
		get(stateOwners) {
			var _a$2, _b, _c;
			const { media } = stateOwners;
			return (_c = (_b = media == null ? void 0 : media.videoRenditions) == null ? void 0 : _b[(_a$2 = media.videoRenditions) == null ? void 0 : _a$2.selectedIndex]) == null ? void 0 : _c.id;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.videoRenditions)) {
				console.warn("MediaController: Rendition selection not supported by this media.");
				return;
			}
			const renditionId = value;
			const index = Array.prototype.findIndex.call(media.videoRenditions, (r$3) => r$3.id == renditionId);
			if (media.videoRenditions.selectedIndex != index) media.videoRenditions.selectedIndex = index;
		},
		mediaEvents: ["emptied"],
		videoRenditionsEvents: [
			"addrendition",
			"removerendition",
			"change"
		]
	},
	mediaAudioTrackList: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			return [...(_a$2 = media == null ? void 0 : media.audioTracks) != null ? _a$2 : []];
		},
		mediaEvents: ["emptied", "loadstart"],
		audioTracksEvents: ["addtrack", "removetrack"]
	},
	mediaAudioTrackEnabled: {
		get(stateOwners) {
			var _a$2, _b;
			const { media } = stateOwners;
			return (_b = [...(_a$2 = media == null ? void 0 : media.audioTracks) != null ? _a$2 : []].find((audioTrack) => audioTrack.enabled)) == null ? void 0 : _b.id;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.audioTracks)) {
				console.warn("MediaChrome: Audio track selection not supported by this media.");
				return;
			}
			const audioTrackId = value;
			for (const track of media.audioTracks) track.enabled = audioTrackId == track.id;
		},
		mediaEvents: ["emptied"],
		audioTracksEvents: [
			"addtrack",
			"removetrack",
			"change"
		]
	},
	mediaIsFullscreen: {
		get(stateOwners) {
			return isFullscreen(stateOwners);
		},
		set(value, stateOwners) {
			if (!value) exitFullscreen(stateOwners);
			else enterFullscreen(stateOwners);
		},
		rootEvents: ["fullscreenchange", "webkitfullscreenchange"],
		mediaEvents: [
			"webkitbeginfullscreen",
			"webkitendfullscreen",
			"webkitpresentationmodechanged"
		]
	},
	mediaIsCasting: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.remote) || ((_a$2 = media.remote) == null ? void 0 : _a$2.state) === "disconnected") return false;
			return !!media.remote.state;
		},
		set(value, stateOwners) {
			var _a$2, _b;
			const { media } = stateOwners;
			if (!media) return;
			if (value && ((_a$2 = media.remote) == null ? void 0 : _a$2.state) !== "disconnected") return;
			if (!value && ((_b = media.remote) == null ? void 0 : _b.state) !== "connected") return;
			if (typeof media.remote.prompt !== "function") {
				console.warn("MediaChrome: Casting is not supported in this environment");
				return;
			}
			media.remote.prompt().catch(() => {});
		},
		remoteEvents: [
			"connect",
			"connecting",
			"disconnect"
		]
	},
	mediaIsAirplaying: {
		get() {
			return false;
		},
		set(_value$1, stateOwners) {
			const { media } = stateOwners;
			if (!media) return;
			if (!(media.webkitShowPlaybackTargetPicker && GlobalThis.WebKitPlaybackTargetAvailabilityEvent)) {
				console.error("MediaChrome: received a request to select AirPlay but AirPlay is not supported in this environment");
				return;
			}
			media.webkitShowPlaybackTargetPicker();
		},
		mediaEvents: ["webkitcurrentplaybacktargetiswirelesschanged"]
	},
	mediaFullscreenUnavailable: { get(stateOwners) {
		const { media } = stateOwners;
		if (!fullscreenSupported || !hasFullscreenSupport(media)) return AvailabilityStates.UNSUPPORTED;
	} },
	mediaPipUnavailable: { get(stateOwners) {
		const { media } = stateOwners;
		if (!pipSupported || !hasPipSupport(media)) return AvailabilityStates.UNSUPPORTED;
		else if (media == null ? void 0 : media.disablePictureInPicture) return AvailabilityStates.UNAVAILABLE;
	} },
	mediaVolumeUnavailable: {
		get(stateOwners) {
			const { media } = stateOwners;
			if (volumeSupported === false || (media == null ? void 0 : media.volume) == void 0) return AvailabilityStates.UNSUPPORTED;
		},
		stateOwnersUpdateHandlers: [(handler) => {
			if (volumeSupported == null) volumeSupportPromise.then((supported) => handler(supported ? void 0 : AvailabilityStates.UNSUPPORTED));
		}]
	},
	mediaCastUnavailable: {
		get(stateOwners, { availability = "not-available" } = {}) {
			var _a$2;
			const { media } = stateOwners;
			if (!castSupported || !((_a$2 = media == null ? void 0 : media.remote) == null ? void 0 : _a$2.state)) return AvailabilityStates.UNSUPPORTED;
			if (availability == null || availability === "available") return void 0;
			return AvailabilityStates.UNAVAILABLE;
		},
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			var _a$2;
			const { media } = stateOwners;
			if (!media) return;
			if (!(media.disableRemotePlayback || media.hasAttribute("disableremoteplayback"))) (_a$2 = media == null ? void 0 : media.remote) == null || _a$2.watchAvailability((availabilityBool) => {
				handler({ availability: availabilityBool ? "available" : "not-available" });
			}).catch((error) => {
				if (error.name === "NotSupportedError") handler({ availability: null });
				else handler({ availability: "not-available" });
			});
			return () => {
				var _a2;
				(_a2 = media == null ? void 0 : media.remote) == null || _a2.cancelWatchAvailability().catch(() => {});
			};
		}]
	},
	mediaAirplayUnavailable: {
		get(_stateOwners, event) {
			if (!airplaySupported) return AvailabilityStates.UNSUPPORTED;
			if ((event == null ? void 0 : event.availability) === "not-available") return AvailabilityStates.UNAVAILABLE;
		},
		mediaEvents: ["webkitplaybacktargetavailabilitychanged"],
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			var _a$2;
			const { media } = stateOwners;
			if (!media) return;
			if (!(media.disableRemotePlayback || media.hasAttribute("disableremoteplayback"))) (_a$2 = media == null ? void 0 : media.remote) == null || _a$2.watchAvailability((availabilityBool) => {
				handler({ availability: availabilityBool ? "available" : "not-available" });
			}).catch((error) => {
				if (error.name === "NotSupportedError") handler({ availability: null });
				else handler({ availability: "not-available" });
			});
			return () => {
				var _a2;
				(_a2 = media == null ? void 0 : media.remote) == null || _a2.cancelWatchAvailability().catch(() => {});
			};
		}]
	},
	mediaRenditionUnavailable: {
		get(stateOwners) {
			var _a$2;
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.videoRenditions)) return AvailabilityStates.UNSUPPORTED;
			if (!((_a$2 = media.videoRenditions) == null ? void 0 : _a$2.length)) return AvailabilityStates.UNAVAILABLE;
		},
		mediaEvents: ["emptied", "loadstart"],
		videoRenditionsEvents: ["addrendition", "removerendition"]
	},
	mediaAudioTrackUnavailable: {
		get(stateOwners) {
			var _a$2, _b;
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.audioTracks)) return AvailabilityStates.UNSUPPORTED;
			if (((_b = (_a$2 = media.audioTracks) == null ? void 0 : _a$2.length) != null ? _b : 0) <= 1) return AvailabilityStates.UNAVAILABLE;
		},
		mediaEvents: ["emptied", "loadstart"],
		audioTracksEvents: ["addtrack", "removetrack"]
	},
	mediaLang: { get(stateOwners) {
		const { options: { mediaLang } = {} } = stateOwners;
		return mediaLang != null ? mediaLang : "en";
	} }
};

//#endregion
//#region node_modules/media-chrome/dist/media-store/request-map.js
var requestMap = {
	[MediaUIEvents.MEDIA_PREVIEW_REQUEST](stateMediator$1, stateOwners, { detail }) {
		var _a$2, _b, _c;
		const { media } = stateOwners;
		const mediaPreviewTime = detail != null ? detail : void 0;
		let mediaPreviewImage = void 0;
		let mediaPreviewCoords = void 0;
		if (media && mediaPreviewTime != null) {
			const [track] = getTextTracksList(media, {
				kind: TextTrackKinds.METADATA,
				label: "thumbnails"
			});
			const cue = Array.prototype.find.call((_a$2 = track == null ? void 0 : track.cues) != null ? _a$2 : [], (c$3, i$1, cs) => {
				if (i$1 === 0) return c$3.endTime > mediaPreviewTime;
				if (i$1 === cs.length - 1) return c$3.startTime <= mediaPreviewTime;
				return c$3.startTime <= mediaPreviewTime && c$3.endTime > mediaPreviewTime;
			});
			if (cue) {
				const base = !/'^(?:[a-z]+:)?\/\//i.test(cue.text) ? (_b = media == null ? void 0 : media.querySelector("track[label=\"thumbnails\"]")) == null ? void 0 : _b.src : void 0;
				const url = new URL(cue.text, base);
				mediaPreviewCoords = new URLSearchParams(url.hash).get("#xywh").split(",").map((numStr) => +numStr);
				mediaPreviewImage = url.href;
			}
		}
		const mediaDuration = stateMediator$1.mediaDuration.get(stateOwners);
		let mediaPreviewChapter = (_c = stateMediator$1.mediaChaptersCues.get(stateOwners).find((c$3, i$1, cs) => {
			if (i$1 === cs.length - 1 && mediaDuration === c$3.endTime) return c$3.startTime <= mediaPreviewTime && c$3.endTime >= mediaPreviewTime;
			return c$3.startTime <= mediaPreviewTime && c$3.endTime > mediaPreviewTime;
		})) == null ? void 0 : _c.text;
		if (detail != null && mediaPreviewChapter == null) mediaPreviewChapter = "";
		return {
			mediaPreviewTime,
			mediaPreviewImage,
			mediaPreviewCoords,
			mediaPreviewChapter
		};
	},
	[MediaUIEvents.MEDIA_PAUSE_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaPaused"].set(true, stateOwners);
	},
	[MediaUIEvents.MEDIA_PLAY_REQUEST](stateMediator$1, stateOwners) {
		var _a$2, _b, _c, _d;
		const key = "mediaPaused";
		const value = false;
		const isLive = stateMediator$1.mediaStreamType.get(stateOwners) === StreamTypes.LIVE;
		const canAutoSeekToLive = !((_a$2 = stateOwners.options) == null ? void 0 : _a$2.noAutoSeekToLive);
		const isDVR = stateMediator$1.mediaTargetLiveWindow.get(stateOwners) > 0;
		if (isLive && canAutoSeekToLive && !isDVR) {
			const seekableEnd = (_b = stateMediator$1.mediaSeekable.get(stateOwners)) == null ? void 0 : _b[1];
			if (seekableEnd) {
				const seekToLiveOffset = (_d = (_c = stateOwners.options) == null ? void 0 : _c.seekToLiveOffset) != null ? _d : 0;
				const liveEdgeTime = seekableEnd - seekToLiveOffset;
				stateMediator$1.mediaCurrentTime.set(liveEdgeTime, stateOwners);
			}
		}
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaPlaybackRate";
		const value = detail;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_MUTE_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaMuted"].set(true, stateOwners);
	},
	[MediaUIEvents.MEDIA_UNMUTE_REQUEST](stateMediator$1, stateOwners) {
		const key = "mediaMuted";
		const value = false;
		if (!stateMediator$1.mediaVolume.get(stateOwners)) stateMediator$1.mediaVolume.set(.25, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_VOLUME_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaVolume";
		const value = detail;
		if (value && stateMediator$1.mediaMuted.get(stateOwners)) stateMediator$1.mediaMuted.set(false, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_SEEK_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaCurrentTime";
		const value = detail;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_SEEK_TO_LIVE_REQUEST](stateMediator$1, stateOwners) {
		var _a$2, _b, _c;
		const key = "mediaCurrentTime";
		const seekableEnd = (_a$2 = stateMediator$1.mediaSeekable.get(stateOwners)) == null ? void 0 : _a$2[1];
		if (Number.isNaN(Number(seekableEnd))) return;
		const seekToLiveOffset = (_c = (_b = stateOwners.options) == null ? void 0 : _b.seekToLiveOffset) != null ? _c : 0;
		const value = seekableEnd - seekToLiveOffset;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {
		var _a$2;
		const { options } = stateOwners;
		const tracks = getSubtitleTracks(stateOwners);
		const tracksToUpdate = parseTracks(detail);
		const preferredLanguage = (_a$2 = tracksToUpdate[0]) == null ? void 0 : _a$2.language;
		if (preferredLanguage && !options.noSubtitlesLangPref) GlobalThis.localStorage.setItem("media-chrome-pref-subtitles-lang", preferredLanguage);
		updateTracksModeTo(TextTrackModes.SHOWING, tracks, tracksToUpdate);
	},
	[MediaUIEvents.MEDIA_DISABLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {
		const tracks = getSubtitleTracks(stateOwners);
		const tracksToUpdate = detail != null ? detail : [];
		updateTracksModeTo(TextTrackModes.DISABLED, tracks, tracksToUpdate);
	},
	[MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {
		toggleSubtitleTracks(stateOwners, detail);
	},
	[MediaUIEvents.MEDIA_RENDITION_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaRenditionSelected";
		const value = detail;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_AUDIO_TRACK_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaAudioTrackEnabled";
		const value = detail;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_ENTER_PIP_REQUEST](stateMediator$1, stateOwners) {
		const key = "mediaIsPip";
		const value = true;
		if (stateMediator$1.mediaIsFullscreen.get(stateOwners)) stateMediator$1.mediaIsFullscreen.set(false, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_EXIT_PIP_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaIsPip"].set(false, stateOwners);
	},
	[MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST](stateMediator$1, stateOwners) {
		const key = "mediaIsFullscreen";
		const value = true;
		if (stateMediator$1.mediaIsPip.get(stateOwners)) stateMediator$1.mediaIsPip.set(false, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaIsFullscreen"].set(false, stateOwners);
	},
	[MediaUIEvents.MEDIA_ENTER_CAST_REQUEST](stateMediator$1, stateOwners) {
		const key = "mediaIsCasting";
		const value = true;
		if (stateMediator$1.mediaIsFullscreen.get(stateOwners)) stateMediator$1.mediaIsFullscreen.set(false, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_EXIT_CAST_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaIsCasting"].set(false, stateOwners);
	},
	[MediaUIEvents.MEDIA_AIRPLAY_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaIsAirplaying"].set(true, stateOwners);
	}
};

//#endregion
//#region node_modules/media-chrome/dist/media-store/media-store.js
var createMediaStore = ({ media, fullscreenElement, documentElement, stateMediator: stateMediator$1 = stateMediator, requestMap: requestMap$1 = requestMap, options = {}, monitorStateOwnersOnlyWithSubscriptions = true }) => {
	const callbacks = [];
	const stateOwners = { options: { ...options } };
	let state = Object.freeze({
		mediaPreviewTime: void 0,
		mediaPreviewImage: void 0,
		mediaPreviewCoords: void 0,
		mediaPreviewChapter: void 0
	});
	const updateState = (nextStateDelta) => {
		if (nextStateDelta == void 0) return;
		if (areValuesEq(nextStateDelta, state)) return;
		state = Object.freeze({
			...state,
			...nextStateDelta
		});
		callbacks.forEach((cb) => cb(state));
	};
	const updateStateFromFacade = () => {
		const nextState = Object.entries(stateMediator$1).reduce((nextState2, [stateName, { get }]) => {
			nextState2[stateName] = get(stateOwners);
			return nextState2;
		}, {});
		updateState(nextState);
	};
	const stateUpdateHandlers = {};
	let nextStateOwners = void 0;
	const updateStateOwners = async (nextStateOwnersDelta, nextSubscriberCount) => {
		var _a$2, _b, _c, _d, _e$3, _f, _g, _h, _i$1, _j, _k, _l, _m, _n, _o, _p;
		const pendingUpdate = !!nextStateOwners;
		nextStateOwners = {
			...stateOwners,
			...nextStateOwners != null ? nextStateOwners : {},
			...nextStateOwnersDelta
		};
		if (pendingUpdate) return;
		await prepareStateOwners(...Object.values(nextStateOwnersDelta));
		const shouldTeardownFromSubscriberCount = callbacks.length > 0 && nextSubscriberCount === 0 && monitorStateOwnersOnlyWithSubscriptions;
		const mediaChanged = stateOwners.media !== nextStateOwners.media;
		const textTracksChanged = ((_a$2 = stateOwners.media) == null ? void 0 : _a$2.textTracks) !== ((_b = nextStateOwners.media) == null ? void 0 : _b.textTracks);
		const videoRenditionsChanged = ((_c = stateOwners.media) == null ? void 0 : _c.videoRenditions) !== ((_d = nextStateOwners.media) == null ? void 0 : _d.videoRenditions);
		const audioTracksChanged = ((_e$3 = stateOwners.media) == null ? void 0 : _e$3.audioTracks) !== ((_f = nextStateOwners.media) == null ? void 0 : _f.audioTracks);
		const remoteChanged = ((_g = stateOwners.media) == null ? void 0 : _g.remote) !== ((_h = nextStateOwners.media) == null ? void 0 : _h.remote);
		const rootNodeChanged = stateOwners.documentElement !== nextStateOwners.documentElement;
		const teardownMedia = !!stateOwners.media && (mediaChanged || shouldTeardownFromSubscriberCount);
		const teardownTextTracks = !!((_i$1 = stateOwners.media) == null ? void 0 : _i$1.textTracks) && (textTracksChanged || shouldTeardownFromSubscriberCount);
		const teardownVideoRenditions = !!((_j = stateOwners.media) == null ? void 0 : _j.videoRenditions) && (videoRenditionsChanged || shouldTeardownFromSubscriberCount);
		const teardownAudioTracks = !!((_k = stateOwners.media) == null ? void 0 : _k.audioTracks) && (audioTracksChanged || shouldTeardownFromSubscriberCount);
		const teardownRemote = !!((_l = stateOwners.media) == null ? void 0 : _l.remote) && (remoteChanged || shouldTeardownFromSubscriberCount);
		const teardownRootNode = !!stateOwners.documentElement && (rootNodeChanged || shouldTeardownFromSubscriberCount);
		const teardownSomething = teardownMedia || teardownTextTracks || teardownVideoRenditions || teardownAudioTracks || teardownRemote || teardownRootNode;
		const shouldSetupFromSubscriberCount = callbacks.length === 0 && nextSubscriberCount === 1 && monitorStateOwnersOnlyWithSubscriptions;
		const setupMedia = !!nextStateOwners.media && (mediaChanged || shouldSetupFromSubscriberCount);
		const setupTextTracks = !!((_m = nextStateOwners.media) == null ? void 0 : _m.textTracks) && (textTracksChanged || shouldSetupFromSubscriberCount);
		const setupVideoRenditions = !!((_n = nextStateOwners.media) == null ? void 0 : _n.videoRenditions) && (videoRenditionsChanged || shouldSetupFromSubscriberCount);
		const setupAudioTracks = !!((_o = nextStateOwners.media) == null ? void 0 : _o.audioTracks) && (audioTracksChanged || shouldSetupFromSubscriberCount);
		const setupRemote = !!((_p = nextStateOwners.media) == null ? void 0 : _p.remote) && (remoteChanged || shouldSetupFromSubscriberCount);
		const setupRootNode = !!nextStateOwners.documentElement && (rootNodeChanged || shouldSetupFromSubscriberCount);
		const setupSomething = setupMedia || setupTextTracks || setupVideoRenditions || setupAudioTracks || setupRemote || setupRootNode;
		if (!(teardownSomething || setupSomething)) {
			Object.entries(nextStateOwners).forEach(([stateOwnerName, stateOwner]) => {
				stateOwners[stateOwnerName] = stateOwner;
			});
			updateStateFromFacade();
			nextStateOwners = void 0;
			return;
		}
		Object.entries(stateMediator$1).forEach(([stateName, { get, mediaEvents = [], textTracksEvents = [], videoRenditionsEvents = [], audioTracksEvents = [], remoteEvents = [], rootEvents = [], stateOwnersUpdateHandlers = [] }]) => {
			if (!stateUpdateHandlers[stateName]) stateUpdateHandlers[stateName] = {};
			const handler = (event) => {
				const nextValue = get(stateOwners, event);
				updateState({ [stateName]: nextValue });
			};
			let prevHandler;
			prevHandler = stateUpdateHandlers[stateName].mediaEvents;
			mediaEvents.forEach((eventType) => {
				if (prevHandler && teardownMedia) {
					stateOwners.media.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].mediaEvents = void 0;
				}
				if (setupMedia) {
					nextStateOwners.media.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].mediaEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].textTracksEvents;
			textTracksEvents.forEach((eventType) => {
				var _a2, _b2;
				if (prevHandler && teardownTextTracks) {
					(_a2 = stateOwners.media.textTracks) == null || _a2.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].textTracksEvents = void 0;
				}
				if (setupTextTracks) {
					(_b2 = nextStateOwners.media.textTracks) == null || _b2.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].textTracksEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].videoRenditionsEvents;
			videoRenditionsEvents.forEach((eventType) => {
				var _a2, _b2;
				if (prevHandler && teardownVideoRenditions) {
					(_a2 = stateOwners.media.videoRenditions) == null || _a2.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].videoRenditionsEvents = void 0;
				}
				if (setupVideoRenditions) {
					(_b2 = nextStateOwners.media.videoRenditions) == null || _b2.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].videoRenditionsEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].audioTracksEvents;
			audioTracksEvents.forEach((eventType) => {
				var _a2, _b2;
				if (prevHandler && teardownAudioTracks) {
					(_a2 = stateOwners.media.audioTracks) == null || _a2.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].audioTracksEvents = void 0;
				}
				if (setupAudioTracks) {
					(_b2 = nextStateOwners.media.audioTracks) == null || _b2.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].audioTracksEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].remoteEvents;
			remoteEvents.forEach((eventType) => {
				var _a2, _b2;
				if (prevHandler && teardownRemote) {
					(_a2 = stateOwners.media.remote) == null || _a2.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].remoteEvents = void 0;
				}
				if (setupRemote) {
					(_b2 = nextStateOwners.media.remote) == null || _b2.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].remoteEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].rootEvents;
			rootEvents.forEach((eventType) => {
				if (prevHandler && teardownRootNode) {
					stateOwners.documentElement.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].rootEvents = void 0;
				}
				if (setupRootNode) {
					nextStateOwners.documentElement.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].rootEvents = handler;
				}
			});
			const prevHandlerTeardown = stateUpdateHandlers[stateName].stateOwnersUpdateHandlers;
			stateOwnersUpdateHandlers.forEach((fn) => {
				if (prevHandlerTeardown && teardownSomething) prevHandlerTeardown();
				if (setupSomething) stateUpdateHandlers[stateName].stateOwnersUpdateHandlers = fn(handler, nextStateOwners);
			});
		});
		Object.entries(nextStateOwners).forEach(([stateOwnerName, stateOwner]) => {
			stateOwners[stateOwnerName] = stateOwner;
		});
		updateStateFromFacade();
		nextStateOwners = void 0;
	};
	updateStateOwners({
		media,
		fullscreenElement,
		documentElement,
		options
	});
	return {
		dispatch(action) {
			const { type, detail } = action;
			if (requestMap$1[type] && state.mediaErrorCode == null) {
				updateState(requestMap$1[type](stateMediator$1, stateOwners, action));
				return;
			}
			if (type === "mediaelementchangerequest") updateStateOwners({ media: detail });
			else if (type === "fullscreenelementchangerequest") updateStateOwners({ fullscreenElement: detail });
			else if (type === "documentelementchangerequest") updateStateOwners({ documentElement: detail });
			else if (type === "optionschangerequest") {
				Object.entries(detail != null ? detail : {}).forEach(([optionName, optionValue]) => {
					stateOwners.options[optionName] = optionValue;
				});
				updateStateFromFacade();
			}
		},
		getState() {
			return state;
		},
		subscribe(callback) {
			updateStateOwners({}, callbacks.length + 1);
			callbacks.push(callback);
			callback(state);
			return () => {
				const idx = callbacks.indexOf(callback);
				if (idx >= 0) {
					updateStateOwners({}, callbacks.length - 1);
					callbacks.splice(idx, 1);
				}
			};
		}
	};
};

//#endregion
//#region node_modules/media-chrome/dist/media-controller.js
var __accessCheck$23 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$23 = (obj, member, getter) => {
	__accessCheck$23(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$23 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$21 = (obj, member, value, setter) => {
	__accessCheck$23(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$11 = (obj, member, method) => {
	__accessCheck$23(obj, member, "access private method");
	return method;
};
var _hotKeys, _fullscreenElement, _mediaStore, _mediaStateCallback, _mediaStoreUnsubscribe, _mediaStateEventHandler, _setupDefaultStore, setupDefaultStore_fn, _keyUpHandler, keyUpHandler_fn, _keyDownHandler, keyDownHandler_fn;
var ButtonPressedKeys$1 = [
	"ArrowLeft",
	"ArrowRight",
	"Enter",
	" ",
	"f",
	"m",
	"k",
	"c"
];
var DEFAULT_SEEK_OFFSET$2 = 10;
var Attributes$13 = {
	DEFAULT_SUBTITLES: "defaultsubtitles",
	DEFAULT_STREAM_TYPE: "defaultstreamtype",
	DEFAULT_DURATION: "defaultduration",
	FULLSCREEN_ELEMENT: "fullscreenelement",
	HOTKEYS: "hotkeys",
	KEYS_USED: "keysused",
	LIVE_EDGE_OFFSET: "liveedgeoffset",
	SEEK_TO_LIVE_OFFSET: "seektoliveoffset",
	NO_AUTO_SEEK_TO_LIVE: "noautoseektolive",
	NO_HOTKEYS: "nohotkeys",
	NO_VOLUME_PREF: "novolumepref",
	NO_MUTED_PREF: "nomutedpref",
	NO_SUBTITLES_LANG_PREF: "nosubtitleslangpref",
	NO_DEFAULT_STORE: "nodefaultstore",
	KEYBOARD_FORWARD_SEEK_OFFSET: "keyboardforwardseekoffset",
	KEYBOARD_BACKWARD_SEEK_OFFSET: "keyboardbackwardseekoffset",
	LANG: "lang"
};
var MediaController = class extends MediaContainer {
	constructor() {
		super();
		__privateAdd$23(this, _setupDefaultStore);
		__privateAdd$23(this, _keyUpHandler);
		__privateAdd$23(this, _keyDownHandler);
		this.mediaStateReceivers = [];
		this.associatedElementSubscriptions = /* @__PURE__ */ new Map();
		__privateAdd$23(this, _hotKeys, new AttributeTokenList(this, Attributes$13.HOTKEYS));
		__privateAdd$23(this, _fullscreenElement, void 0);
		__privateAdd$23(this, _mediaStore, void 0);
		__privateAdd$23(this, _mediaStateCallback, void 0);
		__privateAdd$23(this, _mediaStoreUnsubscribe, void 0);
		__privateAdd$23(this, _mediaStateEventHandler, (event) => {
			var _a$2;
			(_a$2 = __privateGet$23(this, _mediaStore)) == null || _a$2.dispatch(event);
		});
		this.associateElement(this);
		let prevState = {};
		__privateSet$21(this, _mediaStateCallback, (nextState) => {
			Object.entries(nextState).forEach(([stateName, stateValue]) => {
				if (stateName in prevState && prevState[stateName] === stateValue) return;
				this.propagateMediaState(stateName, stateValue);
				const attrName = stateName.toLowerCase();
				const evt = new GlobalThis.CustomEvent(AttributeToStateChangeEventMap[attrName], {
					composed: true,
					detail: stateValue
				});
				this.dispatchEvent(evt);
			});
			prevState = nextState;
		});
		this.hasAttribute(Attributes$13.NO_HOTKEYS) ? this.disableHotkeys() : this.enableHotkeys();
	}
	static get observedAttributes() {
		return super.observedAttributes.concat(Attributes$13.NO_HOTKEYS, Attributes$13.HOTKEYS, Attributes$13.DEFAULT_STREAM_TYPE, Attributes$13.DEFAULT_SUBTITLES, Attributes$13.DEFAULT_DURATION, Attributes$13.LANG);
	}
	get mediaStore() {
		return __privateGet$23(this, _mediaStore);
	}
	set mediaStore(value) {
		var _a$2, _b;
		if (__privateGet$23(this, _mediaStore)) {
			(_a$2 = __privateGet$23(this, _mediaStoreUnsubscribe)) == null || _a$2.call(this);
			__privateSet$21(this, _mediaStoreUnsubscribe, void 0);
		}
		__privateSet$21(this, _mediaStore, value);
		if (!__privateGet$23(this, _mediaStore) && !this.hasAttribute(Attributes$13.NO_DEFAULT_STORE)) {
			__privateMethod$11(this, _setupDefaultStore, setupDefaultStore_fn).call(this);
			return;
		}
		__privateSet$21(this, _mediaStoreUnsubscribe, (_b = __privateGet$23(this, _mediaStore)) == null ? void 0 : _b.subscribe(__privateGet$23(this, _mediaStateCallback)));
	}
	get fullscreenElement() {
		var _a$2;
		return (_a$2 = __privateGet$23(this, _fullscreenElement)) != null ? _a$2 : this;
	}
	set fullscreenElement(element) {
		var _a$2;
		if (this.hasAttribute(Attributes$13.FULLSCREEN_ELEMENT)) this.removeAttribute(Attributes$13.FULLSCREEN_ELEMENT);
		__privateSet$21(this, _fullscreenElement, element);
		(_a$2 = __privateGet$23(this, _mediaStore)) == null || _a$2.dispatch({
			type: "fullscreenelementchangerequest",
			detail: this.fullscreenElement
		});
	}
	get defaultSubtitles() {
		return getBooleanAttr(this, Attributes$13.DEFAULT_SUBTITLES);
	}
	set defaultSubtitles(value) {
		setBooleanAttr(this, Attributes$13.DEFAULT_SUBTITLES, value);
	}
	get defaultStreamType() {
		return getStringAttr(this, Attributes$13.DEFAULT_STREAM_TYPE);
	}
	set defaultStreamType(value) {
		setStringAttr(this, Attributes$13.DEFAULT_STREAM_TYPE, value);
	}
	get defaultDuration() {
		return getNumericAttr(this, Attributes$13.DEFAULT_DURATION);
	}
	set defaultDuration(value) {
		setNumericAttr(this, Attributes$13.DEFAULT_DURATION, value);
	}
	get noHotkeys() {
		return getBooleanAttr(this, Attributes$13.NO_HOTKEYS);
	}
	set noHotkeys(value) {
		setBooleanAttr(this, Attributes$13.NO_HOTKEYS, value);
	}
	get keysUsed() {
		return getStringAttr(this, Attributes$13.KEYS_USED);
	}
	set keysUsed(value) {
		setStringAttr(this, Attributes$13.KEYS_USED, value);
	}
	get liveEdgeOffset() {
		return getNumericAttr(this, Attributes$13.LIVE_EDGE_OFFSET);
	}
	set liveEdgeOffset(value) {
		setNumericAttr(this, Attributes$13.LIVE_EDGE_OFFSET, value);
	}
	get noAutoSeekToLive() {
		return getBooleanAttr(this, Attributes$13.NO_AUTO_SEEK_TO_LIVE);
	}
	set noAutoSeekToLive(value) {
		setBooleanAttr(this, Attributes$13.NO_AUTO_SEEK_TO_LIVE, value);
	}
	get noVolumePref() {
		return getBooleanAttr(this, Attributes$13.NO_VOLUME_PREF);
	}
	set noVolumePref(value) {
		setBooleanAttr(this, Attributes$13.NO_VOLUME_PREF, value);
	}
	get noMutedPref() {
		return getBooleanAttr(this, Attributes$13.NO_MUTED_PREF);
	}
	set noMutedPref(value) {
		setBooleanAttr(this, Attributes$13.NO_MUTED_PREF, value);
	}
	get noSubtitlesLangPref() {
		return getBooleanAttr(this, Attributes$13.NO_SUBTITLES_LANG_PREF);
	}
	set noSubtitlesLangPref(value) {
		setBooleanAttr(this, Attributes$13.NO_SUBTITLES_LANG_PREF, value);
	}
	get noDefaultStore() {
		return getBooleanAttr(this, Attributes$13.NO_DEFAULT_STORE);
	}
	set noDefaultStore(value) {
		setBooleanAttr(this, Attributes$13.NO_DEFAULT_STORE, value);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2, _b, _c, _d, _e$3, _f, _g, _h, _i$1;
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === Attributes$13.NO_HOTKEYS) {
			if (newValue !== oldValue && newValue === "") {
				if (this.hasAttribute(Attributes$13.HOTKEYS)) console.warn("Media Chrome: Both `hotkeys` and `nohotkeys` have been set. All hotkeys will be disabled.");
				this.disableHotkeys();
			} else if (newValue !== oldValue && newValue === null) this.enableHotkeys();
		} else if (attrName === Attributes$13.HOTKEYS) __privateGet$23(this, _hotKeys).value = newValue;
		else if (attrName === Attributes$13.DEFAULT_SUBTITLES && newValue !== oldValue) (_a$2 = __privateGet$23(this, _mediaStore)) == null || _a$2.dispatch({
			type: "optionschangerequest",
			detail: { defaultSubtitles: this.hasAttribute(Attributes$13.DEFAULT_SUBTITLES) }
		});
		else if (attrName === Attributes$13.DEFAULT_STREAM_TYPE) (_c = __privateGet$23(this, _mediaStore)) == null || _c.dispatch({
			type: "optionschangerequest",
			detail: { defaultStreamType: (_b = this.getAttribute(Attributes$13.DEFAULT_STREAM_TYPE)) != null ? _b : void 0 }
		});
		else if (attrName === Attributes$13.LIVE_EDGE_OFFSET) (_d = __privateGet$23(this, _mediaStore)) == null || _d.dispatch({
			type: "optionschangerequest",
			detail: {
				liveEdgeOffset: this.hasAttribute(Attributes$13.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes$13.LIVE_EDGE_OFFSET) : void 0,
				seekToLiveOffset: !this.hasAttribute(Attributes$13.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes$13.LIVE_EDGE_OFFSET) : void 0
			}
		});
		else if (attrName === Attributes$13.SEEK_TO_LIVE_OFFSET) (_e$3 = __privateGet$23(this, _mediaStore)) == null || _e$3.dispatch({
			type: "optionschangerequest",
			detail: { seekToLiveOffset: this.hasAttribute(Attributes$13.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes$13.SEEK_TO_LIVE_OFFSET) : void 0 }
		});
		else if (attrName === Attributes$13.NO_AUTO_SEEK_TO_LIVE) (_f = __privateGet$23(this, _mediaStore)) == null || _f.dispatch({
			type: "optionschangerequest",
			detail: { noAutoSeekToLive: this.hasAttribute(Attributes$13.NO_AUTO_SEEK_TO_LIVE) }
		});
		else if (attrName === Attributes$13.FULLSCREEN_ELEMENT) {
			const el = newValue ? (_g = this.getRootNode()) == null ? void 0 : _g.getElementById(newValue) : void 0;
			__privateSet$21(this, _fullscreenElement, el);
			(_h = __privateGet$23(this, _mediaStore)) == null || _h.dispatch({
				type: "fullscreenelementchangerequest",
				detail: this.fullscreenElement
			});
		} else if (attrName === Attributes$13.LANG && newValue !== oldValue) {
			setLanguage(newValue);
			(_i$1 = __privateGet$23(this, _mediaStore)) == null || _i$1.dispatch({
				type: "optionschangerequest",
				detail: { mediaLang: newValue }
			});
		}
	}
	connectedCallback() {
		var _a$2, _b;
		if (!__privateGet$23(this, _mediaStore) && !this.hasAttribute(Attributes$13.NO_DEFAULT_STORE)) __privateMethod$11(this, _setupDefaultStore, setupDefaultStore_fn).call(this);
		(_a$2 = __privateGet$23(this, _mediaStore)) == null || _a$2.dispatch({
			type: "documentelementchangerequest",
			detail: Document$1
		});
		super.connectedCallback();
		if (__privateGet$23(this, _mediaStore) && !__privateGet$23(this, _mediaStoreUnsubscribe)) __privateSet$21(this, _mediaStoreUnsubscribe, (_b = __privateGet$23(this, _mediaStore)) == null ? void 0 : _b.subscribe(__privateGet$23(this, _mediaStateCallback)));
		this.hasAttribute(Attributes$13.NO_HOTKEYS) ? this.disableHotkeys() : this.enableHotkeys();
	}
	disconnectedCallback() {
		var _a$2, _b, _c, _d;
		(_a$2 = super.disconnectedCallback) == null || _a$2.call(this);
		if (__privateGet$23(this, _mediaStore)) {
			(_b = __privateGet$23(this, _mediaStore)) == null || _b.dispatch({
				type: "documentelementchangerequest",
				detail: void 0
			});
			(_c = __privateGet$23(this, _mediaStore)) == null || _c.dispatch({
				type: MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST,
				detail: false
			});
		}
		if (__privateGet$23(this, _mediaStoreUnsubscribe)) {
			(_d = __privateGet$23(this, _mediaStoreUnsubscribe)) == null || _d.call(this);
			__privateSet$21(this, _mediaStoreUnsubscribe, void 0);
		}
	}
	/**
	* @override
	* @param {HTMLMediaElement} media
	*/
	mediaSetCallback(media) {
		var _a$2;
		super.mediaSetCallback(media);
		(_a$2 = __privateGet$23(this, _mediaStore)) == null || _a$2.dispatch({
			type: "mediaelementchangerequest",
			detail: media
		});
		if (!media.hasAttribute("tabindex")) media.tabIndex = -1;
	}
	/**
	* @override
	* @param {HTMLMediaElement} media
	*/
	mediaUnsetCallback(media) {
		var _a$2;
		super.mediaUnsetCallback(media);
		(_a$2 = __privateGet$23(this, _mediaStore)) == null || _a$2.dispatch({
			type: "mediaelementchangerequest",
			detail: void 0
		});
	}
	propagateMediaState(stateName, state) {
		propagateMediaState(this.mediaStateReceivers, stateName, state);
	}
	associateElement(element) {
		if (!element) return;
		const { associatedElementSubscriptions } = this;
		if (associatedElementSubscriptions.has(element)) return;
		const registerMediaStateReceiver = this.registerMediaStateReceiver.bind(this);
		const unregisterMediaStateReceiver = this.unregisterMediaStateReceiver.bind(this);
		const unsubscribe = monitorForMediaStateReceivers(element, registerMediaStateReceiver, unregisterMediaStateReceiver);
		Object.values(MediaUIEvents).forEach((eventName) => {
			element.addEventListener(eventName, __privateGet$23(this, _mediaStateEventHandler));
		});
		associatedElementSubscriptions.set(element, unsubscribe);
	}
	unassociateElement(element) {
		if (!element) return;
		const { associatedElementSubscriptions } = this;
		if (!associatedElementSubscriptions.has(element)) return;
		associatedElementSubscriptions.get(element)();
		associatedElementSubscriptions.delete(element);
		Object.values(MediaUIEvents).forEach((eventName) => {
			element.removeEventListener(eventName, __privateGet$23(this, _mediaStateEventHandler));
		});
	}
	registerMediaStateReceiver(el) {
		if (!el) return;
		const els = this.mediaStateReceivers;
		if (els.indexOf(el) > -1) return;
		els.push(el);
		if (__privateGet$23(this, _mediaStore)) Object.entries(__privateGet$23(this, _mediaStore).getState()).forEach(([stateName, stateValue]) => {
			propagateMediaState([el], stateName, stateValue);
		});
	}
	unregisterMediaStateReceiver(el) {
		const els = this.mediaStateReceivers;
		const index = els.indexOf(el);
		if (index < 0) return;
		els.splice(index, 1);
	}
	enableHotkeys() {
		this.addEventListener("keydown", __privateMethod$11(this, _keyDownHandler, keyDownHandler_fn));
	}
	disableHotkeys() {
		this.removeEventListener("keydown", __privateMethod$11(this, _keyDownHandler, keyDownHandler_fn));
		this.removeEventListener("keyup", __privateMethod$11(this, _keyUpHandler, keyUpHandler_fn));
	}
	get hotkeys() {
		return getStringAttr(this, Attributes$13.HOTKEYS);
	}
	set hotkeys(value) {
		setStringAttr(this, Attributes$13.HOTKEYS, value);
	}
	keyboardShortcutHandler(e$1) {
		var _a$2, _b, _c, _d, _e$3;
		const target = e$1.target;
		if (((_c = (_b = (_a$2 = target.getAttribute(Attributes$13.KEYS_USED)) == null ? void 0 : _a$2.split(" ")) != null ? _b : target == null ? void 0 : target.keysUsed) != null ? _c : []).map((key) => key === "Space" ? " " : key).filter(Boolean).includes(e$1.key)) return;
		let eventName, detail, evt;
		if (__privateGet$23(this, _hotKeys).contains(`no${e$1.key.toLowerCase()}`)) return;
		if (e$1.key === " " && __privateGet$23(this, _hotKeys).contains(`nospace`)) return;
		switch (e$1.key) {
			case " ":
			case "k":
				eventName = __privateGet$23(this, _mediaStore).getState().mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
				this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
					composed: true,
					bubbles: true
				}));
				break;
			case "m":
				eventName = this.mediaStore.getState().mediaVolumeLevel === "off" ? MediaUIEvents.MEDIA_UNMUTE_REQUEST : MediaUIEvents.MEDIA_MUTE_REQUEST;
				this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
					composed: true,
					bubbles: true
				}));
				break;
			case "f":
				eventName = this.mediaStore.getState().mediaIsFullscreen ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;
				this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
					composed: true,
					bubbles: true
				}));
				break;
			case "c":
				this.dispatchEvent(new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST, {
					composed: true,
					bubbles: true
				}));
				break;
			case "ArrowLeft": {
				const offsetValue = this.hasAttribute(Attributes$13.KEYBOARD_BACKWARD_SEEK_OFFSET) ? +this.getAttribute(Attributes$13.KEYBOARD_BACKWARD_SEEK_OFFSET) : DEFAULT_SEEK_OFFSET$2;
				detail = Math.max(((_d = this.mediaStore.getState().mediaCurrentTime) != null ? _d : 0) - offsetValue, 0);
				evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
					composed: true,
					bubbles: true,
					detail
				});
				this.dispatchEvent(evt);
				break;
			}
			case "ArrowRight": {
				const offsetValue = this.hasAttribute(Attributes$13.KEYBOARD_FORWARD_SEEK_OFFSET) ? +this.getAttribute(Attributes$13.KEYBOARD_FORWARD_SEEK_OFFSET) : DEFAULT_SEEK_OFFSET$2;
				detail = Math.max(((_e$3 = this.mediaStore.getState().mediaCurrentTime) != null ? _e$3 : 0) + offsetValue, 0);
				evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
					composed: true,
					bubbles: true,
					detail
				});
				this.dispatchEvent(evt);
				break;
			}
			default: break;
		}
	}
};
_hotKeys = /* @__PURE__ */ new WeakMap();
_fullscreenElement = /* @__PURE__ */ new WeakMap();
_mediaStore = /* @__PURE__ */ new WeakMap();
_mediaStateCallback = /* @__PURE__ */ new WeakMap();
_mediaStoreUnsubscribe = /* @__PURE__ */ new WeakMap();
_mediaStateEventHandler = /* @__PURE__ */ new WeakMap();
_setupDefaultStore = /* @__PURE__ */ new WeakSet();
setupDefaultStore_fn = function() {
	var _a$2;
	this.mediaStore = createMediaStore({
		media: this.media,
		fullscreenElement: this.fullscreenElement,
		options: {
			defaultSubtitles: this.hasAttribute(Attributes$13.DEFAULT_SUBTITLES),
			defaultDuration: this.hasAttribute(Attributes$13.DEFAULT_DURATION) ? +this.getAttribute(Attributes$13.DEFAULT_DURATION) : void 0,
			defaultStreamType: (_a$2 = this.getAttribute(Attributes$13.DEFAULT_STREAM_TYPE)) != null ? _a$2 : void 0,
			liveEdgeOffset: this.hasAttribute(Attributes$13.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes$13.LIVE_EDGE_OFFSET) : void 0,
			seekToLiveOffset: this.hasAttribute(Attributes$13.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes$13.SEEK_TO_LIVE_OFFSET) : this.hasAttribute(Attributes$13.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes$13.LIVE_EDGE_OFFSET) : void 0,
			noAutoSeekToLive: this.hasAttribute(Attributes$13.NO_AUTO_SEEK_TO_LIVE),
			noVolumePref: this.hasAttribute(Attributes$13.NO_VOLUME_PREF),
			noMutedPref: this.hasAttribute(Attributes$13.NO_MUTED_PREF),
			noSubtitlesLangPref: this.hasAttribute(Attributes$13.NO_SUBTITLES_LANG_PREF)
		}
	});
};
_keyUpHandler = /* @__PURE__ */ new WeakSet();
keyUpHandler_fn = function(e$1) {
	const { key } = e$1;
	if (!ButtonPressedKeys$1.includes(key)) {
		this.removeEventListener("keyup", __privateMethod$11(this, _keyUpHandler, keyUpHandler_fn));
		return;
	}
	this.keyboardShortcutHandler(e$1);
};
_keyDownHandler = /* @__PURE__ */ new WeakSet();
keyDownHandler_fn = function(e$1) {
	const { metaKey, altKey, key } = e$1;
	if (metaKey || altKey || !ButtonPressedKeys$1.includes(key)) {
		this.removeEventListener("keyup", __privateMethod$11(this, _keyUpHandler, keyUpHandler_fn));
		return;
	}
	if ([
		" ",
		"ArrowLeft",
		"ArrowRight"
	].includes(key) && !(__privateGet$23(this, _hotKeys).contains(`no${key.toLowerCase()}`) || key === " " && __privateGet$23(this, _hotKeys).contains("nospace"))) e$1.preventDefault();
	this.addEventListener("keyup", __privateMethod$11(this, _keyUpHandler, keyUpHandler_fn), { once: true });
};
var MEDIA_UI_ATTRIBUTE_NAMES = Object.values(MediaUIAttributes);
var MEDIA_UI_PROP_NAMES = Object.values(MediaUIProps);
var getMediaUIAttributesFrom = (child) => {
	var _a$2, _b, _c, _d;
	let { observedAttributes: observedAttributes$1 } = child.constructor;
	if (!observedAttributes$1 && ((_a$2 = child.nodeName) == null ? void 0 : _a$2.includes("-"))) {
		GlobalThis.customElements.upgrade(child);
		({observedAttributes: observedAttributes$1} = child.constructor);
	}
	const mediaChromeAttributesList = (_d = (_c = (_b = child == null ? void 0 : child.getAttribute) == null ? void 0 : _b.call(child, MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES)) == null ? void 0 : _c.split) == null ? void 0 : _d.call(_c, /\s+/);
	if (!Array.isArray(observedAttributes$1 || mediaChromeAttributesList)) return [];
	return (observedAttributes$1 || mediaChromeAttributesList).filter((attrName) => MEDIA_UI_ATTRIBUTE_NAMES.includes(attrName));
};
var hasMediaUIProps = (mediaStateReceiverCandidate) => {
	var _a$2, _b;
	if (((_a$2 = mediaStateReceiverCandidate.nodeName) == null ? void 0 : _a$2.includes("-")) && !!GlobalThis.customElements.get((_b = mediaStateReceiverCandidate.nodeName) == null ? void 0 : _b.toLowerCase()) && !(mediaStateReceiverCandidate instanceof GlobalThis.customElements.get(mediaStateReceiverCandidate.nodeName.toLowerCase()))) GlobalThis.customElements.upgrade(mediaStateReceiverCandidate);
	return MEDIA_UI_PROP_NAMES.some((propName) => propName in mediaStateReceiverCandidate);
};
var isMediaStateReceiver = (child) => {
	return hasMediaUIProps(child) || !!getMediaUIAttributesFrom(child).length;
};
var serializeTuple = (tuple) => {
	var _a$2;
	return (_a$2 = tuple == null ? void 0 : tuple.join) == null ? void 0 : _a$2.call(tuple, ":");
};
var CustomAttrSerializer = {
	[MediaUIAttributes.MEDIA_SUBTITLES_LIST]: stringifyTextTrackList,
	[MediaUIAttributes.MEDIA_SUBTITLES_SHOWING]: stringifyTextTrackList,
	[MediaUIAttributes.MEDIA_SEEKABLE]: serializeTuple,
	[MediaUIAttributes.MEDIA_BUFFERED]: (tuples) => tuples == null ? void 0 : tuples.map(serializeTuple).join(" "),
	[MediaUIAttributes.MEDIA_PREVIEW_COORDS]: (coords) => coords == null ? void 0 : coords.join(" "),
	[MediaUIAttributes.MEDIA_RENDITION_LIST]: stringifyRenditionList,
	[MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST]: stringifyAudioTrackList
};
var setAttr = async (child, attrName, attrValue) => {
	var _a$2, _b;
	if (!child.isConnected) await delay(0);
	if (typeof attrValue === "boolean" || attrValue == null) return setBooleanAttr(child, attrName, attrValue);
	if (typeof attrValue === "number") return setNumericAttr(child, attrName, attrValue);
	if (typeof attrValue === "string") return setStringAttr(child, attrName, attrValue);
	if (Array.isArray(attrValue) && !attrValue.length) return child.removeAttribute(attrName);
	const val = (_b = (_a$2 = CustomAttrSerializer[attrName]) == null ? void 0 : _a$2.call(CustomAttrSerializer, attrValue)) != null ? _b : attrValue;
	return child.setAttribute(attrName, val);
};
var isMediaSlotElementDescendant = (el) => {
	var _a$2;
	return !!((_a$2 = el.closest) == null ? void 0 : _a$2.call(el, "*[slot=\"media\"]"));
};
var traverseForMediaStateReceivers = (rootNode, mediaStateReceiverCallback) => {
	if (isMediaSlotElementDescendant(rootNode)) return;
	const traverseForMediaStateReceiversSync = (rootNode2, mediaStateReceiverCallback2) => {
		var _a$2, _b;
		if (isMediaStateReceiver(rootNode2)) mediaStateReceiverCallback2(rootNode2);
		const { children = [] } = rootNode2 != null ? rootNode2 : {};
		const shadowChildren = (_b = (_a$2 = rootNode2 == null ? void 0 : rootNode2.shadowRoot) == null ? void 0 : _a$2.children) != null ? _b : [];
		[...children, ...shadowChildren].forEach((child) => traverseForMediaStateReceivers(child, mediaStateReceiverCallback2));
	};
	const name = rootNode == null ? void 0 : rootNode.nodeName.toLowerCase();
	if (name.includes("-") && !isMediaStateReceiver(rootNode)) {
		GlobalThis.customElements.whenDefined(name).then(() => {
			traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);
		});
		return;
	}
	traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);
};
var propagateMediaState = (els, stateName, val) => {
	els.forEach((el) => {
		if (stateName in el) {
			el[stateName] = val;
			return;
		}
		const relevantAttrs = getMediaUIAttributesFrom(el);
		const attrName = stateName.toLowerCase();
		if (!relevantAttrs.includes(attrName)) return;
		setAttr(el, attrName, val);
	});
};
var monitorForMediaStateReceivers = (rootNode, registerMediaStateReceiver, unregisterMediaStateReceiver) => {
	traverseForMediaStateReceivers(rootNode, registerMediaStateReceiver);
	const registerMediaStateReceiverHandler = (evt) => {
		var _a$2;
		const el = (_a$2 = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a$2 : evt.target;
		registerMediaStateReceiver(el);
	};
	const unregisterMediaStateReceiverHandler = (evt) => {
		var _a$2;
		const el = (_a$2 = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a$2 : evt.target;
		unregisterMediaStateReceiver(el);
	};
	rootNode.addEventListener(MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER, registerMediaStateReceiverHandler);
	rootNode.addEventListener(MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER, unregisterMediaStateReceiverHandler);
	const mutationCallback = (mutationsList) => {
		mutationsList.forEach((mutationRecord) => {
			const { addedNodes = [], removedNodes = [], type, target, attributeName } = mutationRecord;
			if (type === "childList") {
				Array.prototype.forEach.call(addedNodes, (node) => traverseForMediaStateReceivers(node, registerMediaStateReceiver));
				Array.prototype.forEach.call(removedNodes, (node) => traverseForMediaStateReceivers(node, unregisterMediaStateReceiver));
			} else if (type === "attributes" && attributeName === MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES) if (isMediaStateReceiver(target)) registerMediaStateReceiver(target);
			else unregisterMediaStateReceiver(target);
		});
	};
	let prevSlotted = [];
	const slotChangeHandler = (event) => {
		const slotEl = event.target;
		if (slotEl.name === "media") return;
		prevSlotted.forEach((node) => traverseForMediaStateReceivers(node, unregisterMediaStateReceiver));
		prevSlotted = [...slotEl.assignedElements({ flatten: true })];
		prevSlotted.forEach((node) => traverseForMediaStateReceivers(node, registerMediaStateReceiver));
	};
	rootNode.addEventListener("slotchange", slotChangeHandler);
	const observer$1 = new MutationObserver(mutationCallback);
	observer$1.observe(rootNode, {
		childList: true,
		attributes: true,
		subtree: true
	});
	const unsubscribe = () => {
		traverseForMediaStateReceivers(rootNode, unregisterMediaStateReceiver);
		rootNode.removeEventListener("slotchange", slotChangeHandler);
		observer$1.disconnect();
		rootNode.removeEventListener(MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER, registerMediaStateReceiverHandler);
		rootNode.removeEventListener(MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER, unregisterMediaStateReceiverHandler);
	};
	return unsubscribe;
};
if (!GlobalThis.customElements.get("media-controller")) GlobalThis.customElements.define("media-controller", MediaController);
var media_controller_default = MediaController;

//#endregion
//#region node_modules/media-chrome/dist/media-tooltip.js
var Attributes$12 = {
	PLACEMENT: "placement",
	BOUNDS: "bounds"
};
function getTemplateHTML$14(_attrs) {
	return `
    <style>
      :host {
        --_tooltip-background-color: var(--media-tooltip-background-color, var(--media-secondary-color, rgba(20, 20, 30, .7)));
        --_tooltip-background: var(--media-tooltip-background, var(--_tooltip-background-color));
        --_tooltip-arrow-half-width: calc(var(--media-tooltip-arrow-width, 12px) / 2);
        --_tooltip-arrow-height: var(--media-tooltip-arrow-height, 5px);
        --_tooltip-arrow-background: var(--media-tooltip-arrow-color, var(--_tooltip-background-color));
        position: relative;
        pointer-events: none;
        display: var(--media-tooltip-display, inline-flex);
        justify-content: center;
        align-items: center;
        box-sizing: border-box;
        z-index: var(--media-tooltip-z-index, 1);
        background: var(--_tooltip-background);
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        font: var(--media-font,
          var(--media-font-weight, 400)
          var(--media-font-size, 13px) /
          var(--media-text-content-height, var(--media-control-height, 18px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        padding: var(--media-tooltip-padding, .35em .7em);
        border: var(--media-tooltip-border, none);
        border-radius: var(--media-tooltip-border-radius, 5px);
        filter: var(--media-tooltip-filter, drop-shadow(0 0 4px rgba(0, 0, 0, .2)));
        white-space: var(--media-tooltip-white-space, nowrap);
      }

      :host([hidden]) {
        display: none;
      }

      img, svg {
        display: inline-block;
      }

      #arrow {
        position: absolute;
        width: 0px;
        height: 0px;
        border-style: solid;
        display: var(--media-tooltip-arrow-display, block);
      }

      :host(:not([placement])),
      :host([placement="top"]) {
        position: absolute;
        bottom: calc(100% + var(--media-tooltip-distance, 12px));
        left: 50%;
        transform: translate(calc(-50% - var(--media-tooltip-offset-x, 0px)), 0);
      }
      :host(:not([placement])) #arrow,
      :host([placement="top"]) #arrow {
        top: 100%;
        left: 50%;
        border-width: var(--_tooltip-arrow-height) var(--_tooltip-arrow-half-width) 0 var(--_tooltip-arrow-half-width);
        border-color: var(--_tooltip-arrow-background) transparent transparent transparent;
        transform: translate(calc(-50% + var(--media-tooltip-offset-x, 0px)), 0);
      }

      :host([placement="right"]) {
        position: absolute;
        left: calc(100% + var(--media-tooltip-distance, 12px));
        top: 50%;
        transform: translate(0, -50%);
      }
      :host([placement="right"]) #arrow {
        top: 50%;
        right: 100%;
        border-width: var(--_tooltip-arrow-half-width) var(--_tooltip-arrow-height) var(--_tooltip-arrow-half-width) 0;
        border-color: transparent var(--_tooltip-arrow-background) transparent transparent;
        transform: translate(0, -50%);
      }

      :host([placement="bottom"]) {
        position: absolute;
        top: calc(100% + var(--media-tooltip-distance, 12px));
        left: 50%;
        transform: translate(calc(-50% - var(--media-tooltip-offset-x, 0px)), 0);
      }
      :host([placement="bottom"]) #arrow {
        bottom: 100%;
        left: 50%;
        border-width: 0 var(--_tooltip-arrow-half-width) var(--_tooltip-arrow-height) var(--_tooltip-arrow-half-width);
        border-color: transparent transparent var(--_tooltip-arrow-background) transparent;
        transform: translate(calc(-50% + var(--media-tooltip-offset-x, 0px)), 0);
      }

      :host([placement="left"]) {
        position: absolute;
        right: calc(100% + var(--media-tooltip-distance, 12px));
        top: 50%;
        transform: translate(0, -50%);
      }
      :host([placement="left"]) #arrow {
        top: 50%;
        left: 100%;
        border-width: var(--_tooltip-arrow-half-width) 0 var(--_tooltip-arrow-half-width) var(--_tooltip-arrow-height);
        border-color: transparent transparent transparent var(--_tooltip-arrow-background);
        transform: translate(0, -50%);
      }
      
      :host([placement="none"]) #arrow {
        display: none;
      }
    </style>
    <slot></slot>
    <div id="arrow"></div>
  `;
}
var MediaTooltip = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		this.updateXOffset = () => {
			var _a$2;
			if (!isElementVisible(this, {
				checkOpacity: false,
				checkVisibilityCSS: false
			})) return;
			const placement = this.placement;
			if (placement === "left" || placement === "right") {
				this.style.removeProperty("--media-tooltip-offset-x");
				return;
			}
			const tooltipStyle = getComputedStyle(this);
			const containingEl = (_a$2 = closestComposedNode(this, "#" + this.bounds)) != null ? _a$2 : getMediaController(this);
			if (!containingEl) return;
			const { x: containerX, width: containerWidth } = containingEl.getBoundingClientRect();
			const { x: tooltipX, width: tooltipWidth } = this.getBoundingClientRect();
			const tooltipRight = tooltipX + tooltipWidth;
			const containerRight = containerX + containerWidth;
			const offsetXVal = tooltipStyle.getPropertyValue("--media-tooltip-offset-x");
			const currOffsetX = offsetXVal ? parseFloat(offsetXVal.replace("px", "")) : 0;
			const marginVal = tooltipStyle.getPropertyValue("--media-tooltip-container-margin");
			const currMargin = marginVal ? parseFloat(marginVal.replace("px", "")) : 0;
			const leftDiff = tooltipX - containerX + currOffsetX - currMargin;
			const rightDiff = tooltipRight - containerRight + currOffsetX + currMargin;
			if (leftDiff < 0) {
				this.style.setProperty("--media-tooltip-offset-x", `${leftDiff}px`);
				return;
			}
			if (rightDiff > 0) {
				this.style.setProperty("--media-tooltip-offset-x", `${rightDiff}px`);
				return;
			}
			this.style.removeProperty("--media-tooltip-offset-x");
		};
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
		this.arrowEl = this.shadowRoot.querySelector("#arrow");
		if (Object.prototype.hasOwnProperty.call(this, "placement")) {
			const placement = this.placement;
			delete this.placement;
			this.placement = placement;
		}
	}
	static get observedAttributes() {
		return [Attributes$12.PLACEMENT, Attributes$12.BOUNDS];
	}
	/**
	* Get or set tooltip placement
	*/
	get placement() {
		return getStringAttr(this, Attributes$12.PLACEMENT);
	}
	set placement(value) {
		setStringAttr(this, Attributes$12.PLACEMENT, value);
	}
	/**
	* Get or set tooltip container ID selector that will constrain the tooltips
	* horizontal position.
	*/
	get bounds() {
		return getStringAttr(this, Attributes$12.BOUNDS);
	}
	set bounds(value) {
		setStringAttr(this, Attributes$12.BOUNDS, value);
	}
};
MediaTooltip.shadowRootOptions = { mode: "open" };
MediaTooltip.getTemplateHTML = getTemplateHTML$14;
if (!GlobalThis.customElements.get("media-tooltip")) GlobalThis.customElements.define("media-tooltip", MediaTooltip);
var media_tooltip_default = MediaTooltip;

//#endregion
//#region node_modules/media-chrome/dist/media-chrome-button.js
var __accessCheck$22 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$22 = (obj, member, getter) => {
	__accessCheck$22(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$22 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$20 = (obj, member, value, setter) => {
	__accessCheck$22(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$10 = (obj, member, method) => {
	__accessCheck$22(obj, member, "access private method");
	return method;
};
var _mediaController$6, _clickListener, _positionTooltip, _keyupListener, _keydownListener, _setupTooltip, setupTooltip_fn;
var Attributes$11 = {
	TOOLTIP_PLACEMENT: "tooltipplacement",
	DISABLED: "disabled",
	NO_TOOLTIP: "notooltip"
};
function getTemplateHTML$13(_attrs, _props = {}) {
	return `
    <style>
      :host {
        position: relative;
        font: var(--media-font,
          var(--media-font-weight, bold)
          var(--media-font-size, 14px) /
          var(--media-text-content-height, var(--media-control-height, 24px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
        padding: var(--media-button-padding, var(--media-control-padding, 10px));
        justify-content: var(--media-button-justify-content, center);
        display: inline-flex;
        align-items: center;
        vertical-align: middle;
        box-sizing: border-box;
        transition: background .15s linear;
        pointer-events: auto;
        cursor: var(--media-cursor, pointer);
        -webkit-tap-highlight-color: transparent;
      }

      
      :host(:focus-visible) {
        box-shadow: inset 0 0 0 2px rgb(27 127 204 / .9);
        outline: 0;
      }
      
      :host(:where(:focus)) {
        box-shadow: none;
        outline: 0;
      }

      :host(:hover) {
        background: var(--media-control-hover-background, rgba(50 50 70 / .7));
      }

      svg, img, ::slotted(svg), ::slotted(img) {
        width: var(--media-button-icon-width);
        height: var(--media-button-icon-height, var(--media-control-height, 24px));
        transform: var(--media-button-icon-transform);
        transition: var(--media-button-icon-transition);
        fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
        vertical-align: middle;
        max-width: 100%;
        max-height: 100%;
        min-width: 100%;
      }

      media-tooltip {
        
        max-width: 0;
        overflow-x: clip;
        opacity: 0;
        transition: opacity .3s, max-width 0s 9s;
      }

      :host(:hover) media-tooltip,
      :host(:focus-visible) media-tooltip {
        max-width: 100vw;
        opacity: 1;
        transition: opacity .3s;
      }

      :host([notooltip]) slot[name="tooltip"] {
        display: none;
      }
    </style>

    ${this.getSlotTemplateHTML(_attrs, _props)}

    <slot name="tooltip">
      <media-tooltip part="tooltip" aria-hidden="true">
        <template shadowrootmode="${media_tooltip_default.shadowRootOptions.mode}">
          ${media_tooltip_default.getTemplateHTML({})}
        </template>
        <slot name="tooltip-content">
          ${this.getTooltipContentHTML(_attrs)}
        </slot>
      </media-tooltip>
    </slot>
  `;
}
function getSlotTemplateHTML$21(_attrs, _props) {
	return `
    <slot></slot>
  `;
}
function getTooltipContentHTML$15() {
	return "";
}
var MediaChromeButton = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$22(this, _setupTooltip);
		__privateAdd$22(this, _mediaController$6, void 0);
		this.preventClick = false;
		this.tooltipEl = null;
		__privateAdd$22(this, _clickListener, (e$1) => {
			if (!this.preventClick) this.handleClick(e$1);
			setTimeout(__privateGet$22(this, _positionTooltip), 0);
		});
		__privateAdd$22(this, _positionTooltip, () => {
			var _a$2, _b;
			(_b = (_a$2 = this.tooltipEl) == null ? void 0 : _a$2.updateXOffset) == null || _b.call(_a$2);
		});
		__privateAdd$22(this, _keyupListener, (e$1) => {
			const { key } = e$1;
			if (!this.keysUsed.includes(key)) {
				this.removeEventListener("keyup", __privateGet$22(this, _keyupListener));
				return;
			}
			if (!this.preventClick) this.handleClick(e$1);
		});
		__privateAdd$22(this, _keydownListener, (e$1) => {
			const { metaKey, altKey, key } = e$1;
			if (metaKey || altKey || !this.keysUsed.includes(key)) {
				this.removeEventListener("keyup", __privateGet$22(this, _keyupListener));
				return;
			}
			this.addEventListener("keyup", __privateGet$22(this, _keyupListener), { once: true });
		});
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			const html = this.constructor.getTemplateHTML(attrs);
			this.shadowRoot.setHTMLUnsafe ? this.shadowRoot.setHTMLUnsafe(html) : this.shadowRoot.innerHTML = html;
		}
		this.tooltipEl = this.shadowRoot.querySelector("media-tooltip");
	}
	static get observedAttributes() {
		return [
			"disabled",
			Attributes$11.TOOLTIP_PLACEMENT,
			MediaStateReceiverAttributes.MEDIA_CONTROLLER,
			MediaUIAttributes.MEDIA_LANG
		];
	}
	enable() {
		this.addEventListener("click", __privateGet$22(this, _clickListener));
		this.addEventListener("keydown", __privateGet$22(this, _keydownListener));
		this.tabIndex = 0;
	}
	disable() {
		this.removeEventListener("click", __privateGet$22(this, _clickListener));
		this.removeEventListener("keydown", __privateGet$22(this, _keydownListener));
		this.removeEventListener("keyup", __privateGet$22(this, _keyupListener));
		this.tabIndex = -1;
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2, _b, _c, _d, _e$3;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$2 = __privateGet$22(this, _mediaController$6)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
				__privateSet$20(this, _mediaController$6, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$20(this, _mediaController$6, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e$3 = (_d = __privateGet$22(this, _mediaController$6)) == null ? void 0 : _d.associateElement) == null || _e$3.call(_d, this);
			}
		} else if (attrName === "disabled" && newValue !== oldValue) if (newValue == null) this.enable();
		else this.disable();
		else if (attrName === Attributes$11.TOOLTIP_PLACEMENT && this.tooltipEl && newValue !== oldValue) this.tooltipEl.placement = newValue;
		else if (attrName === MediaUIAttributes.MEDIA_LANG) this.shadowRoot.querySelector("slot[name=\"tooltip-content\"]").innerHTML = this.constructor.getTooltipContentHTML();
		__privateGet$22(this, _positionTooltip).call(this);
	}
	connectedCallback() {
		var _a$2, _b, _c;
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-flex))`);
		if (!this.hasAttribute("disabled")) this.enable();
		else this.disable();
		this.setAttribute("role", "button");
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$20(this, _mediaController$6, (_a$2 = this.getRootNode()) == null ? void 0 : _a$2.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$22(this, _mediaController$6)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
		GlobalThis.customElements.whenDefined("media-tooltip").then(() => __privateMethod$10(this, _setupTooltip, setupTooltip_fn).call(this));
	}
	disconnectedCallback() {
		var _a$2, _b;
		this.disable();
		(_b = (_a$2 = __privateGet$22(this, _mediaController$6)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
		__privateSet$20(this, _mediaController$6, null);
		this.removeEventListener("mouseenter", __privateGet$22(this, _positionTooltip));
		this.removeEventListener("focus", __privateGet$22(this, _positionTooltip));
		this.removeEventListener("click", __privateGet$22(this, _clickListener));
	}
	get keysUsed() {
		return ["Enter", " "];
	}
	/**
	* Get or set tooltip placement
	*/
	get tooltipPlacement() {
		return getStringAttr(this, Attributes$11.TOOLTIP_PLACEMENT);
	}
	set tooltipPlacement(value) {
		setStringAttr(this, Attributes$11.TOOLTIP_PLACEMENT, value);
	}
	get mediaController() {
		return getStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER);
	}
	set mediaController(value) {
		setStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER, value);
	}
	get disabled() {
		return getBooleanAttr(this, Attributes$11.DISABLED);
	}
	set disabled(value) {
		setBooleanAttr(this, Attributes$11.DISABLED, value);
	}
	get noTooltip() {
		return getBooleanAttr(this, Attributes$11.NO_TOOLTIP);
	}
	set noTooltip(value) {
		setBooleanAttr(this, Attributes$11.NO_TOOLTIP, value);
	}
	/**
	* @abstract
	* @argument {Event} e
	*/
	handleClick(e$1) {}
};
_mediaController$6 = /* @__PURE__ */ new WeakMap();
_clickListener = /* @__PURE__ */ new WeakMap();
_positionTooltip = /* @__PURE__ */ new WeakMap();
_keyupListener = /* @__PURE__ */ new WeakMap();
_keydownListener = /* @__PURE__ */ new WeakMap();
_setupTooltip = /* @__PURE__ */ new WeakSet();
setupTooltip_fn = function() {
	this.addEventListener("mouseenter", __privateGet$22(this, _positionTooltip));
	this.addEventListener("focus", __privateGet$22(this, _positionTooltip));
	this.addEventListener("click", __privateGet$22(this, _clickListener));
	const initialPlacement = this.tooltipPlacement;
	if (initialPlacement && this.tooltipEl) this.tooltipEl.placement = initialPlacement;
};
MediaChromeButton.shadowRootOptions = { mode: "open" };
MediaChromeButton.getTemplateHTML = getTemplateHTML$13;
MediaChromeButton.getSlotTemplateHTML = getSlotTemplateHTML$21;
MediaChromeButton.getTooltipContentHTML = getTooltipContentHTML$15;
if (!GlobalThis.customElements.get("media-chrome-button")) GlobalThis.customElements.define("media-chrome-button", MediaChromeButton);

//#endregion
//#region node_modules/media-chrome/dist/media-airplay-button.js
var airplayIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.13 3H3.87a.87.87 0 0 0-.87.87v13.26a.87.87 0 0 0 .87.87h3.4L9 16H5V5h16v11h-4l1.72 2h3.4a.87.87 0 0 0 .87-.87V3.87a.87.87 0 0 0-.86-.87Zm-8.75 11.44a.5.5 0 0 0-.76 0l-4.91 5.73a.5.5 0 0 0 .38.83h9.82a.501.501 0 0 0 .38-.83l-4.91-5.73Z"/>
</svg>
`;
function getSlotTemplateHTML$20(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=icon] slot:not([name=exit]) {
        display: none !important;
      }

      
      :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=icon] slot:not([name=enter]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=tooltip-enter],
      :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=tooltip-exit] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="enter">${airplayIcon}</slot>
      <slot name="exit">${airplayIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$14() {
	return `
    <slot name="tooltip-enter">${t("start airplay")}</slot>
    <slot name="tooltip-exit">${t("stop airplay")}</slot>
  `;
}
var updateAriaLabel$7 = (el) => {
	const label = el.mediaIsAirplaying ? t("stop airplay") : t("start airplay");
	el.setAttribute("aria-label", label);
};
var MediaAirplayButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_IS_AIRPLAYING,
			MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$7(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_IS_AIRPLAYING) updateAriaLabel$7(this);
	}
	/**
	* Are we currently airplaying
	*/
	get mediaIsAirplaying() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING);
	}
	set mediaIsAirplaying(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING, value);
	}
	/**
	* Airplay unavailability state
	*/
	get mediaAirplayUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE);
	}
	set mediaAirplayUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE, value);
	}
	handleClick() {
		const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_AIRPLAY_REQUEST, {
			composed: true,
			bubbles: true
		});
		this.dispatchEvent(evt);
	}
};
MediaAirplayButton.getSlotTemplateHTML = getSlotTemplateHTML$20;
MediaAirplayButton.getTooltipContentHTML = getTooltipContentHTML$14;
if (!GlobalThis.customElements.get("media-airplay-button")) GlobalThis.customElements.define("media-airplay-button", MediaAirplayButton);

//#endregion
//#region node_modules/media-chrome/dist/media-captions-button.js
var ccIconOn$1 = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.83 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.39 9.45a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.92 3.92 0 0 1 .92-2.77 3.18 3.18 0 0 1 2.43-1 2.94 2.94 0 0 1 2.13.78c.364.359.62.813.74 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.17 1.61 1.61 0 0 0-1.29.58 2.79 2.79 0 0 0-.5 1.89 3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.48 1.48 0 0 0 1-.37 2.1 2.1 0 0 0 .59-1.14l1.4.44a3.23 3.23 0 0 1-1.07 1.69Zm7.22 0a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.88 3.88 0 0 1 .93-2.77 3.14 3.14 0 0 1 2.42-1 3 3 0 0 1 2.16.82 2.8 2.8 0 0 1 .73 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.21 1.61 1.61 0 0 0-1.29.58A2.79 2.79 0 0 0 15 12a3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.44 1.44 0 0 0 1-.37 2.1 2.1 0 0 0 .6-1.15l1.4.44a3.17 3.17 0 0 1-1.1 1.7Z"/>
</svg>`;
var ccIconOff$1 = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M17.73 14.09a1.4 1.4 0 0 1-1 .37 1.579 1.579 0 0 1-1.27-.58A3 3 0 0 1 15 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34A2.89 2.89 0 0 0 19 9.07a3 3 0 0 0-2.14-.78 3.14 3.14 0 0 0-2.42 1 3.91 3.91 0 0 0-.93 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.17 3.17 0 0 0 1.07-1.74l-1.4-.45c-.083.43-.3.822-.62 1.12Zm-7.22 0a1.43 1.43 0 0 1-1 .37 1.58 1.58 0 0 1-1.27-.58A3 3 0 0 1 7.76 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34a2.81 2.81 0 0 0-.74-1.32 2.94 2.94 0 0 0-2.13-.78 3.18 3.18 0 0 0-2.43 1 4 4 0 0 0-.92 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.23 3.23 0 0 0 1.07-1.74l-1.4-.45a2.06 2.06 0 0 1-.6 1.07Zm12.32-8.41a2.59 2.59 0 0 0-2.3-2.51C18.72 3.05 15.86 3 13 3c-2.86 0-5.72.05-7.53.17a2.59 2.59 0 0 0-2.3 2.51c-.23 4.207-.23 8.423 0 12.63a2.57 2.57 0 0 0 2.3 2.5c1.81.13 4.67.19 7.53.19 2.86 0 5.72-.06 7.53-.19a2.57 2.57 0 0 0 2.3-2.5c.23-4.207.23-8.423 0-12.63Zm-1.49 12.53a1.11 1.11 0 0 1-.91 1.11c-1.67.11-4.45.18-7.43.18-2.98 0-5.76-.07-7.43-.18a1.11 1.11 0 0 1-.91-1.11c-.21-4.14-.21-8.29 0-12.43a1.11 1.11 0 0 1 .91-1.11C7.24 4.56 10 4.49 13 4.49s5.76.07 7.43.18a1.11 1.11 0 0 1 .91 1.11c.21 4.14.21 8.29 0 12.43Z"/>
</svg>`;
function getSlotTemplateHTML$19(_attrs) {
	return `
    <style>
      :host([aria-checked="true"]) slot[name=off] {
        display: none !important;
      }

      
      :host(:not([aria-checked="true"])) slot[name=on] {
        display: none !important;
      }

      :host([aria-checked="true"]) slot[name=tooltip-enable],
      :host(:not([aria-checked="true"])) slot[name=tooltip-disable] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="on">${ccIconOn$1}</slot>
      <slot name="off">${ccIconOff$1}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$13() {
	return `
    <slot name="tooltip-enable">${t("Enable captions")}</slot>
    <slot name="tooltip-disable">${t("Disable captions")}</slot>
  `;
}
var updateAriaChecked$1 = (el) => {
	el.setAttribute("aria-checked", areSubsOn(el).toString());
};
var MediaCaptionsButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_SUBTITLES_LIST,
			MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
		];
	}
	connectedCallback() {
		super.connectedCallback();
		this.setAttribute("role", "switch");
		this.setAttribute("aria-label", t("closed captions"));
		updateAriaChecked$1(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_SHOWING) updateAriaChecked$1(this);
	}
	/**
	* An array of TextTrack-like objects.
	* Objects must have the properties: kind, language, and label.
	*/
	get mediaSubtitlesList() {
		return getSubtitlesListAttr$2(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST);
	}
	set mediaSubtitlesList(list) {
		setSubtitlesListAttr$2(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST, list);
	}
	/**
	* An array of TextTrack-like objects.
	* Objects must have the properties: kind, language, and label.
	*/
	get mediaSubtitlesShowing() {
		return getSubtitlesListAttr$2(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);
	}
	set mediaSubtitlesShowing(list) {
		setSubtitlesListAttr$2(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING, list);
	}
	handleClick() {
		this.dispatchEvent(new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaCaptionsButton.getSlotTemplateHTML = getSlotTemplateHTML$19;
MediaCaptionsButton.getTooltipContentHTML = getTooltipContentHTML$13;
var getSubtitlesListAttr$2 = (el, attrName) => {
	const attrVal = el.getAttribute(attrName);
	return attrVal ? parseTextTracksStr(attrVal) : [];
};
var setSubtitlesListAttr$2 = (el, attrName, list) => {
	if (!(list == null ? void 0 : list.length)) {
		el.removeAttribute(attrName);
		return;
	}
	const newValStr = stringifyTextTrackList(list);
	if (el.getAttribute(attrName) === newValStr) return;
	el.setAttribute(attrName, newValStr);
};
if (!GlobalThis.customElements.get("media-captions-button")) GlobalThis.customElements.define("media-captions-button", MediaCaptionsButton);

//#endregion
//#region node_modules/media-chrome/dist/media-cast-button.js
var enterIcon = `<svg aria-hidden="true" viewBox="0 0 24 24"><g><path class="cast_caf_icon_arch0" d="M1,18 L1,21 L4,21 C4,19.3 2.66,18 1,18 L1,18 Z"/><path class="cast_caf_icon_arch1" d="M1,14 L1,16 C3.76,16 6,18.2 6,21 L8,21 C8,17.13 4.87,14 1,14 L1,14 Z"/><path class="cast_caf_icon_arch2" d="M1,10 L1,12 C5.97,12 10,16.0 10,21 L12,21 C12,14.92 7.07,10 1,10 L1,10 Z"/><path class="cast_caf_icon_box" d="M21,3 L3,3 C1.9,3 1,3.9 1,5 L1,8 L3,8 L3,5 L21,5 L21,19 L14,19 L14,21 L21,21 C22.1,21 23,20.1 23,19 L23,5 C23,3.9 22.1,3 21,3 L21,3 Z"/></g></svg>`;
var exitIcon = `<svg aria-hidden="true" viewBox="0 0 24 24"><g><path class="cast_caf_icon_arch0" d="M1,18 L1,21 L4,21 C4,19.3 2.66,18 1,18 L1,18 Z"/><path class="cast_caf_icon_arch1" d="M1,14 L1,16 C3.76,16 6,18.2 6,21 L8,21 C8,17.13 4.87,14 1,14 L1,14 Z"/><path class="cast_caf_icon_arch2" d="M1,10 L1,12 C5.97,12 10,16.0 10,21 L12,21 C12,14.92 7.07,10 1,10 L1,10 Z"/><path class="cast_caf_icon_box" d="M21,3 L3,3 C1.9,3 1,3.9 1,5 L1,8 L3,8 L3,5 L21,5 L21,19 L14,19 L14,21 L21,21 C22.1,21 23,20.1 23,19 L23,5 C23,3.9 22.1,3 21,3 L21,3 Z"/><path class="cast_caf_icon_boxfill" d="M5,7 L5,8.63 C8,8.6 13.37,14 13.37,17 L19,17 L19,7 Z"/></g></svg>`;
function getSlotTemplateHTML$18(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_IS_CASTING}]) slot[name=icon] slot:not([name=exit]) {
        display: none !important;
      }

      
      :host(:not([${MediaUIAttributes.MEDIA_IS_CASTING}])) slot[name=icon] slot:not([name=enter]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_IS_CASTING}]) slot[name=tooltip-enter],
      :host(:not([${MediaUIAttributes.MEDIA_IS_CASTING}])) slot[name=tooltip-exit] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="enter">${enterIcon}</slot>
      <slot name="exit">${exitIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$12() {
	return `
    <slot name="tooltip-enter">${t("Start casting")}</slot>
    <slot name="tooltip-exit">${t("Stop casting")}</slot>
  `;
}
var updateAriaLabel$6 = (el) => {
	const label = el.mediaIsCasting ? t("stop casting") : t("start casting");
	el.setAttribute("aria-label", label);
};
var MediaCastButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_IS_CASTING,
			MediaUIAttributes.MEDIA_CAST_UNAVAILABLE
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$6(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_IS_CASTING) updateAriaLabel$6(this);
	}
	/**
	* @type {boolean} Are we currently casting
	*/
	get mediaIsCasting() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_CASTING);
	}
	set mediaIsCasting(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_CASTING, value);
	}
	/**
	* @type {string | undefined} Cast unavailability state
	*/
	get mediaCastUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_CAST_UNAVAILABLE);
	}
	set mediaCastUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_CAST_UNAVAILABLE, value);
	}
	handleClick() {
		const eventName = this.mediaIsCasting ? MediaUIEvents.MEDIA_EXIT_CAST_REQUEST : MediaUIEvents.MEDIA_ENTER_CAST_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaCastButton.getSlotTemplateHTML = getSlotTemplateHTML$18;
MediaCastButton.getTooltipContentHTML = getTooltipContentHTML$12;
if (!GlobalThis.customElements.get("media-cast-button")) GlobalThis.customElements.define("media-cast-button", MediaCastButton);

//#endregion
//#region node_modules/media-chrome/dist/media-chrome-dialog.js
var __accessCheck$21 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$21 = (obj, member, getter) => {
	__accessCheck$21(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$21 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$19 = (obj, member, value, setter) => {
	__accessCheck$21(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$9 = (obj, member, method) => {
	__accessCheck$21(obj, member, "access private method");
	return method;
};
var _isInit, _previouslyFocused$1, _invokerElement$1, _init, init_fn, _handleOpen$1, handleOpen_fn$1, _handleClosed$1, handleClosed_fn$1, _handleInvoke$1, handleInvoke_fn$1, _handleFocusOut$1, handleFocusOut_fn$1, _handleKeyDown$2, handleKeyDown_fn$2;
function getTemplateHTML$12(_attrs) {
	return `
    <style>
      :host {
        font: var(--media-font,
          var(--media-font-weight, normal)
          var(--media-font-size, 14px) /
          var(--media-text-content-height, var(--media-control-height, 24px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        display: var(--media-dialog-display, inline-flex);
        justify-content: center;
        align-items: center;
        
        transition-behavior: allow-discrete;
        visibility: hidden;
        opacity: 0;
        transform: translateY(2px) scale(.99);
        pointer-events: none;
      }

      :host([open]) {
        transition: display .2s, visibility 0s, opacity .2s ease-out, transform .15s ease-out;
        visibility: visible;
        opacity: 1;
        transform: translateY(0) scale(1);
        pointer-events: auto;
      }

      #content {
        display: flex;
        position: relative;
        box-sizing: border-box;
        width: min(320px, 100%);
        word-wrap: break-word;
        max-height: 100%;
        overflow: auto;
        text-align: center;
        line-height: 1.4;
      }
    </style>
    ${this.getSlotTemplateHTML(_attrs)}
  `;
}
function getSlotTemplateHTML$17(_attrs) {
	return `
    <slot id="content"></slot>
  `;
}
var Attributes$10 = {
	OPEN: "open",
	ANCHOR: "anchor"
};
var MediaChromeDialog = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$21(this, _init);
		__privateAdd$21(this, _handleOpen$1);
		__privateAdd$21(this, _handleClosed$1);
		__privateAdd$21(this, _handleInvoke$1);
		__privateAdd$21(this, _handleFocusOut$1);
		__privateAdd$21(this, _handleKeyDown$2);
		__privateAdd$21(this, _isInit, false);
		__privateAdd$21(this, _previouslyFocused$1, null);
		__privateAdd$21(this, _invokerElement$1, null);
		this.addEventListener("invoke", this);
		this.addEventListener("focusout", this);
		this.addEventListener("keydown", this);
	}
	static get observedAttributes() {
		return [Attributes$10.OPEN, Attributes$10.ANCHOR];
	}
	get open() {
		return getBooleanAttr(this, Attributes$10.OPEN);
	}
	set open(value) {
		setBooleanAttr(this, Attributes$10.OPEN, value);
	}
	handleEvent(event) {
		switch (event.type) {
			case "invoke":
				__privateMethod$9(this, _handleInvoke$1, handleInvoke_fn$1).call(this, event);
				break;
			case "focusout":
				__privateMethod$9(this, _handleFocusOut$1, handleFocusOut_fn$1).call(this, event);
				break;
			case "keydown":
				__privateMethod$9(this, _handleKeyDown$2, handleKeyDown_fn$2).call(this, event);
				break;
		}
	}
	connectedCallback() {
		__privateMethod$9(this, _init, init_fn).call(this);
		if (!this.role) this.role = "dialog";
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		__privateMethod$9(this, _init, init_fn).call(this);
		if (attrName === Attributes$10.OPEN && newValue !== oldValue) if (this.open) __privateMethod$9(this, _handleOpen$1, handleOpen_fn$1).call(this);
		else __privateMethod$9(this, _handleClosed$1, handleClosed_fn$1).call(this);
	}
	focus() {
		__privateSet$19(this, _previouslyFocused$1, getActiveElement());
		const focusCancelled = !this.dispatchEvent(new Event("focus", {
			composed: true,
			cancelable: true
		}));
		const focusInCancelled = !this.dispatchEvent(new Event("focusin", {
			composed: true,
			bubbles: true,
			cancelable: true
		}));
		if (focusCancelled || focusInCancelled) return;
		this.querySelector("[autofocus], [tabindex]:not([tabindex=\"-1\"]), [role=\"menu\"]")?.focus();
	}
	get keysUsed() {
		return ["Escape", "Tab"];
	}
};
_isInit = /* @__PURE__ */ new WeakMap();
_previouslyFocused$1 = /* @__PURE__ */ new WeakMap();
_invokerElement$1 = /* @__PURE__ */ new WeakMap();
_init = /* @__PURE__ */ new WeakSet();
init_fn = function() {
	if (__privateGet$21(this, _isInit)) return;
	__privateSet$19(this, _isInit, true);
	if (!this.shadowRoot) {
		this.attachShadow(this.constructor.shadowRootOptions);
		const attrs = namedNodeMapToObject(this.attributes);
		this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		queueMicrotask(() => {
			const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
			style.setProperty("transition", `display .15s, visibility .15s, opacity .15s ease-in, transform .15s ease-in`);
		});
	}
};
_handleOpen$1 = /* @__PURE__ */ new WeakSet();
handleOpen_fn$1 = function() {
	var _a$2;
	(_a$2 = __privateGet$21(this, _invokerElement$1)) == null || _a$2.setAttribute("aria-expanded", "true");
	this.dispatchEvent(new Event("open", {
		composed: true,
		bubbles: true
	}));
	this.addEventListener("transitionend", () => this.focus(), { once: true });
};
_handleClosed$1 = /* @__PURE__ */ new WeakSet();
handleClosed_fn$1 = function() {
	var _a$2;
	(_a$2 = __privateGet$21(this, _invokerElement$1)) == null || _a$2.setAttribute("aria-expanded", "false");
	this.dispatchEvent(new Event("close", {
		composed: true,
		bubbles: true
	}));
};
_handleInvoke$1 = /* @__PURE__ */ new WeakSet();
handleInvoke_fn$1 = function(event) {
	__privateSet$19(this, _invokerElement$1, event.relatedTarget);
	if (!containsComposedNode(this, event.relatedTarget)) this.open = !this.open;
};
_handleFocusOut$1 = /* @__PURE__ */ new WeakSet();
handleFocusOut_fn$1 = function(event) {
	var _a$2;
	if (!containsComposedNode(this, event.relatedTarget)) {
		(_a$2 = __privateGet$21(this, _previouslyFocused$1)) == null || _a$2.focus();
		if (__privateGet$21(this, _invokerElement$1) && __privateGet$21(this, _invokerElement$1) !== event.relatedTarget && this.open) this.open = false;
	}
};
_handleKeyDown$2 = /* @__PURE__ */ new WeakSet();
handleKeyDown_fn$2 = function(event) {
	var _a$2, _b, _c, _d, _e$3;
	const { key, ctrlKey, altKey, metaKey } = event;
	if (ctrlKey || altKey || metaKey) return;
	if (!this.keysUsed.includes(key)) return;
	event.preventDefault();
	event.stopPropagation();
	if (key === "Tab") {
		if (event.shiftKey) (_b = (_a$2 = this.previousElementSibling) == null ? void 0 : _a$2.focus) == null || _b.call(_a$2);
		else (_d = (_c = this.nextElementSibling) == null ? void 0 : _c.focus) == null || _d.call(_c);
		this.blur();
	} else if (key === "Escape") {
		(_e$3 = __privateGet$21(this, _previouslyFocused$1)) == null || _e$3.focus();
		this.open = false;
	}
};
MediaChromeDialog.shadowRootOptions = { mode: "open" };
MediaChromeDialog.getTemplateHTML = getTemplateHTML$12;
MediaChromeDialog.getSlotTemplateHTML = getSlotTemplateHTML$17;
if (!GlobalThis.customElements.get("media-chrome-dialog")) GlobalThis.customElements.define("media-chrome-dialog", MediaChromeDialog);

//#endregion
//#region node_modules/media-chrome/dist/media-chrome-range.js
var __accessCheck$20 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$20 = (obj, member, getter) => {
	__accessCheck$20(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$20 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$18 = (obj, member, value, setter) => {
	__accessCheck$20(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$8 = (obj, member, method) => {
	__accessCheck$20(obj, member, "access private method");
	return method;
};
var _mediaController$5, _isInputTarget, _startpoint, _endpoint, _cssRules, _segments, _onFocusIn, _onFocusOut, _updateComputedStyles, _updateActiveSegment, updateActiveSegment_fn, _enableUserEvents, enableUserEvents_fn, _disableUserEvents, disableUserEvents_fn, _handlePointerDown, handlePointerDown_fn, _handlePointerEnter, handlePointerEnter_fn, _handlePointerUp, handlePointerUp_fn, _handlePointerLeave, handlePointerLeave_fn, _handlePointerMove$1, handlePointerMove_fn$1;
function getTemplateHTML$11(_attrs) {
	return `
    <style>
      :host {
        --_focus-box-shadow: var(--media-focus-box-shadow, inset 0 0 0 2px rgb(27 127 204 / .9));
        --_media-range-padding: var(--media-range-padding, var(--media-control-padding, 10px));

        box-shadow: var(--_focus-visible-box-shadow, none);
        background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
        height: calc(var(--media-control-height, 24px) + 2 * var(--_media-range-padding));
        display: inline-flex;
        align-items: center;
        
        vertical-align: middle;
        box-sizing: border-box;
        position: relative;
        width: 100px;
        transition: background .15s linear;
        cursor: var(--media-cursor, pointer);
        pointer-events: auto;
        touch-action: none; 
      }

      
      input[type=range]:focus {
        outline: 0;
      }
      input[type=range]:focus::-webkit-slider-runnable-track {
        outline: 0;
      }

      :host(:hover) {
        background: var(--media-control-hover-background, rgb(50 50 70 / .7));
      }

      #leftgap {
        padding-left: var(--media-range-padding-left, var(--_media-range-padding));
      }

      #rightgap {
        padding-right: var(--media-range-padding-right, var(--_media-range-padding));
      }

      #startpoint,
      #endpoint {
        position: absolute;
      }

      #endpoint {
        right: 0;
      }

      #container {
        
        width: var(--media-range-track-width, 100%);
        transform: translate(var(--media-range-track-translate-x, 0px), var(--media-range-track-translate-y, 0px));
        position: relative;
        height: 100%;
        display: flex;
        align-items: center;
        min-width: 40px;
      }

      #range {
        
        display: var(--media-time-range-hover-display, block);
        bottom: var(--media-time-range-hover-bottom, -7px);
        height: var(--media-time-range-hover-height, max(100% + 7px, 25px));
        width: 100%;
        position: absolute;
        cursor: var(--media-cursor, pointer);

        -webkit-appearance: none; 
        -webkit-tap-highlight-color: transparent;
        background: transparent; 
        margin: 0;
        z-index: 1;
      }

      @media (hover: hover) {
        #range {
          bottom: var(--media-time-range-hover-bottom, -5px);
          height: var(--media-time-range-hover-height, max(100% + 5px, 20px));
        }
      }

      
      
      #range::-webkit-slider-thumb {
        -webkit-appearance: none;
        background: transparent;
        width: .1px;
        height: .1px;
      }

      
      #range::-moz-range-thumb {
        background: transparent;
        border: transparent;
        width: .1px;
        height: .1px;
      }

      #appearance {
        height: var(--media-range-track-height, 4px);
        display: flex;
        flex-direction: column;
        justify-content: center;
        width: 100%;
        position: absolute;
        
        will-change: transform;
      }

      #track {
        background: var(--media-range-track-background, rgb(255 255 255 / .2));
        border-radius: var(--media-range-track-border-radius, 1px);
        border: var(--media-range-track-border, none);
        outline: var(--media-range-track-outline);
        outline-offset: var(--media-range-track-outline-offset);
        backdrop-filter: var(--media-range-track-backdrop-filter);
        -webkit-backdrop-filter: var(--media-range-track-backdrop-filter);
        box-shadow: var(--media-range-track-box-shadow, none);
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
      }

      #progress,
      #pointer {
        position: absolute;
        height: 100%;
        will-change: width;
      }

      #progress {
        background: var(--media-range-bar-color, var(--media-primary-color, rgb(238 238 238)));
        transition: var(--media-range-track-transition);
      }

      #pointer {
        background: var(--media-range-track-pointer-background);
        border-right: var(--media-range-track-pointer-border-right);
        transition: visibility .25s, opacity .25s;
        visibility: hidden;
        opacity: 0;
      }

      @media (hover: hover) {
        :host(:hover) #pointer {
          transition: visibility .5s, opacity .5s;
          visibility: visible;
          opacity: 1;
        }
      }

      #thumb,
      ::slotted([slot=thumb]) {
        width: var(--media-range-thumb-width, 10px);
        height: var(--media-range-thumb-height, 10px);
        transition: var(--media-range-thumb-transition);
        transform: var(--media-range-thumb-transform, none);
        opacity: var(--media-range-thumb-opacity, 1);
        translate: -50%;
        position: absolute;
        left: 0;
        cursor: var(--media-cursor, pointer);
      }

      #thumb {
        border-radius: var(--media-range-thumb-border-radius, 10px);
        background: var(--media-range-thumb-background, var(--media-primary-color, rgb(238 238 238)));
        box-shadow: var(--media-range-thumb-box-shadow, 1px 1px 1px transparent);
        border: var(--media-range-thumb-border, none);
      }

      :host([disabled]) #thumb {
        background-color: #777;
      }

      .segments #appearance {
        height: var(--media-range-segment-hover-height, 7px);
      }

      #track {
        clip-path: url(#segments-clipping);
      }

      #segments {
        --segments-gap: var(--media-range-segments-gap, 2px);
        position: absolute;
        width: 100%;
        height: 100%;
      }

      #segments-clipping {
        transform: translateX(calc(var(--segments-gap) / 2));
      }

      #segments-clipping:empty {
        display: none;
      }

      #segments-clipping rect {
        height: var(--media-range-track-height, 4px);
        y: calc((var(--media-range-segment-hover-height, 7px) - var(--media-range-track-height, 4px)) / 2);
        transition: var(--media-range-segment-transition, transform .1s ease-in-out);
        transform: var(--media-range-segment-transform, scaleY(1));
        transform-origin: center;
      }
    </style>
    <div id="leftgap"></div>
    <div id="container">
      <div id="startpoint"></div>
      <div id="endpoint"></div>
      <div id="appearance">
        <div id="track" part="track">
          <div id="pointer"></div>
          <div id="progress" part="progress"></div>
        </div>
        <slot name="thumb">
          <div id="thumb" part="thumb"></div>
        </slot>
        <svg id="segments"><clipPath id="segments-clipping"></clipPath></svg>
      </div>
      <input id="range" type="range" min="0" max="1" step="any" value="0">
    </div>
    <div id="rightgap"></div>
  `;
}
var MediaChromeRange = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$20(this, _updateActiveSegment);
		__privateAdd$20(this, _enableUserEvents);
		__privateAdd$20(this, _disableUserEvents);
		__privateAdd$20(this, _handlePointerDown);
		__privateAdd$20(this, _handlePointerEnter);
		__privateAdd$20(this, _handlePointerUp);
		__privateAdd$20(this, _handlePointerLeave);
		__privateAdd$20(this, _handlePointerMove$1);
		__privateAdd$20(this, _mediaController$5, void 0);
		__privateAdd$20(this, _isInputTarget, void 0);
		__privateAdd$20(this, _startpoint, void 0);
		__privateAdd$20(this, _endpoint, void 0);
		__privateAdd$20(this, _cssRules, {});
		__privateAdd$20(this, _segments, []);
		__privateAdd$20(this, _onFocusIn, () => {
			if (this.range.matches(":focus-visible")) {
				const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
				style.setProperty("--_focus-visible-box-shadow", "var(--_focus-box-shadow)");
			}
		});
		__privateAdd$20(this, _onFocusOut, () => {
			const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
			style.removeProperty("--_focus-visible-box-shadow");
		});
		__privateAdd$20(this, _updateComputedStyles, () => {
			const clipping = this.shadowRoot.querySelector("#segments-clipping");
			if (clipping) clipping.parentNode.append(clipping);
		});
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			const html = this.constructor.getTemplateHTML(attrs);
			this.shadowRoot.setHTMLUnsafe ? this.shadowRoot.setHTMLUnsafe(html) : this.shadowRoot.innerHTML = html;
		}
		this.container = this.shadowRoot.querySelector("#container");
		__privateSet$18(this, _startpoint, this.shadowRoot.querySelector("#startpoint"));
		__privateSet$18(this, _endpoint, this.shadowRoot.querySelector("#endpoint"));
		this.range = this.shadowRoot.querySelector("#range");
		this.appearance = this.shadowRoot.querySelector("#appearance");
	}
	static get observedAttributes() {
		return [
			"disabled",
			"aria-disabled",
			MediaStateReceiverAttributes.MEDIA_CONTROLLER
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2, _b, _c, _d, _e$3;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$2 = __privateGet$20(this, _mediaController$5)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
				__privateSet$18(this, _mediaController$5, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$18(this, _mediaController$5, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e$3 = (_d = __privateGet$20(this, _mediaController$5)) == null ? void 0 : _d.associateElement) == null || _e$3.call(_d, this);
			}
		} else if (attrName === "disabled" || attrName === "aria-disabled" && oldValue !== newValue) if (newValue == null) {
			this.range.removeAttribute(attrName);
			__privateMethod$8(this, _enableUserEvents, enableUserEvents_fn).call(this);
		} else {
			this.range.setAttribute(attrName, newValue);
			__privateMethod$8(this, _disableUserEvents, disableUserEvents_fn).call(this);
		}
	}
	connectedCallback() {
		var _a$2, _b, _c;
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-flex))`);
		__privateGet$20(this, _cssRules).pointer = getOrInsertCSSRule(this.shadowRoot, "#pointer");
		__privateGet$20(this, _cssRules).progress = getOrInsertCSSRule(this.shadowRoot, "#progress");
		__privateGet$20(this, _cssRules).thumb = getOrInsertCSSRule(this.shadowRoot, "#thumb, ::slotted([slot=\"thumb\"])");
		__privateGet$20(this, _cssRules).activeSegment = getOrInsertCSSRule(this.shadowRoot, "#segments-clipping rect:nth-child(0)");
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$18(this, _mediaController$5, (_a$2 = this.getRootNode()) == null ? void 0 : _a$2.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$20(this, _mediaController$5)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
		this.updateBar();
		this.shadowRoot.addEventListener("focusin", __privateGet$20(this, _onFocusIn));
		this.shadowRoot.addEventListener("focusout", __privateGet$20(this, _onFocusOut));
		__privateMethod$8(this, _enableUserEvents, enableUserEvents_fn).call(this);
		observeResize(this.container, __privateGet$20(this, _updateComputedStyles));
	}
	disconnectedCallback() {
		var _a$2, _b;
		__privateMethod$8(this, _disableUserEvents, disableUserEvents_fn).call(this);
		(_b = (_a$2 = __privateGet$20(this, _mediaController$5)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
		__privateSet$18(this, _mediaController$5, null);
		this.shadowRoot.removeEventListener("focusin", __privateGet$20(this, _onFocusIn));
		this.shadowRoot.removeEventListener("focusout", __privateGet$20(this, _onFocusOut));
		unobserveResize(this.container, __privateGet$20(this, _updateComputedStyles));
	}
	updatePointerBar(evt) {
		var _a$2;
		(_a$2 = __privateGet$20(this, _cssRules).pointer) == null || _a$2.style.setProperty("width", `${this.getPointerRatio(evt) * 100}%`);
	}
	updateBar() {
		var _a$2, _b;
		const rangePercent = this.range.valueAsNumber * 100;
		(_a$2 = __privateGet$20(this, _cssRules).progress) == null || _a$2.style.setProperty("width", `${rangePercent}%`);
		(_b = __privateGet$20(this, _cssRules).thumb) == null || _b.style.setProperty("left", `${rangePercent}%`);
	}
	updateSegments(segments) {
		const clipping = this.shadowRoot.querySelector("#segments-clipping");
		clipping.textContent = "";
		this.container.classList.toggle("segments", !!(segments == null ? void 0 : segments.length));
		if (!(segments == null ? void 0 : segments.length)) return;
		const normalized = [.../* @__PURE__ */ new Set([
			+this.range.min,
			...segments.flatMap((s$2) => [s$2.start, s$2.end]),
			+this.range.max
		])];
		__privateSet$18(this, _segments, [...normalized]);
		const lastMarker = normalized.pop();
		for (const [i$1, marker] of normalized.entries()) {
			const [isFirst, isLast] = [i$1 === 0, i$1 === normalized.length - 1];
			const x$5 = isFirst ? "calc(var(--segments-gap) / -1)" : `${marker * 100}%`;
			const width = `calc(${((isLast ? lastMarker : normalized[i$1 + 1]) - marker) * 100}%${isFirst || isLast ? "" : ` - var(--segments-gap)`})`;
			const segmentEl = Document$1.createElementNS("http://www.w3.org/2000/svg", "rect");
			const cssRule = getOrInsertCSSRule(this.shadowRoot, `#segments-clipping rect:nth-child(${i$1 + 1})`);
			cssRule.style.setProperty("x", x$5);
			cssRule.style.setProperty("width", width);
			clipping.append(segmentEl);
		}
	}
	getPointerRatio(evt) {
		return getPointProgressOnLine(evt.clientX, evt.clientY, __privateGet$20(this, _startpoint).getBoundingClientRect(), __privateGet$20(this, _endpoint).getBoundingClientRect());
	}
	get dragging() {
		return this.hasAttribute("dragging");
	}
	handleEvent(evt) {
		switch (evt.type) {
			case "pointermove":
				__privateMethod$8(this, _handlePointerMove$1, handlePointerMove_fn$1).call(this, evt);
				break;
			case "input":
				this.updateBar();
				break;
			case "pointerenter":
				__privateMethod$8(this, _handlePointerEnter, handlePointerEnter_fn).call(this, evt);
				break;
			case "pointerdown":
				__privateMethod$8(this, _handlePointerDown, handlePointerDown_fn).call(this, evt);
				break;
			case "pointerup":
				__privateMethod$8(this, _handlePointerUp, handlePointerUp_fn).call(this);
				break;
			case "pointerleave":
				__privateMethod$8(this, _handlePointerLeave, handlePointerLeave_fn).call(this);
				break;
		}
	}
	get keysUsed() {
		return [
			"ArrowUp",
			"ArrowRight",
			"ArrowDown",
			"ArrowLeft"
		];
	}
};
_mediaController$5 = /* @__PURE__ */ new WeakMap();
_isInputTarget = /* @__PURE__ */ new WeakMap();
_startpoint = /* @__PURE__ */ new WeakMap();
_endpoint = /* @__PURE__ */ new WeakMap();
_cssRules = /* @__PURE__ */ new WeakMap();
_segments = /* @__PURE__ */ new WeakMap();
_onFocusIn = /* @__PURE__ */ new WeakMap();
_onFocusOut = /* @__PURE__ */ new WeakMap();
_updateComputedStyles = /* @__PURE__ */ new WeakMap();
_updateActiveSegment = /* @__PURE__ */ new WeakSet();
updateActiveSegment_fn = function(evt) {
	const rule = __privateGet$20(this, _cssRules).activeSegment;
	if (!rule) return;
	const pointerRatio = this.getPointerRatio(evt);
	const selectorText = `#segments-clipping rect:nth-child(${__privateGet$20(this, _segments).findIndex((start, i$1, arr) => {
		const end = arr[i$1 + 1];
		return end != null && pointerRatio >= start && pointerRatio <= end;
	}) + 1})`;
	if (rule.selectorText != selectorText || !rule.style.transform) {
		rule.selectorText = selectorText;
		rule.style.setProperty("transform", "var(--media-range-segment-hover-transform, scaleY(2))");
	}
};
_enableUserEvents = /* @__PURE__ */ new WeakSet();
enableUserEvents_fn = function() {
	if (this.hasAttribute("disabled")) return;
	this.addEventListener("input", this);
	this.addEventListener("pointerdown", this);
	this.addEventListener("pointerenter", this);
};
_disableUserEvents = /* @__PURE__ */ new WeakSet();
disableUserEvents_fn = function() {
	var _a$2, _b;
	this.removeEventListener("input", this);
	this.removeEventListener("pointerdown", this);
	this.removeEventListener("pointerenter", this);
	(_a$2 = GlobalThis.window) == null || _a$2.removeEventListener("pointerup", this);
	(_b = GlobalThis.window) == null || _b.removeEventListener("pointermove", this);
};
_handlePointerDown = /* @__PURE__ */ new WeakSet();
handlePointerDown_fn = function(evt) {
	var _a$2;
	__privateSet$18(this, _isInputTarget, evt.composedPath().includes(this.range));
	(_a$2 = GlobalThis.window) == null || _a$2.addEventListener("pointerup", this);
};
_handlePointerEnter = /* @__PURE__ */ new WeakSet();
handlePointerEnter_fn = function(evt) {
	var _a$2;
	if (evt.pointerType !== "mouse") __privateMethod$8(this, _handlePointerDown, handlePointerDown_fn).call(this, evt);
	this.addEventListener("pointerleave", this);
	(_a$2 = GlobalThis.window) == null || _a$2.addEventListener("pointermove", this);
};
_handlePointerUp = /* @__PURE__ */ new WeakSet();
handlePointerUp_fn = function() {
	var _a$2;
	(_a$2 = GlobalThis.window) == null || _a$2.removeEventListener("pointerup", this);
	this.toggleAttribute("dragging", false);
	this.range.disabled = this.hasAttribute("disabled");
};
_handlePointerLeave = /* @__PURE__ */ new WeakSet();
handlePointerLeave_fn = function() {
	var _a$2, _b;
	this.removeEventListener("pointerleave", this);
	(_a$2 = GlobalThis.window) == null || _a$2.removeEventListener("pointermove", this);
	this.toggleAttribute("dragging", false);
	this.range.disabled = this.hasAttribute("disabled");
	(_b = __privateGet$20(this, _cssRules).activeSegment) == null || _b.style.removeProperty("transform");
};
_handlePointerMove$1 = /* @__PURE__ */ new WeakSet();
handlePointerMove_fn$1 = function(evt) {
	this.toggleAttribute("dragging", evt.buttons === 1 || evt.pointerType !== "mouse");
	this.updatePointerBar(evt);
	__privateMethod$8(this, _updateActiveSegment, updateActiveSegment_fn).call(this, evt);
	if (this.dragging && (evt.pointerType !== "mouse" || !__privateGet$20(this, _isInputTarget))) {
		this.range.disabled = true;
		this.range.valueAsNumber = this.getPointerRatio(evt);
		this.range.dispatchEvent(new Event("input", {
			bubbles: true,
			composed: true
		}));
	}
};
MediaChromeRange.shadowRootOptions = { mode: "open" };
MediaChromeRange.getTemplateHTML = getTemplateHTML$11;
if (!GlobalThis.customElements.get("media-chrome-range")) GlobalThis.customElements.define("media-chrome-range", MediaChromeRange);

//#endregion
//#region node_modules/media-chrome/dist/media-control-bar.js
var __accessCheck$19 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$19 = (obj, member, getter) => {
	__accessCheck$19(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$19 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$17 = (obj, member, value, setter) => {
	__accessCheck$19(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController$4;
function getTemplateHTML$10(_attrs) {
	return `
    <style>
      :host {
        
        box-sizing: border-box;
        display: var(--media-control-display, var(--media-control-bar-display, inline-flex));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        --media-loading-indicator-icon-height: 44px;
      }

      ::slotted(media-time-range),
      ::slotted(media-volume-range) {
        min-height: 100%;
      }

      ::slotted(media-time-range),
      ::slotted(media-clip-selector) {
        flex-grow: 1;
      }

      ::slotted([role="menu"]) {
        position: absolute;
      }
    </style>

    <slot></slot>
  `;
}
var MediaControlBar = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$19(this, _mediaController$4, void 0);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [MediaStateReceiverAttributes.MEDIA_CONTROLLER];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2, _b, _c, _d, _e$3;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$2 = __privateGet$19(this, _mediaController$4)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
				__privateSet$17(this, _mediaController$4, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$17(this, _mediaController$4, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e$3 = (_d = __privateGet$19(this, _mediaController$4)) == null ? void 0 : _d.associateElement) == null || _e$3.call(_d, this);
			}
		}
	}
	connectedCallback() {
		var _a$2, _b, _c;
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$17(this, _mediaController$4, (_a$2 = this.getRootNode()) == null ? void 0 : _a$2.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$19(this, _mediaController$4)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
	}
	disconnectedCallback() {
		var _a$2, _b;
		(_b = (_a$2 = __privateGet$19(this, _mediaController$4)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
		__privateSet$17(this, _mediaController$4, null);
	}
};
_mediaController$4 = /* @__PURE__ */ new WeakMap();
MediaControlBar.shadowRootOptions = { mode: "open" };
MediaControlBar.getTemplateHTML = getTemplateHTML$10;
if (!GlobalThis.customElements.get("media-control-bar")) GlobalThis.customElements.define("media-control-bar", MediaControlBar);

//#endregion
//#region node_modules/media-chrome/dist/media-text-display.js
var __accessCheck$18 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$18 = (obj, member, getter) => {
	__accessCheck$18(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$18 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$16 = (obj, member, value, setter) => {
	__accessCheck$18(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController$3;
function getTemplateHTML$9(_attrs, _props = {}) {
	return `
    <style>
      :host {
        font: var(--media-font,
          var(--media-font-weight, normal)
          var(--media-font-size, 14px) /
          var(--media-text-content-height, var(--media-control-height, 24px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        background: var(--media-text-background, var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7))));
        padding: var(--media-control-padding, 10px);
        display: inline-flex;
        justify-content: center;
        align-items: center;
        vertical-align: middle;
        box-sizing: border-box;
        text-align: center;
        pointer-events: auto;
      }

      
      :host(:focus-visible) {
        box-shadow: inset 0 0 0 2px rgb(27 127 204 / .9);
        outline: 0;
      }

      
      :host(:where(:focus)) {
        box-shadow: none;
        outline: 0;
      }
    </style>

    ${this.getSlotTemplateHTML(_attrs, _props)}
  `;
}
function getSlotTemplateHTML$16(_attrs, _props) {
	return `
    <slot></slot>
  `;
}
var MediaTextDisplay = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$18(this, _mediaController$3, void 0);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [MediaStateReceiverAttributes.MEDIA_CONTROLLER];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2, _b, _c, _d, _e$3;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$2 = __privateGet$18(this, _mediaController$3)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
				__privateSet$16(this, _mediaController$3, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$16(this, _mediaController$3, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e$3 = (_d = __privateGet$18(this, _mediaController$3)) == null ? void 0 : _d.associateElement) == null || _e$3.call(_d, this);
			}
		}
	}
	connectedCallback() {
		var _a$2, _b, _c;
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-flex))`);
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$16(this, _mediaController$3, (_a$2 = this.getRootNode()) == null ? void 0 : _a$2.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$18(this, _mediaController$3)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
	}
	disconnectedCallback() {
		var _a$2, _b;
		(_b = (_a$2 = __privateGet$18(this, _mediaController$3)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
		__privateSet$16(this, _mediaController$3, null);
	}
};
_mediaController$3 = /* @__PURE__ */ new WeakMap();
MediaTextDisplay.shadowRootOptions = { mode: "open" };
MediaTextDisplay.getTemplateHTML = getTemplateHTML$9;
MediaTextDisplay.getSlotTemplateHTML = getSlotTemplateHTML$16;
if (!GlobalThis.customElements.get("media-text-display")) GlobalThis.customElements.define("media-text-display", MediaTextDisplay);

//#endregion
//#region node_modules/media-chrome/dist/media-duration-display.js
var __accessCheck$17 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$17 = (obj, member, getter) => {
	__accessCheck$17(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$17 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$15 = (obj, member, value, setter) => {
	__accessCheck$17(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _slot$3;
function getSlotTemplateHTML$15(_attrs, props) {
	return `
    <slot>${formatTime(props.mediaDuration)}</slot>
  `;
}
var MediaDurationDisplay = class extends MediaTextDisplay {
	constructor() {
		var _a$2;
		super();
		__privateAdd$17(this, _slot$3, void 0);
		__privateSet$15(this, _slot$3, this.shadowRoot.querySelector("slot"));
		__privateGet$17(this, _slot$3).textContent = formatTime((_a$2 = this.mediaDuration) != null ? _a$2 : 0);
	}
	static get observedAttributes() {
		return [...super.observedAttributes, MediaUIAttributes.MEDIA_DURATION];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		if (attrName === MediaUIAttributes.MEDIA_DURATION) __privateGet$17(this, _slot$3).textContent = formatTime(+newValue);
		super.attributeChangedCallback(attrName, oldValue, newValue);
	}
	/**
	* @type {number | undefined} In seconds
	*/
	get mediaDuration() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_DURATION);
	}
	set mediaDuration(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_DURATION, time);
	}
};
_slot$3 = /* @__PURE__ */ new WeakMap();
MediaDurationDisplay.getSlotTemplateHTML = getSlotTemplateHTML$15;
if (!GlobalThis.customElements.get("media-duration-display")) GlobalThis.customElements.define("media-duration-display", MediaDurationDisplay);

//#endregion
//#region node_modules/media-chrome/dist/labels/labels.js
var defaultErrorTitles = {
	2: t("Network Error"),
	3: t("Decode Error"),
	4: t("Source Not Supported"),
	5: t("Encryption Error")
};
var defaultErrorMessages = {
	2: t("A network error caused the media download to fail."),
	3: t("A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format."),
	4: t("An unsupported error occurred. The server or network failed, or your browser does not support this format."),
	5: t("The media is encrypted and there are no keys to decrypt it.")
};
var formatError = (error) => {
	var _a$2, _b;
	if (error.code === 1) return null;
	return {
		title: (_a$2 = defaultErrorTitles[error.code]) != null ? _a$2 : `Error ${error.code}`,
		message: (_b = defaultErrorMessages[error.code]) != null ? _b : error.message
	};
};

//#endregion
//#region node_modules/media-chrome/dist/media-error-dialog.js
var __accessCheck$16 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$16 = (obj, member, getter) => {
	__accessCheck$16(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$16 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$14 = (obj, member, value, setter) => {
	__accessCheck$16(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaError;
function getSlotTemplateHTML$14(attrs) {
	return `
    <style>
      :host {
        background: rgb(20 20 30 / .8);
      }

      #content {
        display: block;
        padding: 1.2em 1.5em;
      }

      h3,
      p {
        margin-block: 0 .3em;
      }
    </style>
    <slot name="error-${attrs.mediaerrorcode}" id="content">
      ${formatErrorMessage({
		code: +attrs.mediaerrorcode,
		message: attrs.mediaerrormessage
	})}
    </slot>
  `;
}
function shouldOpenErrorDialog(error) {
	return error.code && formatError(error) !== null;
}
function formatErrorMessage(error) {
	var _a$2;
	const { title, message } = (_a$2 = formatError(error)) != null ? _a$2 : {};
	let html = "";
	if (title) html += `<slot name="error-${error.code}-title"><h3>${title}</h3></slot>`;
	if (message) html += `<slot name="error-${error.code}-message"><p>${message}</p></slot>`;
	return html;
}
var observedAttributes = [MediaUIAttributes.MEDIA_ERROR_CODE, MediaUIAttributes.MEDIA_ERROR_MESSAGE];
var MediaErrorDialog = class extends MediaChromeDialog {
	constructor() {
		super(...arguments);
		__privateAdd$16(this, _mediaError, null);
	}
	static get observedAttributes() {
		return [...super.observedAttributes, ...observedAttributes];
	}
	formatErrorMessage(error) {
		return this.constructor.formatErrorMessage(error);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2;
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (!observedAttributes.includes(attrName)) return;
		const mediaError = (_a$2 = this.mediaError) != null ? _a$2 : {
			code: this.mediaErrorCode,
			message: this.mediaErrorMessage
		};
		this.open = shouldOpenErrorDialog(mediaError);
		if (this.open) {
			this.shadowRoot.querySelector("slot").name = `error-${this.mediaErrorCode}`;
			this.shadowRoot.querySelector("#content").innerHTML = this.formatErrorMessage(mediaError);
		}
	}
	get mediaError() {
		return __privateGet$16(this, _mediaError);
	}
	set mediaError(value) {
		__privateSet$14(this, _mediaError, value);
	}
	get mediaErrorCode() {
		return getNumericAttr(this, "mediaerrorcode");
	}
	set mediaErrorCode(value) {
		setNumericAttr(this, "mediaerrorcode", value);
	}
	get mediaErrorMessage() {
		return getStringAttr(this, "mediaerrormessage");
	}
	set mediaErrorMessage(value) {
		setStringAttr(this, "mediaerrormessage", value);
	}
};
_mediaError = /* @__PURE__ */ new WeakMap();
MediaErrorDialog.getSlotTemplateHTML = getSlotTemplateHTML$14;
MediaErrorDialog.formatErrorMessage = formatErrorMessage;
if (!GlobalThis.customElements.get("media-error-dialog")) GlobalThis.customElements.define("media-error-dialog", MediaErrorDialog);
var media_error_dialog_default = MediaErrorDialog;

//#endregion
//#region node_modules/media-chrome/dist/media-fullscreen-button.js
var enterFullscreenIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M16 3v2.5h3.5V9H22V3h-6ZM4 9h2.5V5.5H10V3H4v6Zm15.5 9.5H16V21h6v-6h-2.5v3.5ZM6.5 15H4v6h6v-2.5H6.5V15Z"/>
</svg>`;
var exitFullscreenIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M18.5 6.5V3H16v6h6V6.5h-3.5ZM16 21h2.5v-3.5H22V15h-6v6ZM4 17.5h3.5V21H10v-6H4v2.5Zm3.5-11H4V9h6V3H7.5v3.5Z"/>
</svg>`;
function getSlotTemplateHTML$13(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=icon] slot:not([name=exit]) {
        display: none !important;
      }

      
      :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=icon] slot:not([name=enter]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=tooltip-enter],
      :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=tooltip-exit] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="enter">${enterFullscreenIcon}</slot>
      <slot name="exit">${exitFullscreenIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$11() {
	return `
    <slot name="tooltip-enter">${t("Enter fullscreen mode")}</slot>
    <slot name="tooltip-exit">${t("Exit fullscreen mode")}</slot>
  `;
}
var updateAriaLabel$5 = (el) => {
	const label = el.mediaIsFullscreen ? t("exit fullscreen mode") : t("enter fullscreen mode");
	el.setAttribute("aria-label", label);
};
var MediaFullscreenButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_IS_FULLSCREEN,
			MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$5(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_IS_FULLSCREEN) updateAriaLabel$5(this);
	}
	/**
	* @type {string | undefined} Fullscreen unavailability state
	*/
	get mediaFullscreenUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE);
	}
	set mediaFullscreenUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE, value);
	}
	/**
	* @type {boolean} Whether fullscreen is available
	*/
	get mediaIsFullscreen() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN);
	}
	set mediaIsFullscreen(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN, value);
	}
	handleClick() {
		const eventName = this.mediaIsFullscreen ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaFullscreenButton.getSlotTemplateHTML = getSlotTemplateHTML$13;
MediaFullscreenButton.getTooltipContentHTML = getTooltipContentHTML$11;
if (!GlobalThis.customElements.get("media-fullscreen-button")) GlobalThis.customElements.define("media-fullscreen-button", MediaFullscreenButton);

//#endregion
//#region node_modules/media-chrome/dist/media-live-button.js
var { MEDIA_TIME_IS_LIVE, MEDIA_PAUSED } = MediaUIAttributes;
var { MEDIA_SEEK_TO_LIVE_REQUEST, MEDIA_PLAY_REQUEST } = MediaUIEvents;
var indicatorSVG = "<svg viewBox=\"0 0 6 12\"><circle cx=\"3\" cy=\"6\" r=\"2\"></circle></svg>";
function getSlotTemplateHTML$12(_attrs) {
	return `
    <style>
      :host { --media-tooltip-display: none; }
      
      slot[name=indicator] > *,
      :host ::slotted([slot=indicator]) {
        
        min-width: auto;
        fill: var(--media-live-button-icon-color, rgb(140, 140, 140));
        color: var(--media-live-button-icon-color, rgb(140, 140, 140));
      }

      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) slot[name=indicator] > *,
      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) ::slotted([slot=indicator]) {
        fill: var(--media-live-button-indicator-color, rgb(255, 0, 0));
        color: var(--media-live-button-indicator-color, rgb(255, 0, 0));
      }

      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) {
        cursor: var(--media-cursor, not-allowed);
      }

      slot[name=text]{
        text-transform: uppercase;
      }

    </style>

    <slot name="indicator">${indicatorSVG}</slot>
    
    <slot name="spacer">&nbsp;</slot><slot name="text">${t("live")}</slot>
  `;
}
var updateAriaAttributes = (el) => {
	var _a$2;
	const isPausedOrNotLive = el.mediaPaused || !el.mediaTimeIsLive;
	const label = isPausedOrNotLive ? t("seek to live") : t("playing live");
	el.setAttribute("aria-label", label);
	const textSlot = (_a$2 = el.shadowRoot) == null ? void 0 : _a$2.querySelector("slot[name=\"text\"]");
	if (textSlot) textSlot.textContent = t("live");
	isPausedOrNotLive ? el.removeAttribute("aria-disabled") : el.setAttribute("aria-disabled", "true");
};
var MediaLiveButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MEDIA_TIME_IS_LIVE,
			MEDIA_PAUSED
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaAttributes(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		updateAriaAttributes(this);
	}
	/**
	* @type {boolean} Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	/**
	* @type {boolean} Is the media playback currently live
	*/
	get mediaTimeIsLive() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE);
	}
	set mediaTimeIsLive(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE, value);
	}
	handleClick() {
		if (!this.mediaPaused && this.mediaTimeIsLive) return;
		this.dispatchEvent(new GlobalThis.CustomEvent(MEDIA_SEEK_TO_LIVE_REQUEST, {
			composed: true,
			bubbles: true
		}));
		if (this.hasAttribute(MEDIA_PAUSED)) this.dispatchEvent(new GlobalThis.CustomEvent(MEDIA_PLAY_REQUEST, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaLiveButton.getSlotTemplateHTML = getSlotTemplateHTML$12;
if (!GlobalThis.customElements.get("media-live-button")) GlobalThis.customElements.define("media-live-button", MediaLiveButton);

//#endregion
//#region node_modules/media-chrome/dist/media-loading-indicator.js
var __accessCheck$15 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$15 = (obj, member, getter) => {
	__accessCheck$15(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$15 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$13 = (obj, member, value, setter) => {
	__accessCheck$15(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController$2, _delay;
var Attributes$9 = {
	LOADING_DELAY: "loadingdelay",
	NO_AUTOHIDE: "noautohide"
};
var DEFAULT_LOADING_DELAY = 500;
var loadingIndicatorIcon = `
<svg aria-hidden="true" viewBox="0 0 100 100">
  <path d="M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50">
    <animateTransform
       attributeName="transform"
       attributeType="XML"
       type="rotate"
       dur="1s"
       from="0 50 50"
       to="360 50 50"
       repeatCount="indefinite" />
  </path>
</svg>
`;
function getTemplateHTML$8(_attrs) {
	return `
    <style>
      :host {
        display: var(--media-control-display, var(--media-loading-indicator-display, inline-block));
        vertical-align: middle;
        box-sizing: border-box;
        --_loading-indicator-delay: var(--media-loading-indicator-transition-delay, ${DEFAULT_LOADING_DELAY}ms);
      }

      #status {
        color: rgba(0,0,0,0);
        width: 0px;
        height: 0px;
      }

      :host slot[name=icon] > *,
      :host ::slotted([slot=icon]) {
        opacity: var(--media-loading-indicator-opacity, 0);
        transition: opacity 0.15s;
      }

      :host([${MediaUIAttributes.MEDIA_LOADING}]:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=icon] > *,
      :host([${MediaUIAttributes.MEDIA_LOADING}]:not([${MediaUIAttributes.MEDIA_PAUSED}])) ::slotted([slot=icon]) {
        opacity: var(--media-loading-indicator-opacity, 1);
        transition: opacity 0.15s var(--_loading-indicator-delay);
      }

      :host #status {
        visibility: var(--media-loading-indicator-opacity, hidden);
        transition: visibility 0.15s;
      }

      :host([${MediaUIAttributes.MEDIA_LOADING}]:not([${MediaUIAttributes.MEDIA_PAUSED}])) #status {
        visibility: var(--media-loading-indicator-opacity, visible);
        transition: visibility 0.15s var(--_loading-indicator-delay);
      }

      svg, img, ::slotted(svg), ::slotted(img) {
        width: var(--media-loading-indicator-icon-width);
        height: var(--media-loading-indicator-icon-height, 100px);
        fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
        vertical-align: middle;
      }
    </style>

    <slot name="icon">${loadingIndicatorIcon}</slot>
    <div id="status" role="status" aria-live="polite">${t("media loading")}</div>
  `;
}
var MediaLoadingIndicator = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$15(this, _mediaController$2, void 0);
		__privateAdd$15(this, _delay, DEFAULT_LOADING_DELAY);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [
			MediaStateReceiverAttributes.MEDIA_CONTROLLER,
			MediaUIAttributes.MEDIA_PAUSED,
			MediaUIAttributes.MEDIA_LOADING,
			Attributes$9.LOADING_DELAY
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2, _b, _c, _d, _e$3;
		if (attrName === Attributes$9.LOADING_DELAY && oldValue !== newValue) this.loadingDelay = Number(newValue);
		else if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$2 = __privateGet$15(this, _mediaController$2)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
				__privateSet$13(this, _mediaController$2, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$13(this, _mediaController$2, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e$3 = (_d = __privateGet$15(this, _mediaController$2)) == null ? void 0 : _d.associateElement) == null || _e$3.call(_d, this);
			}
		}
	}
	connectedCallback() {
		var _a$2, _b, _c;
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$13(this, _mediaController$2, (_a$2 = this.getRootNode()) == null ? void 0 : _a$2.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$15(this, _mediaController$2)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
	}
	disconnectedCallback() {
		var _a$2, _b;
		(_b = (_a$2 = __privateGet$15(this, _mediaController$2)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
		__privateSet$13(this, _mediaController$2, null);
	}
	/**
	* Delay in ms
	*/
	get loadingDelay() {
		return __privateGet$15(this, _delay);
	}
	set loadingDelay(delay$1) {
		__privateSet$13(this, _delay, delay$1);
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		style.setProperty("--_loading-indicator-delay", `var(--media-loading-indicator-transition-delay, ${delay$1}ms)`);
	}
	/**
	* Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	/**
	* Is the media loading
	*/
	get mediaLoading() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING);
	}
	set mediaLoading(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING, value);
	}
	get mediaController() {
		return getStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER);
	}
	set mediaController(value) {
		setStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER, value);
	}
	get noAutohide() {
		return getBooleanAttr(this, Attributes$9.NO_AUTOHIDE);
	}
	set noAutohide(value) {
		setBooleanAttr(this, Attributes$9.NO_AUTOHIDE, value);
	}
};
_mediaController$2 = /* @__PURE__ */ new WeakMap();
_delay = /* @__PURE__ */ new WeakMap();
MediaLoadingIndicator.shadowRootOptions = { mode: "open" };
MediaLoadingIndicator.getTemplateHTML = getTemplateHTML$8;
if (!GlobalThis.customElements.get("media-loading-indicator")) GlobalThis.customElements.define("media-loading-indicator", MediaLoadingIndicator);

//#endregion
//#region node_modules/media-chrome/dist/media-mute-button.js
var offIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M16.5 12A4.5 4.5 0 0 0 14 8v2.18l2.45 2.45a4.22 4.22 0 0 0 .05-.63Zm2.5 0a6.84 6.84 0 0 1-.54 2.64L20 16.15A8.8 8.8 0 0 0 21 12a9 9 0 0 0-7-8.77v2.06A7 7 0 0 1 19 12ZM4.27 3 3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25A6.92 6.92 0 0 1 14 18.7v2.06A9 9 0 0 0 17.69 19l2 2.05L21 19.73l-9-9L4.27 3ZM12 4 9.91 6.09 12 8.18V4Z"/>
</svg>`;
var lowIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M3 9v6h4l5 5V4L7 9H3Zm13.5 3A4.5 4.5 0 0 0 14 8v8a4.47 4.47 0 0 0 2.5-4Z"/>
</svg>`;
var highIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M3 9v6h4l5 5V4L7 9H3Zm13.5 3A4.5 4.5 0 0 0 14 8v8a4.47 4.47 0 0 0 2.5-4ZM14 3.23v2.06a7 7 0 0 1 0 13.42v2.06a9 9 0 0 0 0-17.54Z"/>
</svg>`;
function getSlotTemplateHTML$11(_attrs) {
	return `
    <style>
      :host(:not([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}])) slot[name=icon] slot:not([name=high]),
      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=high]) slot[name=icon] slot:not([name=high]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=off]) slot[name=icon] slot:not([name=off]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=low]) slot[name=icon] slot:not([name=low]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=medium]) slot[name=icon] slot:not([name=medium]) {
        display: none !important;
      }

      :host(:not([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=off])) slot[name=tooltip-unmute],
      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=off]) slot[name=tooltip-mute] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="off">${offIcon}</slot>
      <slot name="low">${lowIcon}</slot>
      <slot name="medium">${lowIcon}</slot>
      <slot name="high">${highIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$10() {
	return `
    <slot name="tooltip-mute">${t("Mute")}</slot>
    <slot name="tooltip-unmute">${t("Unmute")}</slot>
  `;
}
var updateAriaLabel$4 = (el) => {
	const label = el.mediaVolumeLevel === "off" ? t("unmute") : t("mute");
	el.setAttribute("aria-label", label);
};
var MediaMuteButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [...super.observedAttributes, MediaUIAttributes.MEDIA_VOLUME_LEVEL];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$4(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_VOLUME_LEVEL) updateAriaLabel$4(this);
	}
	/**
	* @type {string | undefined}
	*/
	get mediaVolumeLevel() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_LEVEL);
	}
	set mediaVolumeLevel(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_LEVEL, value);
	}
	handleClick() {
		const eventName = this.mediaVolumeLevel === "off" ? MediaUIEvents.MEDIA_UNMUTE_REQUEST : MediaUIEvents.MEDIA_MUTE_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaMuteButton.getSlotTemplateHTML = getSlotTemplateHTML$11;
MediaMuteButton.getTooltipContentHTML = getTooltipContentHTML$10;
if (!GlobalThis.customElements.get("media-mute-button")) GlobalThis.customElements.define("media-mute-button", MediaMuteButton);

//#endregion
//#region node_modules/media-chrome/dist/media-pip-button.js
var pipIcon = `<svg aria-hidden="true" viewBox="0 0 28 24">
  <path d="M24 3H4a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1Zm-1 16H5V5h18v14Zm-3-8h-7v5h7v-5Z"/>
</svg>`;
function getSlotTemplateHTML$10(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_IS_PIP}]) slot[name=icon] slot:not([name=exit]) {
        display: none !important;
      }

      :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) slot[name=icon] slot:not([name=enter]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_IS_PIP}]) slot[name=tooltip-enter],
      :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) slot[name=tooltip-exit] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="enter">${pipIcon}</slot>
      <slot name="exit">${pipIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$9() {
	return `
    <slot name="tooltip-enter">${t("Enter picture in picture mode")}</slot>
    <slot name="tooltip-exit">${t("Exit picture in picture mode")}</slot>
  `;
}
var updateAriaLabel$3 = (el) => {
	const label = el.mediaIsPip ? t("exit picture in picture mode") : t("enter picture in picture mode");
	el.setAttribute("aria-label", label);
};
var MediaPipButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_IS_PIP,
			MediaUIAttributes.MEDIA_PIP_UNAVAILABLE
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$3(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_IS_PIP) updateAriaLabel$3(this);
	}
	/**
	* @type {string | undefined} Pip unavailability state
	*/
	get mediaPipUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_PIP_UNAVAILABLE);
	}
	set mediaPipUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_PIP_UNAVAILABLE, value);
	}
	/**
	* @type {boolean} Is the media currently playing picture-in-picture
	*/
	get mediaIsPip() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_PIP);
	}
	set mediaIsPip(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_PIP, value);
	}
	handleClick() {
		const eventName = this.mediaIsPip ? MediaUIEvents.MEDIA_EXIT_PIP_REQUEST : MediaUIEvents.MEDIA_ENTER_PIP_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaPipButton.getSlotTemplateHTML = getSlotTemplateHTML$10;
MediaPipButton.getTooltipContentHTML = getTooltipContentHTML$9;
if (!GlobalThis.customElements.get("media-pip-button")) GlobalThis.customElements.define("media-pip-button", MediaPipButton);

//#endregion
//#region node_modules/media-chrome/dist/media-playback-rate-button.js
var __accessCheck$14 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$14 = (obj, member, getter) => {
	__accessCheck$14(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$14 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var _rates$1;
var Attributes$8 = { RATES: "rates" };
var DEFAULT_RATES = [
	1,
	1.2,
	1.5,
	1.7,
	2
];
var DEFAULT_RATE$1 = 1;
function getSlotTemplateHTML$9(attrs) {
	return `
    <style>
      :host {
        min-width: 5ch;
        padding: var(--media-button-padding, var(--media-control-padding, 10px 5px));
      }
    </style>
    <slot name="icon">${attrs["mediaplaybackrate"] || DEFAULT_RATE$1}x</slot>
  `;
}
function getTooltipContentHTML$8() {
	return t("Playback rate");
}
var MediaPlaybackRateButton = class extends MediaChromeButton {
	constructor() {
		var _a$2;
		super();
		__privateAdd$14(this, _rates$1, new AttributeTokenList(this, Attributes$8.RATES, { defaultValue: DEFAULT_RATES }));
		this.container = this.shadowRoot.querySelector("slot[name=\"icon\"]");
		this.container.innerHTML = `${(_a$2 = this.mediaPlaybackRate) != null ? _a$2 : DEFAULT_RATE$1}x`;
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_PLAYBACK_RATE,
			Attributes$8.RATES
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === Attributes$8.RATES) __privateGet$14(this, _rates$1).value = newValue;
		if (attrName === MediaUIAttributes.MEDIA_PLAYBACK_RATE) {
			const newPlaybackRate = newValue ? +newValue : NaN;
			const playbackRate = !Number.isNaN(newPlaybackRate) ? newPlaybackRate : DEFAULT_RATE$1;
			this.container.innerHTML = `${playbackRate}x`;
			this.setAttribute("aria-label", t("Playback rate {playbackRate}", { playbackRate }));
		}
	}
	/**
	* Get the playback rates for the button.
	*/
	get rates() {
		return __privateGet$14(this, _rates$1);
	}
	/**
	* Set the playback rates for the button.
	* For React 19+ compatibility, accept a string of space-separated rates.
	*/
	set rates(value) {
		if (!value) __privateGet$14(this, _rates$1).value = "";
		else if (Array.isArray(value)) __privateGet$14(this, _rates$1).value = value.join(" ");
		else if (typeof value === "string") __privateGet$14(this, _rates$1).value = value;
	}
	/**
	* @type {number} The current playback rate
	*/
	get mediaPlaybackRate() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, DEFAULT_RATE$1);
	}
	set mediaPlaybackRate(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
	}
	handleClick() {
		var _a$2, _b;
		const availableRates = Array.from(__privateGet$14(this, _rates$1).values(), (str) => +str).sort((a$2, b$4) => a$2 - b$4);
		const detail = (_b = (_a$2 = availableRates.find((r$3) => r$3 > this.mediaPlaybackRate)) != null ? _a$2 : availableRates[0]) != null ? _b : DEFAULT_RATE$1;
		const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST, {
			composed: true,
			bubbles: true,
			detail
		});
		this.dispatchEvent(evt);
	}
};
_rates$1 = /* @__PURE__ */ new WeakMap();
MediaPlaybackRateButton.getSlotTemplateHTML = getSlotTemplateHTML$9;
MediaPlaybackRateButton.getTooltipContentHTML = getTooltipContentHTML$8;
if (!GlobalThis.customElements.get("media-playback-rate-button")) GlobalThis.customElements.define("media-playback-rate-button", MediaPlaybackRateButton);

//#endregion
//#region node_modules/media-chrome/dist/media-play-button.js
var playIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="m6 21 15-9L6 3v18Z"/>
</svg>`;
var pauseIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M6 20h4V4H6v16Zm8-16v16h4V4h-4Z"/>
</svg>`;
function getSlotTemplateHTML$8(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_PAUSED}]) slot[name=pause],
      :host(:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=play] {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_PAUSED}]) slot[name=tooltip-pause],
      :host(:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=tooltip-play] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="play">${playIcon}</slot>
      <slot name="pause">${pauseIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$7() {
	return `
    <slot name="tooltip-play">${t("Play")}</slot>
    <slot name="tooltip-pause">${t("Pause")}</slot>
  `;
}
var updateAriaLabel$2 = (el) => {
	const label = el.mediaPaused ? t("play") : t("pause");
	el.setAttribute("aria-label", label);
};
var MediaPlayButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_PAUSED,
			MediaUIAttributes.MEDIA_ENDED
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$2(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_PAUSED || attrName === MediaUIAttributes.MEDIA_LANG) updateAriaLabel$2(this);
	}
	/**
	* Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	handleClick() {
		const eventName = this.mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaPlayButton.getSlotTemplateHTML = getSlotTemplateHTML$8;
MediaPlayButton.getTooltipContentHTML = getTooltipContentHTML$7;
if (!GlobalThis.customElements.get("media-play-button")) GlobalThis.customElements.define("media-play-button", MediaPlayButton);

//#endregion
//#region node_modules/media-chrome/dist/media-poster-image.js
var Attributes$7 = {
	PLACEHOLDER_SRC: "placeholdersrc",
	SRC: "src"
};
function getTemplateHTML$7(_attrs) {
	return `
    <style>
      :host {
        pointer-events: none;
        display: var(--media-poster-image-display, inline-block);
        box-sizing: border-box;
      }

      img {
        max-width: 100%;
        max-height: 100%;
        min-width: 100%;
        min-height: 100%;
        background-repeat: no-repeat;
        background-position: var(--media-poster-image-background-position, var(--media-object-position, center));
        background-size: var(--media-poster-image-background-size, var(--media-object-fit, contain));
        object-fit: var(--media-object-fit, contain);
        object-position: var(--media-object-position, center);
      }
    </style>

    <img part="poster img" aria-hidden="true" id="image"/>
  `;
}
var unsetBackgroundImage = (el) => {
	el.style.removeProperty("background-image");
};
var setBackgroundImage = (el, image) => {
	el.style["background-image"] = `url('${image}')`;
};
var MediaPosterImage = class extends GlobalThis.HTMLElement {
	static get observedAttributes() {
		return [Attributes$7.PLACEHOLDER_SRC, Attributes$7.SRC];
	}
	constructor() {
		super();
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
		this.image = this.shadowRoot.querySelector("#image");
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		if (attrName === Attributes$7.SRC) if (newValue == null) this.image.removeAttribute(Attributes$7.SRC);
		else this.image.setAttribute(Attributes$7.SRC, newValue);
		if (attrName === Attributes$7.PLACEHOLDER_SRC) if (newValue == null) unsetBackgroundImage(this.image);
		else setBackgroundImage(this.image, newValue);
	}
	/**
	*
	*/
	get placeholderSrc() {
		return getStringAttr(this, Attributes$7.PLACEHOLDER_SRC);
	}
	set placeholderSrc(value) {
		setStringAttr(this, Attributes$7.SRC, value);
	}
	/**
	*
	*/
	get src() {
		return getStringAttr(this, Attributes$7.SRC);
	}
	set src(value) {
		setStringAttr(this, Attributes$7.SRC, value);
	}
};
MediaPosterImage.shadowRootOptions = { mode: "open" };
MediaPosterImage.getTemplateHTML = getTemplateHTML$7;
if (!GlobalThis.customElements.get("media-poster-image")) GlobalThis.customElements.define("media-poster-image", MediaPosterImage);

//#endregion
//#region node_modules/media-chrome/dist/media-preview-chapter-display.js
var __accessCheck$13 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$13 = (obj, member, getter) => {
	__accessCheck$13(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$13 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$12 = (obj, member, value, setter) => {
	__accessCheck$13(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _slot$2;
var MediaPreviewChapterDisplay = class extends MediaTextDisplay {
	constructor() {
		super();
		__privateAdd$13(this, _slot$2, void 0);
		__privateSet$12(this, _slot$2, this.shadowRoot.querySelector("slot"));
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_PREVIEW_CHAPTER,
			MediaUIAttributes.MEDIA_LANG
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_PREVIEW_CHAPTER || attrName === MediaUIAttributes.MEDIA_LANG) {
			if (newValue !== oldValue && newValue != null) {
				__privateGet$13(this, _slot$2).textContent = newValue;
				if (newValue !== "") {
					const ariaValueText = t("chapter: {chapterName}", { chapterName: newValue });
					this.setAttribute("aria-valuetext", ariaValueText);
				} else this.removeAttribute("aria-valuetext");
			}
		}
	}
	/**
	* @type {string | undefined} Timeline preview chapter
	*/
	get mediaPreviewChapter() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_CHAPTER);
	}
	set mediaPreviewChapter(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_CHAPTER, value);
	}
};
_slot$2 = /* @__PURE__ */ new WeakMap();
if (!GlobalThis.customElements.get("media-preview-chapter-display")) GlobalThis.customElements.define("media-preview-chapter-display", MediaPreviewChapterDisplay);

//#endregion
//#region node_modules/media-chrome/dist/media-preview-thumbnail.js
var __accessCheck$12 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$12 = (obj, member, getter) => {
	__accessCheck$12(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$12 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$11 = (obj, member, value, setter) => {
	__accessCheck$12(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController$1;
function getTemplateHTML$6(_attrs) {
	return `
    <style>
      :host {
        box-sizing: border-box;
        display: var(--media-control-display, var(--media-preview-thumbnail-display, inline-block));
        overflow: hidden;
      }

      img {
        display: none;
        position: relative;
      }
    </style>
    <img crossorigin loading="eager" decoding="async">
  `;
}
var MediaPreviewThumbnail = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$12(this, _mediaController$1, void 0);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [
			MediaStateReceiverAttributes.MEDIA_CONTROLLER,
			MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
			MediaUIAttributes.MEDIA_PREVIEW_COORDS
		];
	}
	connectedCallback() {
		var _a$2, _b, _c;
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$11(this, _mediaController$1, (_a$2 = this.getRootNode()) == null ? void 0 : _a$2.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$12(this, _mediaController$1)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
	}
	disconnectedCallback() {
		var _a$2, _b;
		(_b = (_a$2 = __privateGet$12(this, _mediaController$1)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
		__privateSet$11(this, _mediaController$1, null);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2, _b, _c, _d, _e$3;
		if ([MediaUIAttributes.MEDIA_PREVIEW_IMAGE, MediaUIAttributes.MEDIA_PREVIEW_COORDS].includes(attrName)) this.update();
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$2 = __privateGet$12(this, _mediaController$1)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
				__privateSet$11(this, _mediaController$1, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$11(this, _mediaController$1, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e$3 = (_d = __privateGet$12(this, _mediaController$1)) == null ? void 0 : _d.associateElement) == null || _e$3.call(_d, this);
			}
		}
	}
	/**
	* @type {string | undefined} The url of the preview image
	*/
	get mediaPreviewImage() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE);
	}
	set mediaPreviewImage(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE, value);
	}
	/**
	* @type {Array<number> | undefined} Fixed length array [x, y, width, height] or undefined
	*/
	get mediaPreviewCoords() {
		const attrVal = this.getAttribute(MediaUIAttributes.MEDIA_PREVIEW_COORDS);
		if (!attrVal) return void 0;
		return attrVal.split(/\s+/).map((coord) => +coord);
	}
	set mediaPreviewCoords(value) {
		if (!value) {
			this.removeAttribute(MediaUIAttributes.MEDIA_PREVIEW_COORDS);
			return;
		}
		this.setAttribute(MediaUIAttributes.MEDIA_PREVIEW_COORDS, value.join(" "));
	}
	update() {
		const coords = this.mediaPreviewCoords;
		const previewImage = this.mediaPreviewImage;
		if (!(coords && previewImage)) return;
		const [x$5, y$4, w$2, h$2] = coords;
		const src = previewImage.split("#")[0];
		const { maxWidth, maxHeight, minWidth, minHeight } = getComputedStyle(this);
		const maxRatio = Math.min(parseInt(maxWidth) / w$2, parseInt(maxHeight) / h$2);
		const minRatio = Math.max(parseInt(minWidth) / w$2, parseInt(minHeight) / h$2);
		const isScalingDown = maxRatio < 1;
		const scale = isScalingDown ? maxRatio : minRatio > 1 ? minRatio : 1;
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		const imgStyle = getOrInsertCSSRule(this.shadowRoot, "img").style;
		const img = this.shadowRoot.querySelector("img");
		const extremum = isScalingDown ? "min" : "max";
		style.setProperty(`${extremum}-width`, "initial", "important");
		style.setProperty(`${extremum}-height`, "initial", "important");
		style.width = `${w$2 * scale}px`;
		style.height = `${h$2 * scale}px`;
		const resize = () => {
			imgStyle.width = `${this.imgWidth * scale}px`;
			imgStyle.height = `${this.imgHeight * scale}px`;
			imgStyle.display = "block";
		};
		if (img.src !== src) {
			img.onload = () => {
				this.imgWidth = img.naturalWidth;
				this.imgHeight = img.naturalHeight;
				resize();
			};
			img.src = src;
			resize();
		}
		resize();
		imgStyle.transform = `translate(-${x$5 * scale}px, -${y$4 * scale}px)`;
	}
};
_mediaController$1 = /* @__PURE__ */ new WeakMap();
MediaPreviewThumbnail.shadowRootOptions = { mode: "open" };
MediaPreviewThumbnail.getTemplateHTML = getTemplateHTML$6;
if (!GlobalThis.customElements.get("media-preview-thumbnail")) GlobalThis.customElements.define("media-preview-thumbnail", MediaPreviewThumbnail);
var media_preview_thumbnail_default = MediaPreviewThumbnail;

//#endregion
//#region node_modules/media-chrome/dist/media-preview-time-display.js
var __accessCheck$11 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$11 = (obj, member, getter) => {
	__accessCheck$11(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$11 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$10 = (obj, member, value, setter) => {
	__accessCheck$11(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _slot$1;
var MediaPreviewTimeDisplay = class extends MediaTextDisplay {
	constructor() {
		super();
		__privateAdd$11(this, _slot$1, void 0);
		__privateSet$10(this, _slot$1, this.shadowRoot.querySelector("slot"));
		__privateGet$11(this, _slot$1).textContent = formatTime(0);
	}
	static get observedAttributes() {
		return [...super.observedAttributes, MediaUIAttributes.MEDIA_PREVIEW_TIME];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_PREVIEW_TIME && newValue != null) __privateGet$11(this, _slot$1).textContent = formatTime(parseFloat(newValue));
	}
	/**
	* Timeline preview time
	*/
	get mediaPreviewTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME);
	}
	set mediaPreviewTime(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME, value);
	}
};
_slot$1 = /* @__PURE__ */ new WeakMap();
if (!GlobalThis.customElements.get("media-preview-time-display")) GlobalThis.customElements.define("media-preview-time-display", MediaPreviewTimeDisplay);

//#endregion
//#region node_modules/media-chrome/dist/media-seek-backward-button.js
var Attributes$6 = { SEEK_OFFSET: "seekoffset" };
var DEFAULT_SEEK_OFFSET$1 = 30;
var backwardIcon = (seekOffset) => `
  <svg aria-hidden="true" viewBox="0 0 20 24">
    <defs>
      <style>.text{font-size:8px;font-family:Arial-BoldMT, Arial;font-weight:700;}</style>
    </defs>
    <text class="text value" transform="translate(2.18 19.87)">${seekOffset}</text>
    <path d="M10 6V3L4.37 7 10 10.94V8a5.54 5.54 0 0 1 1.9 10.48v2.12A7.5 7.5 0 0 0 10 6Z"/>
  </svg>`;
function getSlotTemplateHTML$7(_attrs, props) {
	return `
    <slot name="icon">${backwardIcon(props.seekOffset)}</slot>
  `;
}
function getTooltipContentHTML$6() {
	return t("Seek backward");
}
var DEFAULT_TIME$1 = 0;
var MediaSeekBackwardButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_CURRENT_TIME,
			Attributes$6.SEEK_OFFSET
		];
	}
	connectedCallback() {
		super.connectedCallback();
		this.seekOffset = getNumericAttr(this, Attributes$6.SEEK_OFFSET, DEFAULT_SEEK_OFFSET$1);
	}
	attributeChangedCallback(attrName, _oldValue, newValue) {
		super.attributeChangedCallback(attrName, _oldValue, newValue);
		if (attrName === Attributes$6.SEEK_OFFSET) this.seekOffset = getNumericAttr(this, Attributes$6.SEEK_OFFSET, DEFAULT_SEEK_OFFSET$1);
	}
	/**
	* Seek amount in seconds
	*/
	get seekOffset() {
		return getNumericAttr(this, Attributes$6.SEEK_OFFSET, DEFAULT_SEEK_OFFSET$1);
	}
	set seekOffset(value) {
		setNumericAttr(this, Attributes$6.SEEK_OFFSET, value);
		this.setAttribute("aria-label", t("seek back {seekOffset} seconds", { seekOffset: this.seekOffset }));
		updateIconText(getSlotted(this, "icon"), this.seekOffset);
	}
	/**
	* The current time in seconds
	*/
	get mediaCurrentTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, DEFAULT_TIME$1);
	}
	set mediaCurrentTime(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, time);
	}
	handleClick() {
		const detail = Math.max(this.mediaCurrentTime - this.seekOffset, 0);
		const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
			composed: true,
			bubbles: true,
			detail
		});
		this.dispatchEvent(evt);
	}
};
MediaSeekBackwardButton.getSlotTemplateHTML = getSlotTemplateHTML$7;
MediaSeekBackwardButton.getTooltipContentHTML = getTooltipContentHTML$6;
if (!GlobalThis.customElements.get("media-seek-backward-button")) GlobalThis.customElements.define("media-seek-backward-button", MediaSeekBackwardButton);

//#endregion
//#region node_modules/media-chrome/dist/media-seek-forward-button.js
var Attributes$5 = { SEEK_OFFSET: "seekoffset" };
var DEFAULT_SEEK_OFFSET = 30;
var forwardIcon = (seekOffset) => `
  <svg aria-hidden="true" viewBox="0 0 20 24">
    <defs>
      <style>.text{font-size:8px;font-family:Arial-BoldMT, Arial;font-weight:700;}</style>
    </defs>
    <text class="text value" transform="translate(8.9 19.87)">${seekOffset}</text>
    <path d="M10 6V3l5.61 4L10 10.94V8a5.54 5.54 0 0 0-1.9 10.48v2.12A7.5 7.5 0 0 1 10 6Z"/>
  </svg>`;
function getSlotTemplateHTML$6(_attrs, props) {
	return `
    <slot name="icon">${forwardIcon(props.seekOffset)}</slot>
  `;
}
function getTooltipContentHTML$5() {
	return t("Seek forward");
}
var DEFAULT_TIME = 0;
var MediaSeekForwardButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_CURRENT_TIME,
			Attributes$5.SEEK_OFFSET
		];
	}
	connectedCallback() {
		super.connectedCallback();
		this.seekOffset = getNumericAttr(this, Attributes$5.SEEK_OFFSET, DEFAULT_SEEK_OFFSET);
	}
	attributeChangedCallback(attrName, _oldValue, newValue) {
		super.attributeChangedCallback(attrName, _oldValue, newValue);
		if (attrName === Attributes$5.SEEK_OFFSET) this.seekOffset = getNumericAttr(this, Attributes$5.SEEK_OFFSET, DEFAULT_SEEK_OFFSET);
	}
	/**
	* Seek amount in seconds
	*/
	get seekOffset() {
		return getNumericAttr(this, Attributes$5.SEEK_OFFSET, DEFAULT_SEEK_OFFSET);
	}
	set seekOffset(value) {
		setNumericAttr(this, Attributes$5.SEEK_OFFSET, value);
		this.setAttribute("aria-label", t("seek forward {seekOffset} seconds", { seekOffset: this.seekOffset }));
		updateIconText(getSlotted(this, "icon"), this.seekOffset);
	}
	/**
	* The current time in seconds
	*/
	get mediaCurrentTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, DEFAULT_TIME);
	}
	set mediaCurrentTime(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, time);
	}
	handleClick() {
		const detail = this.mediaCurrentTime + this.seekOffset;
		const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
			composed: true,
			bubbles: true,
			detail
		});
		this.dispatchEvent(evt);
	}
};
MediaSeekForwardButton.getSlotTemplateHTML = getSlotTemplateHTML$6;
MediaSeekForwardButton.getTooltipContentHTML = getTooltipContentHTML$5;
if (!GlobalThis.customElements.get("media-seek-forward-button")) GlobalThis.customElements.define("media-seek-forward-button", MediaSeekForwardButton);

//#endregion
//#region node_modules/media-chrome/dist/media-time-display.js
var __accessCheck$10 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$10 = (obj, member, getter) => {
	__accessCheck$10(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$10 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$9 = (obj, member, value, setter) => {
	__accessCheck$10(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _slot;
var Attributes$4 = {
	REMAINING: "remaining",
	SHOW_DURATION: "showduration",
	NO_TOGGLE: "notoggle"
};
var CombinedAttributes = [
	...Object.values(Attributes$4),
	MediaUIAttributes.MEDIA_CURRENT_TIME,
	MediaUIAttributes.MEDIA_DURATION,
	MediaUIAttributes.MEDIA_SEEKABLE
];
var ButtonPressedKeys = ["Enter", " "];
var DEFAULT_TIMES_SEP = "&nbsp;/&nbsp;";
var formatTimesLabel = (el, { timesSep = DEFAULT_TIMES_SEP } = {}) => {
	var _a$2, _b;
	const currentTime = (_a$2 = el.mediaCurrentTime) != null ? _a$2 : 0;
	const [, seekableEnd] = (_b = el.mediaSeekable) != null ? _b : [];
	let endTime = 0;
	if (Number.isFinite(el.mediaDuration)) endTime = el.mediaDuration;
	else if (Number.isFinite(seekableEnd)) endTime = seekableEnd;
	const timeLabel = el.remaining ? formatTime(0 - (endTime - currentTime)) : formatTime(currentTime);
	if (!el.showDuration) return timeLabel;
	return `${timeLabel}${timesSep}${formatTime(endTime)}`;
};
var DEFAULT_MISSING_TIME_PHRASE$1 = "video not loaded, unknown time.";
var updateAriaValueText$1 = (el) => {
	var _a$2;
	const currentTime = el.mediaCurrentTime;
	const [, seekableEnd] = (_a$2 = el.mediaSeekable) != null ? _a$2 : [];
	let endTime = null;
	if (Number.isFinite(el.mediaDuration)) endTime = el.mediaDuration;
	else if (Number.isFinite(seekableEnd)) endTime = seekableEnd;
	if (currentTime == null || endTime === null) {
		el.setAttribute("aria-valuetext", DEFAULT_MISSING_TIME_PHRASE$1);
		return;
	}
	const currentTimePhrase = el.remaining ? formatAsTimePhrase(0 - (endTime - currentTime)) : formatAsTimePhrase(currentTime);
	if (!el.showDuration) {
		el.setAttribute("aria-valuetext", currentTimePhrase);
		return;
	}
	const totalTimePhrase = formatAsTimePhrase(endTime);
	const fullPhrase = `${currentTimePhrase} of ${totalTimePhrase}`;
	el.setAttribute("aria-valuetext", fullPhrase);
};
function getSlotTemplateHTML$5(_attrs, props) {
	return `
    <slot>${formatTimesLabel(props)}</slot>
  `;
}
var MediaTimeDisplay = class extends MediaTextDisplay {
	constructor() {
		super();
		__privateAdd$10(this, _slot, void 0);
		__privateSet$9(this, _slot, this.shadowRoot.querySelector("slot"));
		__privateGet$10(this, _slot).innerHTML = `${formatTimesLabel(this)}`;
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			...CombinedAttributes,
			"disabled"
		];
	}
	connectedCallback() {
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host(:hover:not([notoggle]))");
		style.setProperty("cursor", "var(--media-cursor, pointer)");
		style.setProperty("background", "var(--media-control-hover-background, rgba(50 50 70 / .7))");
		if (!this.hasAttribute("disabled")) this.enable();
		this.setAttribute("role", "progressbar");
		this.setAttribute("aria-label", t("playback time"));
		const keyUpHandler = (evt) => {
			const { key } = evt;
			if (!ButtonPressedKeys.includes(key)) {
				this.removeEventListener("keyup", keyUpHandler);
				return;
			}
			this.toggleTimeDisplay();
		};
		this.addEventListener("keydown", (evt) => {
			const { metaKey, altKey, key } = evt;
			if (metaKey || altKey || !ButtonPressedKeys.includes(key)) {
				this.removeEventListener("keyup", keyUpHandler);
				return;
			}
			this.addEventListener("keyup", keyUpHandler);
		});
		this.addEventListener("click", this.toggleTimeDisplay);
		super.connectedCallback();
	}
	toggleTimeDisplay() {
		if (this.noToggle) return;
		if (this.hasAttribute("remaining")) this.removeAttribute("remaining");
		else this.setAttribute("remaining", "");
	}
	disconnectedCallback() {
		this.disable();
		super.disconnectedCallback();
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		if (CombinedAttributes.includes(attrName)) this.update();
		else if (attrName === "disabled" && newValue !== oldValue) if (newValue == null) this.enable();
		else this.disable();
		super.attributeChangedCallback(attrName, oldValue, newValue);
	}
	enable() {
		this.tabIndex = 0;
	}
	disable() {
		this.tabIndex = -1;
	}
	/**
	* Whether to show the remaining time
	*/
	get remaining() {
		return getBooleanAttr(this, Attributes$4.REMAINING);
	}
	set remaining(show) {
		setBooleanAttr(this, Attributes$4.REMAINING, show);
	}
	/**
	* Whether to show the duration
	*/
	get showDuration() {
		return getBooleanAttr(this, Attributes$4.SHOW_DURATION);
	}
	set showDuration(show) {
		setBooleanAttr(this, Attributes$4.SHOW_DURATION, show);
	}
	/**
	* Disable the default behavior that toggles between current and remaining time
	*/
	get noToggle() {
		return getBooleanAttr(this, Attributes$4.NO_TOGGLE);
	}
	set noToggle(noToggle) {
		setBooleanAttr(this, Attributes$4.NO_TOGGLE, noToggle);
	}
	/**
	* Get the duration
	*/
	get mediaDuration() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_DURATION);
	}
	set mediaDuration(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_DURATION, time);
	}
	/**
	* The current time in seconds
	*/
	get mediaCurrentTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME);
	}
	set mediaCurrentTime(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, time);
	}
	/**
	* Range of values that can be seeked to.
	* An array of two numbers [start, end]
	*/
	get mediaSeekable() {
		const seekable = this.getAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
		if (!seekable) return void 0;
		return seekable.split(":").map((time) => +time);
	}
	set mediaSeekable(range) {
		if (range == null) {
			this.removeAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
			return;
		}
		this.setAttribute(MediaUIAttributes.MEDIA_SEEKABLE, range.join(":"));
	}
	update() {
		const timesLabel = formatTimesLabel(this);
		updateAriaValueText$1(this);
		if (timesLabel !== __privateGet$10(this, _slot).innerHTML) __privateGet$10(this, _slot).innerHTML = timesLabel;
	}
};
_slot = /* @__PURE__ */ new WeakMap();
MediaTimeDisplay.getSlotTemplateHTML = getSlotTemplateHTML$5;
if (!GlobalThis.customElements.get("media-time-display")) GlobalThis.customElements.define("media-time-display", MediaTimeDisplay);

//#endregion
//#region node_modules/media-chrome/dist/utils/range-animation.js
var __accessCheck$9 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$9 = (obj, member, getter) => {
	__accessCheck$9(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$9 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$8 = (obj, member, value, setter) => {
	__accessCheck$9(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
	set _(value) {
		__privateSet$8(obj, member, value, setter);
	},
	get _() {
		return __privateGet$9(obj, member, getter);
	}
});
var _range, _startTime, _previousTime, _deltaTime, _frameCount, _updateTimestamp, _updateStartValue, _lastRangeIncrease, _id, _animate;
var RangeAnimation = class {
	constructor(range, callback, fps) {
		__privateAdd$9(this, _range, void 0);
		__privateAdd$9(this, _startTime, void 0);
		__privateAdd$9(this, _previousTime, void 0);
		__privateAdd$9(this, _deltaTime, void 0);
		__privateAdd$9(this, _frameCount, void 0);
		__privateAdd$9(this, _updateTimestamp, void 0);
		__privateAdd$9(this, _updateStartValue, void 0);
		__privateAdd$9(this, _lastRangeIncrease, void 0);
		__privateAdd$9(this, _id, 0);
		__privateAdd$9(this, _animate, (now = performance.now()) => {
			__privateSet$8(this, _id, requestAnimationFrame(__privateGet$9(this, _animate)));
			__privateSet$8(this, _deltaTime, performance.now() - __privateGet$9(this, _previousTime));
			const fpsInterval = 1e3 / this.fps;
			if (__privateGet$9(this, _deltaTime) > fpsInterval) {
				__privateSet$8(this, _previousTime, now - __privateGet$9(this, _deltaTime) % fpsInterval);
				const fps$1 = 1e3 / ((now - __privateGet$9(this, _startTime)) / ++__privateWrapper(this, _frameCount)._);
				const delta = (now - __privateGet$9(this, _updateTimestamp)) / 1e3 / this.duration;
				let value = __privateGet$9(this, _updateStartValue) + delta * this.playbackRate;
				if (value - __privateGet$9(this, _range).valueAsNumber > 0) __privateSet$8(this, _lastRangeIncrease, this.playbackRate / this.duration / fps$1);
				else {
					__privateSet$8(this, _lastRangeIncrease, .995 * __privateGet$9(this, _lastRangeIncrease));
					value = __privateGet$9(this, _range).valueAsNumber + __privateGet$9(this, _lastRangeIncrease);
				}
				this.callback(value);
			}
		});
		__privateSet$8(this, _range, range);
		this.callback = callback;
		this.fps = fps;
	}
	start() {
		if (__privateGet$9(this, _id) !== 0) return;
		__privateSet$8(this, _previousTime, performance.now());
		__privateSet$8(this, _startTime, __privateGet$9(this, _previousTime));
		__privateSet$8(this, _frameCount, 0);
		__privateGet$9(this, _animate).call(this);
	}
	stop() {
		if (__privateGet$9(this, _id) === 0) return;
		cancelAnimationFrame(__privateGet$9(this, _id));
		__privateSet$8(this, _id, 0);
	}
	update({ start, duration, playbackRate }) {
		const increase = start - __privateGet$9(this, _range).valueAsNumber;
		const durationDelta = Math.abs(duration - this.duration);
		if (increase > 0 || increase < -.03 || durationDelta >= .5) this.callback(start);
		__privateSet$8(this, _updateStartValue, start);
		__privateSet$8(this, _updateTimestamp, performance.now());
		this.duration = duration;
		this.playbackRate = playbackRate;
	}
};
_range = /* @__PURE__ */ new WeakMap();
_startTime = /* @__PURE__ */ new WeakMap();
_previousTime = /* @__PURE__ */ new WeakMap();
_deltaTime = /* @__PURE__ */ new WeakMap();
_frameCount = /* @__PURE__ */ new WeakMap();
_updateTimestamp = /* @__PURE__ */ new WeakMap();
_updateStartValue = /* @__PURE__ */ new WeakMap();
_lastRangeIncrease = /* @__PURE__ */ new WeakMap();
_id = /* @__PURE__ */ new WeakMap();
_animate = /* @__PURE__ */ new WeakMap();

//#endregion
//#region node_modules/media-chrome/dist/media-time-range.js
var __accessCheck$8 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$8 = (obj, member, getter) => {
	__accessCheck$8(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$8 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$7 = (obj, member, value, setter) => {
	__accessCheck$8(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$7 = (obj, member, method) => {
	__accessCheck$8(obj, member, "access private method");
	return method;
};
var _rootNode, _animation, _boxes, _previewTime, _previewBox, _currentBox, _boxPaddingLeft, _boxPaddingRight, _mediaChaptersCues, _isPointerDown, _toggleRangeAnimation, toggleRangeAnimation_fn, _shouldRangeAnimate, shouldRangeAnimate_fn, _updateRange, _getElementRects, getElementRects_fn, _getBoxPosition, getBoxPosition_fn, _getBoxShiftPosition, getBoxShiftPosition_fn, _handlePointerMove, handlePointerMove_fn, _previewRequest, previewRequest_fn, _seekRequest, seekRequest_fn;
var DEFAULT_MISSING_TIME_PHRASE = "video not loaded, unknown time.";
var updateAriaValueText = (el) => {
	const range = el.range;
	const currentTimePhrase = formatAsTimePhrase(+calcTimeFromRangeValue(el));
	const totalTimePhrase = formatAsTimePhrase(+el.mediaSeekableEnd);
	const fullPhrase = !(currentTimePhrase && totalTimePhrase) ? DEFAULT_MISSING_TIME_PHRASE : `${currentTimePhrase} of ${totalTimePhrase}`;
	range.setAttribute("aria-valuetext", fullPhrase);
};
function getTemplateHTML$5(_attrs) {
	return `
    ${MediaChromeRange.getTemplateHTML(_attrs)}
    <style>
      :host {
        --media-box-border-radius: 4px;
        --media-box-padding-left: 10px;
        --media-box-padding-right: 10px;
        --media-preview-border-radius: var(--media-box-border-radius);
        --media-box-arrow-offset: var(--media-box-border-radius);
        --_control-background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
        --_preview-background: var(--media-preview-background, var(--_control-background));

        
        contain: layout;
      }

      #buffered {
        background: var(--media-time-range-buffered-color, rgb(255 255 255 / .4));
        position: absolute;
        height: 100%;
        will-change: width;
      }

      #preview-rail,
      #current-rail {
        width: 100%;
        position: absolute;
        left: 0;
        bottom: 100%;
        pointer-events: none;
        will-change: transform;
      }

      [part~="box"] {
        width: min-content;
        
        position: absolute;
        bottom: 100%;
        flex-direction: column;
        align-items: center;
        transform: translateX(-50%);
      }

      [part~="current-box"] {
        display: var(--media-current-box-display, var(--media-box-display, flex));
        margin: var(--media-current-box-margin, var(--media-box-margin, 0 0 5px));
        visibility: hidden;
      }

      [part~="preview-box"] {
        display: var(--media-preview-box-display, var(--media-box-display, flex));
        margin: var(--media-preview-box-margin, var(--media-box-margin, 0 0 5px));
        transition-property: var(--media-preview-transition-property, visibility, opacity);
        transition-duration: var(--media-preview-transition-duration-out, .25s);
        transition-delay: var(--media-preview-transition-delay-out, 0s);
        visibility: hidden;
        opacity: 0;
      }

      :host(:is([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}], [${MediaUIAttributes.MEDIA_PREVIEW_TIME}])[dragging]) [part~="preview-box"] {
        transition-duration: var(--media-preview-transition-duration-in, .5s);
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        visibility: visible;
        opacity: 1;
      }

      @media (hover: hover) {
        :host(:is([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}], [${MediaUIAttributes.MEDIA_PREVIEW_TIME}]):hover) [part~="preview-box"] {
          transition-duration: var(--media-preview-transition-duration-in, .5s);
          transition-delay: var(--media-preview-transition-delay-in, .25s);
          visibility: visible;
          opacity: 1;
        }
      }

      media-preview-thumbnail,
      ::slotted(media-preview-thumbnail) {
        visibility: hidden;
        
        transition: visibility 0s .25s;
        transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
        background: var(--media-preview-thumbnail-background, var(--_preview-background));
        box-shadow: var(--media-preview-thumbnail-box-shadow, 0 0 4px rgb(0 0 0 / .2));
        max-width: var(--media-preview-thumbnail-max-width, 180px);
        max-height: var(--media-preview-thumbnail-max-height, 160px);
        min-width: var(--media-preview-thumbnail-min-width, 120px);
        min-height: var(--media-preview-thumbnail-min-height, 80px);
        border: var(--media-preview-thumbnail-border);
        border-radius: var(--media-preview-thumbnail-border-radius,
          var(--media-preview-border-radius) var(--media-preview-border-radius) 0 0);
      }

      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}][dragging]) media-preview-thumbnail,
      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}][dragging]) ::slotted(media-preview-thumbnail) {
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        visibility: visible;
      }

      @media (hover: hover) {
        :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]:hover) media-preview-thumbnail,
        :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]:hover) ::slotted(media-preview-thumbnail) {
          transition-delay: var(--media-preview-transition-delay-in, .25s);
          visibility: visible;
        }

        :host([${MediaUIAttributes.MEDIA_PREVIEW_TIME}]:hover) {
          --media-time-range-hover-display: block;
        }
      }

      media-preview-chapter-display,
      ::slotted(media-preview-chapter-display) {
        font-size: var(--media-font-size, 13px);
        line-height: 17px;
        min-width: 0;
        visibility: hidden;
        
        transition: min-width 0s, border-radius 0s, margin 0s, padding 0s, visibility 0s;
        transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
        background: var(--media-preview-chapter-background, var(--_preview-background));
        border-radius: var(--media-preview-chapter-border-radius,
          var(--media-preview-border-radius) var(--media-preview-border-radius)
          var(--media-preview-border-radius) var(--media-preview-border-radius));
        padding: var(--media-preview-chapter-padding, 3.5px 9px);
        margin: var(--media-preview-chapter-margin, 0 0 5px);
        text-shadow: var(--media-preview-chapter-text-shadow, 0 0 4px rgb(0 0 0 / .75));
      }

      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) media-preview-chapter-display,
      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) ::slotted(media-preview-chapter-display) {
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        border-radius: var(--media-preview-chapter-border-radius, 0);
        padding: var(--media-preview-chapter-padding, 3.5px 9px 0);
        margin: var(--media-preview-chapter-margin, 0);
        min-width: 100%;
      }

      media-preview-chapter-display[${MediaUIAttributes.MEDIA_PREVIEW_CHAPTER}],
      ::slotted(media-preview-chapter-display[${MediaUIAttributes.MEDIA_PREVIEW_CHAPTER}]) {
        visibility: visible;
      }

      media-preview-chapter-display:not([aria-valuetext]),
      ::slotted(media-preview-chapter-display:not([aria-valuetext])) {
        display: none;
      }

      media-preview-time-display,
      ::slotted(media-preview-time-display),
      media-time-display,
      ::slotted(media-time-display) {
        font-size: var(--media-font-size, 13px);
        line-height: 17px;
        min-width: 0;
        
        transition: min-width 0s, border-radius 0s;
        transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
        background: var(--media-preview-time-background, var(--_preview-background));
        border-radius: var(--media-preview-time-border-radius,
          var(--media-preview-border-radius) var(--media-preview-border-radius)
          var(--media-preview-border-radius) var(--media-preview-border-radius));
        padding: var(--media-preview-time-padding, 3.5px 9px);
        margin: var(--media-preview-time-margin, 0);
        text-shadow: var(--media-preview-time-text-shadow, 0 0 4px rgb(0 0 0 / .75));
        transform: translateX(min(
          max(calc(50% - var(--_box-width) / 2),
          calc(var(--_box-shift, 0))),
          calc(var(--_box-width) / 2 - 50%)
        ));
      }

      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) media-preview-time-display,
      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) ::slotted(media-preview-time-display) {
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        border-radius: var(--media-preview-time-border-radius,
          0 0 var(--media-preview-border-radius) var(--media-preview-border-radius));
        min-width: 100%;
      }

      :host([${MediaUIAttributes.MEDIA_PREVIEW_TIME}]:hover) {
        --media-time-range-hover-display: block;
      }

      [part~="arrow"],
      ::slotted([part~="arrow"]) {
        display: var(--media-box-arrow-display, inline-block);
        transform: translateX(min(
          max(calc(50% - var(--_box-width) / 2 + var(--media-box-arrow-offset)),
          calc(var(--_box-shift, 0))),
          calc(var(--_box-width) / 2 - 50% - var(--media-box-arrow-offset))
        ));
        
        border-color: transparent;
        border-top-color: var(--media-box-arrow-background, var(--_control-background));
        border-width: var(--media-box-arrow-border-width,
          var(--media-box-arrow-height, 5px) var(--media-box-arrow-width, 6px) 0);
        border-style: solid;
        justify-content: center;
        height: 0;
      }
    </style>
    <div id="preview-rail">
      <slot name="preview" part="box preview-box">
        <media-preview-thumbnail>
          <template shadowrootmode="${media_preview_thumbnail_default.shadowRootOptions.mode}">
            ${media_preview_thumbnail_default.getTemplateHTML({})}
          </template>
        </media-preview-thumbnail>
        <media-preview-chapter-display></media-preview-chapter-display>
        <media-preview-time-display></media-preview-time-display>
        <slot name="preview-arrow"><div part="arrow"></div></slot>
      </slot>
    </div>
    <div id="current-rail">
      <slot name="current" part="box current-box">
        
      </slot>
    </div>
  `;
}
var calcRangeValueFromTime = (el, time = el.mediaCurrentTime) => {
	const startTime = Number.isFinite(el.mediaSeekableStart) ? el.mediaSeekableStart : 0;
	const endTime = Number.isFinite(el.mediaDuration) ? el.mediaDuration : el.mediaSeekableEnd;
	if (Number.isNaN(endTime)) return 0;
	const value = (time - startTime) / (endTime - startTime);
	return Math.max(0, Math.min(value, 1));
};
var calcTimeFromRangeValue = (el, value = el.range.valueAsNumber) => {
	const startTime = Number.isFinite(el.mediaSeekableStart) ? el.mediaSeekableStart : 0;
	const endTime = Number.isFinite(el.mediaDuration) ? el.mediaDuration : el.mediaSeekableEnd;
	if (Number.isNaN(endTime)) return 0;
	return value * (endTime - startTime) + startTime;
};
var MediaTimeRange = class extends MediaChromeRange {
	constructor() {
		super();
		__privateAdd$8(this, _toggleRangeAnimation);
		__privateAdd$8(this, _shouldRangeAnimate);
		__privateAdd$8(this, _getElementRects);
		/**
		* Get the position, max and min for the box in percentage.
		* It's important this is in percentage so when the player is resized
		* the box will move accordingly.
		*/
		__privateAdd$8(this, _getBoxPosition);
		__privateAdd$8(this, _getBoxShiftPosition);
		__privateAdd$8(this, _handlePointerMove);
		__privateAdd$8(this, _previewRequest);
		__privateAdd$8(this, _seekRequest);
		__privateAdd$8(this, _rootNode, void 0);
		__privateAdd$8(this, _animation, void 0);
		__privateAdd$8(this, _boxes, void 0);
		__privateAdd$8(this, _previewTime, void 0);
		__privateAdd$8(this, _previewBox, void 0);
		__privateAdd$8(this, _currentBox, void 0);
		__privateAdd$8(this, _boxPaddingLeft, void 0);
		__privateAdd$8(this, _boxPaddingRight, void 0);
		__privateAdd$8(this, _mediaChaptersCues, void 0);
		__privateAdd$8(this, _isPointerDown, void 0);
		__privateAdd$8(this, _updateRange, (value) => {
			if (this.dragging) return;
			if (isValidNumber(value)) this.range.valueAsNumber = value;
			if (!__privateGet$8(this, _isPointerDown)) this.updateBar();
		});
		this.shadowRoot.querySelector("#track").insertAdjacentHTML("afterbegin", "<div id=\"buffered\" part=\"buffered\"></div>");
		__privateSet$7(this, _boxes, this.shadowRoot.querySelectorAll("[part~=\"box\"]"));
		__privateSet$7(this, _previewBox, this.shadowRoot.querySelector("[part~=\"preview-box\"]"));
		__privateSet$7(this, _currentBox, this.shadowRoot.querySelector("[part~=\"current-box\"]"));
		const computedStyle = getComputedStyle(this);
		__privateSet$7(this, _boxPaddingLeft, parseInt(computedStyle.getPropertyValue("--media-box-padding-left")));
		__privateSet$7(this, _boxPaddingRight, parseInt(computedStyle.getPropertyValue("--media-box-padding-right")));
		__privateSet$7(this, _animation, new RangeAnimation(this.range, __privateGet$8(this, _updateRange), 60));
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_PAUSED,
			MediaUIAttributes.MEDIA_DURATION,
			MediaUIAttributes.MEDIA_SEEKABLE,
			MediaUIAttributes.MEDIA_CURRENT_TIME,
			MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
			MediaUIAttributes.MEDIA_PREVIEW_TIME,
			MediaUIAttributes.MEDIA_PREVIEW_CHAPTER,
			MediaUIAttributes.MEDIA_BUFFERED,
			MediaUIAttributes.MEDIA_PLAYBACK_RATE,
			MediaUIAttributes.MEDIA_LOADING,
			MediaUIAttributes.MEDIA_ENDED
		];
	}
	connectedCallback() {
		var _a$2;
		super.connectedCallback();
		this.range.setAttribute("aria-label", t("seek"));
		__privateMethod$7(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this);
		__privateSet$7(this, _rootNode, this.getRootNode());
		(_a$2 = __privateGet$8(this, _rootNode)) == null || _a$2.addEventListener("transitionstart", this);
	}
	disconnectedCallback() {
		var _a$2;
		super.disconnectedCallback();
		__privateMethod$7(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this);
		(_a$2 = __privateGet$8(this, _rootNode)) == null || _a$2.removeEventListener("transitionstart", this);
		__privateSet$7(this, _rootNode, null);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (oldValue == newValue) return;
		if (attrName === MediaUIAttributes.MEDIA_CURRENT_TIME || attrName === MediaUIAttributes.MEDIA_PAUSED || attrName === MediaUIAttributes.MEDIA_ENDED || attrName === MediaUIAttributes.MEDIA_LOADING || attrName === MediaUIAttributes.MEDIA_DURATION || attrName === MediaUIAttributes.MEDIA_SEEKABLE) {
			__privateGet$8(this, _animation).update({
				start: calcRangeValueFromTime(this),
				duration: this.mediaSeekableEnd - this.mediaSeekableStart,
				playbackRate: this.mediaPlaybackRate
			});
			__privateMethod$7(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this);
			updateAriaValueText(this);
		} else if (attrName === MediaUIAttributes.MEDIA_BUFFERED) this.updateBufferedBar();
		if (attrName === MediaUIAttributes.MEDIA_DURATION || attrName === MediaUIAttributes.MEDIA_SEEKABLE) {
			this.mediaChaptersCues = __privateGet$8(this, _mediaChaptersCues);
			this.updateBar();
		}
	}
	get mediaChaptersCues() {
		return __privateGet$8(this, _mediaChaptersCues);
	}
	set mediaChaptersCues(value) {
		var _a$2;
		__privateSet$7(this, _mediaChaptersCues, value);
		this.updateSegments((_a$2 = __privateGet$8(this, _mediaChaptersCues)) == null ? void 0 : _a$2.map((c$3) => ({
			start: calcRangeValueFromTime(this, c$3.startTime),
			end: calcRangeValueFromTime(this, c$3.endTime)
		})));
	}
	/**
	* Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	/**
	* Is the media loading
	*/
	get mediaLoading() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING);
	}
	set mediaLoading(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING, value);
	}
	/**
	*
	*/
	get mediaDuration() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_DURATION);
	}
	set mediaDuration(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_DURATION, value);
	}
	/**
	*
	*/
	get mediaCurrentTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME);
	}
	set mediaCurrentTime(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, value);
	}
	/**
	*
	*/
	get mediaPlaybackRate() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, 1);
	}
	set mediaPlaybackRate(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
	}
	/**
	* An array of ranges, each range being an array of two numbers.
	* e.g. [[1, 2], [3, 4]]
	*/
	get mediaBuffered() {
		const buffered = this.getAttribute(MediaUIAttributes.MEDIA_BUFFERED);
		if (!buffered) return [];
		return buffered.split(" ").map((timePair) => timePair.split(":").map((timeStr) => +timeStr));
	}
	set mediaBuffered(list) {
		if (!list) {
			this.removeAttribute(MediaUIAttributes.MEDIA_BUFFERED);
			return;
		}
		const strVal = list.map((tuple) => tuple.join(":")).join(" ");
		this.setAttribute(MediaUIAttributes.MEDIA_BUFFERED, strVal);
	}
	/**
	* Range of values that can be seeked to
	* An array of two numbers [start, end]
	*/
	get mediaSeekable() {
		const seekable = this.getAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
		if (!seekable) return void 0;
		return seekable.split(":").map((time) => +time);
	}
	set mediaSeekable(range) {
		if (range == null) {
			this.removeAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
			return;
		}
		this.setAttribute(MediaUIAttributes.MEDIA_SEEKABLE, range.join(":"));
	}
	/**
	*
	*/
	get mediaSeekableEnd() {
		var _a$2;
		const [, end = this.mediaDuration] = (_a$2 = this.mediaSeekable) != null ? _a$2 : [];
		return end;
	}
	get mediaSeekableStart() {
		var _a$2;
		const [start = 0] = (_a$2 = this.mediaSeekable) != null ? _a$2 : [];
		return start;
	}
	/**
	* The url of the preview image
	*/
	get mediaPreviewImage() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE);
	}
	set mediaPreviewImage(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE, value);
	}
	/**
	*
	*/
	get mediaPreviewTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME);
	}
	set mediaPreviewTime(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME, value);
	}
	/**
	*
	*/
	get mediaEnded() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_ENDED);
	}
	set mediaEnded(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_ENDED, value);
	}
	updateBar() {
		super.updateBar();
		this.updateBufferedBar();
		this.updateCurrentBox();
	}
	updateBufferedBar() {
		var _a$2;
		const buffered = this.mediaBuffered;
		if (!buffered.length) return;
		let relativeBufferedEnd;
		if (!this.mediaEnded) {
			const currentTime = this.mediaCurrentTime;
			const [, bufferedEnd = this.mediaSeekableStart] = (_a$2 = buffered.find(([start, end]) => start <= currentTime && currentTime <= end)) != null ? _a$2 : [];
			relativeBufferedEnd = calcRangeValueFromTime(this, bufferedEnd);
		} else relativeBufferedEnd = 1;
		const { style } = getOrInsertCSSRule(this.shadowRoot, "#buffered");
		style.setProperty("width", `${relativeBufferedEnd * 100}%`);
	}
	updateCurrentBox() {
		if (!this.shadowRoot.querySelector("slot[name=\"current\"]").assignedElements().length) return;
		const currentRailRule = getOrInsertCSSRule(this.shadowRoot, "#current-rail");
		const currentBoxRule = getOrInsertCSSRule(this.shadowRoot, "[part~=\"current-box\"]");
		const rects = __privateMethod$7(this, _getElementRects, getElementRects_fn).call(this, __privateGet$8(this, _currentBox));
		const boxPos = __privateMethod$7(this, _getBoxPosition, getBoxPosition_fn).call(this, rects, this.range.valueAsNumber);
		const boxShift = __privateMethod$7(this, _getBoxShiftPosition, getBoxShiftPosition_fn).call(this, rects, this.range.valueAsNumber);
		currentRailRule.style.transform = `translateX(${boxPos})`;
		currentRailRule.style.setProperty("--_range-width", `${rects.range.width}`);
		currentBoxRule.style.setProperty("--_box-shift", `${boxShift}`);
		currentBoxRule.style.setProperty("--_box-width", `${rects.box.width}px`);
		currentBoxRule.style.setProperty("visibility", "initial");
	}
	handleEvent(evt) {
		super.handleEvent(evt);
		switch (evt.type) {
			case "input":
				__privateMethod$7(this, _seekRequest, seekRequest_fn).call(this);
				break;
			case "pointermove":
				__privateMethod$7(this, _handlePointerMove, handlePointerMove_fn).call(this, evt);
				break;
			case "pointerup":
				if (__privateGet$8(this, _isPointerDown)) __privateSet$7(this, _isPointerDown, false);
				break;
			case "pointerdown":
				__privateSet$7(this, _isPointerDown, true);
				break;
			case "pointerleave":
				__privateMethod$7(this, _previewRequest, previewRequest_fn).call(this, null);
				break;
			case "transitionstart":
				if (containsComposedNode(evt.target, this)) setTimeout(() => __privateMethod$7(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this), 0);
				break;
		}
	}
};
_rootNode = /* @__PURE__ */ new WeakMap();
_animation = /* @__PURE__ */ new WeakMap();
_boxes = /* @__PURE__ */ new WeakMap();
_previewTime = /* @__PURE__ */ new WeakMap();
_previewBox = /* @__PURE__ */ new WeakMap();
_currentBox = /* @__PURE__ */ new WeakMap();
_boxPaddingLeft = /* @__PURE__ */ new WeakMap();
_boxPaddingRight = /* @__PURE__ */ new WeakMap();
_mediaChaptersCues = /* @__PURE__ */ new WeakMap();
_isPointerDown = /* @__PURE__ */ new WeakMap();
_toggleRangeAnimation = /* @__PURE__ */ new WeakSet();
toggleRangeAnimation_fn = function() {
	if (__privateMethod$7(this, _shouldRangeAnimate, shouldRangeAnimate_fn).call(this)) __privateGet$8(this, _animation).start();
	else __privateGet$8(this, _animation).stop();
};
_shouldRangeAnimate = /* @__PURE__ */ new WeakSet();
shouldRangeAnimate_fn = function() {
	return this.isConnected && !this.mediaPaused && !this.mediaLoading && !this.mediaEnded && this.mediaSeekableEnd > 0 && isElementVisible(this);
};
_updateRange = /* @__PURE__ */ new WeakMap();
_getElementRects = /* @__PURE__ */ new WeakSet();
getElementRects_fn = function(box) {
	var _a$2;
	const boundsRect = ((_a$2 = this.getAttribute("bounds") ? closestComposedNode(this, `#${this.getAttribute("bounds")}`) : this.parentElement) != null ? _a$2 : this).getBoundingClientRect();
	const rangeRect = this.range.getBoundingClientRect();
	const width = box.offsetWidth;
	const min = -(rangeRect.left - boundsRect.left - width / 2);
	const max = boundsRect.right - rangeRect.left - width / 2;
	return {
		box: {
			width,
			min,
			max
		},
		bounds: boundsRect,
		range: rangeRect
	};
};
_getBoxPosition = /* @__PURE__ */ new WeakSet();
getBoxPosition_fn = function(rects, ratio) {
	let position = `${ratio * 100}%`;
	const { width, min, max } = rects.box;
	if (!width) return position;
	if (!Number.isNaN(min)) position = `max(${`calc(1 / var(--_range-width) * 100 * ${min}% + var(--media-box-padding-left))`}, ${position})`;
	if (!Number.isNaN(max)) {
		const maxPos = `calc(1 / var(--_range-width) * 100 * ${max}% - var(--media-box-padding-right))`;
		position = `min(${position}, ${maxPos})`;
	}
	return position;
};
_getBoxShiftPosition = /* @__PURE__ */ new WeakSet();
getBoxShiftPosition_fn = function(rects, ratio) {
	const { width, min, max } = rects.box;
	const pointerX = ratio * rects.range.width;
	if (pointerX < min + __privateGet$8(this, _boxPaddingLeft)) {
		const offset = rects.range.left - rects.bounds.left - __privateGet$8(this, _boxPaddingLeft);
		return `${pointerX - width / 2 + offset}px`;
	}
	if (pointerX > max - __privateGet$8(this, _boxPaddingRight)) {
		const offset = rects.bounds.right - rects.range.right - __privateGet$8(this, _boxPaddingRight);
		return `${pointerX + width / 2 - offset - rects.range.width}px`;
	}
	return 0;
};
_handlePointerMove = /* @__PURE__ */ new WeakSet();
handlePointerMove_fn = function(evt) {
	const isOverBoxes = [...__privateGet$8(this, _boxes)].some((b$4) => evt.composedPath().includes(b$4));
	if (!this.dragging && (isOverBoxes || !evt.composedPath().includes(this))) {
		__privateMethod$7(this, _previewRequest, previewRequest_fn).call(this, null);
		return;
	}
	const duration = this.mediaSeekableEnd;
	if (!duration) return;
	const previewRailRule = getOrInsertCSSRule(this.shadowRoot, "#preview-rail");
	const previewBoxRule = getOrInsertCSSRule(this.shadowRoot, "[part~=\"preview-box\"]");
	const rects = __privateMethod$7(this, _getElementRects, getElementRects_fn).call(this, __privateGet$8(this, _previewBox));
	let pointerRatio = (evt.clientX - rects.range.left) / rects.range.width;
	pointerRatio = Math.max(0, Math.min(1, pointerRatio));
	const boxPos = __privateMethod$7(this, _getBoxPosition, getBoxPosition_fn).call(this, rects, pointerRatio);
	const boxShift = __privateMethod$7(this, _getBoxShiftPosition, getBoxShiftPosition_fn).call(this, rects, pointerRatio);
	previewRailRule.style.transform = `translateX(${boxPos})`;
	previewRailRule.style.setProperty("--_range-width", `${rects.range.width}`);
	previewBoxRule.style.setProperty("--_box-shift", `${boxShift}`);
	previewBoxRule.style.setProperty("--_box-width", `${rects.box.width}px`);
	const diff = Math.round(__privateGet$8(this, _previewTime)) - Math.round(pointerRatio * duration);
	if (Math.abs(diff) < 1 && pointerRatio > .01 && pointerRatio < .99) return;
	__privateSet$7(this, _previewTime, pointerRatio * duration);
	__privateMethod$7(this, _previewRequest, previewRequest_fn).call(this, __privateGet$8(this, _previewTime));
};
_previewRequest = /* @__PURE__ */ new WeakSet();
previewRequest_fn = function(detail) {
	this.dispatchEvent(new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_PREVIEW_REQUEST, {
		composed: true,
		bubbles: true,
		detail
	}));
};
_seekRequest = /* @__PURE__ */ new WeakSet();
seekRequest_fn = function() {
	__privateGet$8(this, _animation).stop();
	const detail = calcTimeFromRangeValue(this);
	this.dispatchEvent(new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
		composed: true,
		bubbles: true,
		detail
	}));
};
MediaTimeRange.shadowRootOptions = { mode: "open" };
MediaTimeRange.getTemplateHTML = getTemplateHTML$5;
if (!GlobalThis.customElements.get("media-time-range")) GlobalThis.customElements.define("media-time-range", MediaTimeRange);

//#endregion
//#region node_modules/media-chrome/dist/media-volume-range.js
var DEFAULT_VOLUME = 1;
var toVolume = (el) => {
	if (el.mediaMuted) return 0;
	return el.mediaVolume;
};
var formatAsPercentString = (value) => `${Math.round(value * 100)}%`;
var MediaVolumeRange = class extends MediaChromeRange {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_VOLUME,
			MediaUIAttributes.MEDIA_MUTED,
			MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE
		];
	}
	constructor() {
		super();
		this.range.addEventListener("input", () => {
			const detail = this.range.value;
			const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_VOLUME_REQUEST, {
				composed: true,
				bubbles: true,
				detail
			});
			this.dispatchEvent(evt);
		});
	}
	connectedCallback() {
		super.connectedCallback();
		this.range.setAttribute("aria-label", t("volume"));
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_VOLUME || attrName === MediaUIAttributes.MEDIA_MUTED) {
			this.range.valueAsNumber = toVolume(this);
			this.range.setAttribute("aria-valuetext", formatAsPercentString(this.range.valueAsNumber));
			this.updateBar();
		}
	}
	/**
	*
	*/
	get mediaVolume() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_VOLUME, DEFAULT_VOLUME);
	}
	set mediaVolume(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_VOLUME, value);
	}
	/**
	* Is the media currently muted
	*/
	get mediaMuted() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_MUTED);
	}
	set mediaMuted(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_MUTED, value);
	}
	/**
	* The volume unavailability state
	*/
	get mediaVolumeUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE);
	}
	set mediaVolumeUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE, value);
	}
};
if (!GlobalThis.customElements.get("media-volume-range")) GlobalThis.customElements.define("media-volume-range", MediaVolumeRange);

//#endregion
//#region node_modules/media-chrome/dist/utils/template-parts.js
var __accessCheck$7 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$7 = (obj, member, getter) => {
	__accessCheck$7(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$7 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$6 = (obj, member, value, setter) => {
	__accessCheck$7(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _parts, _processor, _items, _value, _element, _attributeName, _namespaceURI, _list, list_get, _parentNode, _nodes;
var ELEMENT = 1;
var STRING = 0;
var PART = 1;
var defaultProcessor = { processCallback(instance, parts, state) {
	if (!state) return;
	for (const [expression, part] of parts) if (expression in state) {
		const value = state[expression];
		if (typeof value === "boolean" && part instanceof AttrPart && typeof part.element[part.attributeName] === "boolean") part.booleanValue = value;
		else if (typeof value === "function" && part instanceof AttrPart) part.element[part.attributeName] = value;
		else part.value = value;
	}
} };
var TemplateInstance = class extends GlobalThis.DocumentFragment {
	constructor(template, state, processor$1 = defaultProcessor) {
		var _a$2;
		super();
		__privateAdd$7(this, _parts, void 0);
		__privateAdd$7(this, _processor, void 0);
		this.append(template.content.cloneNode(true));
		__privateSet$6(this, _parts, parse(this));
		__privateSet$6(this, _processor, processor$1);
		(_a$2 = processor$1.createCallback) == null || _a$2.call(processor$1, this, __privateGet$7(this, _parts), state);
		processor$1.processCallback(this, __privateGet$7(this, _parts), state);
	}
	update(state) {
		__privateGet$7(this, _processor).processCallback(this, __privateGet$7(this, _parts), state);
	}
};
_parts = /* @__PURE__ */ new WeakMap();
_processor = /* @__PURE__ */ new WeakMap();
var parse = (element, parts = []) => {
	let type, value;
	for (const attr of element.attributes || []) if (attr.value.includes("{{")) {
		const list = new AttrPartList();
		for ([type, value] of tokenize$1(attr.value)) if (!type) list.append(value);
		else {
			const part = new AttrPart(element, attr.name, attr.namespaceURI);
			list.append(part);
			parts.push([value, part]);
		}
		attr.value = list.toString();
	}
	for (const node of element.childNodes) if (node.nodeType === ELEMENT && !(node instanceof HTMLTemplateElement)) parse(node, parts);
	else {
		const data = node.data;
		if (node.nodeType === ELEMENT || data.includes("{{")) {
			const items = [];
			if (data) for ([type, value] of tokenize$1(data)) if (!type) items.push(new Text(value));
			else {
				const part = new ChildNodePart(element);
				items.push(part);
				parts.push([value, part]);
			}
			else if (node instanceof HTMLTemplateElement) {
				const part = new InnerTemplatePart(element, node);
				items.push(part);
				parts.push([part.expression, part]);
			}
			node.replaceWith(...items.flatMap((part) => part.replacementNodes || [part]));
		}
	}
	return parts;
};
var mem = {};
var tokenize$1 = (text) => {
	let value = "", open = 0, tokens = mem[text], i$1 = 0, c$3;
	if (tokens) return tokens;
	else tokens = [];
	for (; c$3 = text[i$1]; i$1++) if (c$3 === "{" && text[i$1 + 1] === "{" && text[i$1 - 1] !== "\\" && text[i$1 + 2] && ++open == 1) {
		if (value) tokens.push([STRING, value]);
		value = "";
		i$1++;
	} else if (c$3 === "}" && text[i$1 + 1] === "}" && text[i$1 - 1] !== "\\" && !--open) {
		tokens.push([PART, value.trim()]);
		value = "";
		i$1++;
	} else value += c$3 || "";
	if (value) tokens.push([STRING, (open > 0 ? "{{" : "") + value]);
	return mem[text] = tokens;
};
var FRAGMENT = 11;
var Part = class {
	get value() {
		return "";
	}
	set value(val) {}
	toString() {
		return this.value;
	}
};
var attrPartToList = /* @__PURE__ */ new WeakMap();
var AttrPartList = class {
	constructor() {
		__privateAdd$7(this, _items, []);
	}
	[Symbol.iterator]() {
		return __privateGet$7(this, _items).values();
	}
	get length() {
		return __privateGet$7(this, _items).length;
	}
	item(index) {
		return __privateGet$7(this, _items)[index];
	}
	append(...items) {
		for (const item of items) {
			if (item instanceof AttrPart) attrPartToList.set(item, this);
			__privateGet$7(this, _items).push(item);
		}
	}
	toString() {
		return __privateGet$7(this, _items).join("");
	}
};
_items = /* @__PURE__ */ new WeakMap();
var AttrPart = class extends Part {
	constructor(element, attributeName, namespaceURI) {
		super();
		__privateAdd$7(this, _list);
		__privateAdd$7(this, _value, "");
		__privateAdd$7(this, _element, void 0);
		__privateAdd$7(this, _attributeName, void 0);
		__privateAdd$7(this, _namespaceURI, void 0);
		__privateSet$6(this, _element, element);
		__privateSet$6(this, _attributeName, attributeName);
		__privateSet$6(this, _namespaceURI, namespaceURI);
	}
	get attributeName() {
		return __privateGet$7(this, _attributeName);
	}
	get attributeNamespace() {
		return __privateGet$7(this, _namespaceURI);
	}
	get element() {
		return __privateGet$7(this, _element);
	}
	get value() {
		return __privateGet$7(this, _value);
	}
	set value(newValue) {
		if (__privateGet$7(this, _value) === newValue) return;
		__privateSet$6(this, _value, newValue);
		if (!__privateGet$7(this, _list, list_get) || __privateGet$7(this, _list, list_get).length === 1) if (newValue == null) __privateGet$7(this, _element).removeAttributeNS(__privateGet$7(this, _namespaceURI), __privateGet$7(this, _attributeName));
		else __privateGet$7(this, _element).setAttributeNS(__privateGet$7(this, _namespaceURI), __privateGet$7(this, _attributeName), newValue);
		else __privateGet$7(this, _element).setAttributeNS(__privateGet$7(this, _namespaceURI), __privateGet$7(this, _attributeName), __privateGet$7(this, _list, list_get).toString());
	}
	get booleanValue() {
		return __privateGet$7(this, _element).hasAttributeNS(__privateGet$7(this, _namespaceURI), __privateGet$7(this, _attributeName));
	}
	set booleanValue(value) {
		if (!__privateGet$7(this, _list, list_get) || __privateGet$7(this, _list, list_get).length === 1) this.value = value ? "" : null;
		else throw new DOMException("Value is not fully templatized");
	}
};
_value = /* @__PURE__ */ new WeakMap();
_element = /* @__PURE__ */ new WeakMap();
_attributeName = /* @__PURE__ */ new WeakMap();
_namespaceURI = /* @__PURE__ */ new WeakMap();
_list = /* @__PURE__ */ new WeakSet();
list_get = function() {
	return attrPartToList.get(this);
};
var ChildNodePart = class extends Part {
	constructor(parentNode, nodes) {
		super();
		__privateAdd$7(this, _parentNode, void 0);
		__privateAdd$7(this, _nodes, void 0);
		__privateSet$6(this, _parentNode, parentNode);
		__privateSet$6(this, _nodes, nodes ? [...nodes] : [new Text()]);
	}
	get replacementNodes() {
		return __privateGet$7(this, _nodes);
	}
	get parentNode() {
		return __privateGet$7(this, _parentNode);
	}
	get nextSibling() {
		return __privateGet$7(this, _nodes)[__privateGet$7(this, _nodes).length - 1].nextSibling;
	}
	get previousSibling() {
		return __privateGet$7(this, _nodes)[0].previousSibling;
	}
	get value() {
		return __privateGet$7(this, _nodes).map((node) => node.textContent).join("");
	}
	set value(newValue) {
		this.replace(newValue);
	}
	replace(...nodes) {
		const normalisedNodes = nodes.flat().flatMap((node) => node == null ? [new Text()] : node.forEach ? [...node] : node.nodeType === FRAGMENT ? [...node.childNodes] : node.nodeType ? [node] : [new Text(node)]);
		if (!normalisedNodes.length) normalisedNodes.push(new Text());
		__privateSet$6(this, _nodes, swapdom(__privateGet$7(this, _nodes)[0].parentNode, __privateGet$7(this, _nodes), normalisedNodes, this.nextSibling));
	}
};
_parentNode = /* @__PURE__ */ new WeakMap();
_nodes = /* @__PURE__ */ new WeakMap();
var InnerTemplatePart = class extends ChildNodePart {
	constructor(parentNode, template) {
		const directive = template.getAttribute("directive") || template.getAttribute("type");
		let expression = template.getAttribute("expression") || template.getAttribute(directive) || "";
		if (expression.startsWith("{{")) expression = expression.trim().slice(2, -2).trim();
		super(parentNode);
		this.expression = expression;
		this.template = template;
		this.directive = directive;
	}
};
function swapdom(parent, a$2, b$4, end = null) {
	let i$1 = 0, cur, next, bi$1, n$2 = b$4.length, m$5 = a$2.length;
	while (i$1 < n$2 && i$1 < m$5 && a$2[i$1] == b$4[i$1]) i$1++;
	while (i$1 < n$2 && i$1 < m$5 && b$4[n$2 - 1] == a$2[m$5 - 1]) end = b$4[--m$5, --n$2];
	if (i$1 == m$5) while (i$1 < n$2) parent.insertBefore(b$4[i$1++], end);
	if (i$1 == n$2) while (i$1 < m$5) parent.removeChild(a$2[i$1++]);
	else {
		cur = a$2[i$1];
		while (i$1 < n$2) {
			bi$1 = b$4[i$1++], next = cur ? cur.nextSibling : end;
			if (cur == bi$1) cur = next;
			else if (i$1 < n$2 && b$4[i$1] == next) parent.replaceChild(bi$1, cur), cur = next;
			else parent.insertBefore(bi$1, cur);
		}
		while (cur != end) next = cur.nextSibling, parent.removeChild(cur), cur = next;
	}
	return b$4;
}

//#endregion
//#region node_modules/media-chrome/dist/utils/template-processor.js
var pipeModifiers = { string: (value) => String(value) };
var PartialTemplate = class {
	constructor(template) {
		this.template = template;
		this.state = void 0;
	}
};
var templates = /* @__PURE__ */ new WeakMap();
var templateInstances = /* @__PURE__ */ new WeakMap();
var Directives = {
	partial: (part, state) => {
		state[part.expression] = new PartialTemplate(part.template);
	},
	if: (part, state) => {
		var _a$2;
		if (evaluateExpression(part.expression, state)) if (templates.get(part) !== part.template) {
			templates.set(part, part.template);
			const tpl = new TemplateInstance(part.template, state, processor);
			part.replace(tpl);
			templateInstances.set(part, tpl);
		} else (_a$2 = templateInstances.get(part)) == null || _a$2.update(state);
		else {
			part.replace("");
			templates.delete(part);
			templateInstances.delete(part);
		}
	}
};
var DirectiveNames = Object.keys(Directives);
var processor = { processCallback(instance, parts, state) {
	var _a$2, _b;
	if (!state) return;
	for (const [expression, part] of parts) {
		if (part instanceof InnerTemplatePart) {
			if (!part.directive) {
				const directive = DirectiveNames.find((n$2) => part.template.hasAttribute(n$2));
				if (directive) {
					part.directive = directive;
					part.expression = part.template.getAttribute(directive);
				}
			}
			(_a$2 = Directives[part.directive]) == null || _a$2.call(Directives, part, state);
			continue;
		}
		let value = evaluateExpression(expression, state);
		if (value instanceof PartialTemplate) {
			if (templates.get(part) !== value.template) {
				templates.set(part, value.template);
				value = new TemplateInstance(value.template, value.state, processor);
				part.value = value;
				templateInstances.set(part, value);
			} else (_b = templateInstances.get(part)) == null || _b.update(value.state);
			continue;
		}
		if (value) {
			if (part instanceof AttrPart) {
				if (part.attributeName.startsWith("aria-")) value = String(value);
			}
			if (part instanceof AttrPart) if (typeof value === "boolean") part.booleanValue = value;
			else if (typeof value === "function") part.element[part.attributeName] = value;
			else part.value = value;
			else {
				part.value = value;
				templates.delete(part);
				templateInstances.delete(part);
			}
		} else if (part instanceof AttrPart) part.value = void 0;
		else {
			part.value = void 0;
			templates.delete(part);
			templateInstances.delete(part);
		}
	}
} };
var operators = {
	"!": (a$2) => !a$2,
	"!!": (a$2) => !!a$2,
	"==": (a$2, b$4) => a$2 == b$4,
	"!=": (a$2, b$4) => a$2 != b$4,
	">": (a$2, b$4) => a$2 > b$4,
	">=": (a$2, b$4) => a$2 >= b$4,
	"<": (a$2, b$4) => a$2 < b$4,
	"<=": (a$2, b$4) => a$2 <= b$4,
	"??": (a$2, b$4) => a$2 != null ? a$2 : b$4,
	"|": (a$2, b$4) => {
		var _a$2;
		return (_a$2 = pipeModifiers[b$4]) == null ? void 0 : _a$2.call(pipeModifiers, a$2);
	}
};
function tokenizeExpression(expr) {
	return tokenize(expr, {
		boolean: /true|false/,
		number: /-?\d+\.?\d*/,
		string: /(["'])((?:\\.|[^\\])*?)\1/,
		operator: /[!=><][=!]?|\?\?|\|/,
		ws: /\s+/,
		param: /[$a-z_][$\w]*/i
	}).filter(({ type }) => type !== "ws");
}
function evaluateExpression(expr, state = {}) {
	var _a$2, _b, _c, _d, _e$3, _f, _g;
	const tokens = tokenizeExpression(expr);
	if (tokens.length === 0 || tokens.some(({ type }) => !type)) return invalidExpression(expr);
	if (((_a$2 = tokens[0]) == null ? void 0 : _a$2.token) === ">") {
		const partial = state[(_b = tokens[1]) == null ? void 0 : _b.token];
		if (!partial) return invalidExpression(expr);
		const partialState = { ...state };
		partial.state = partialState;
		const args = tokens.slice(2);
		for (let i$1 = 0; i$1 < args.length; i$1 += 3) {
			const name = (_c = args[i$1]) == null ? void 0 : _c.token;
			const operator = (_d = args[i$1 + 1]) == null ? void 0 : _d.token;
			const value = (_e$3 = args[i$1 + 2]) == null ? void 0 : _e$3.token;
			if (name && operator === "=") partialState[name] = getParamValue(value, state);
		}
		return partial;
	}
	if (tokens.length === 1) {
		if (!isValidParam(tokens[0])) return invalidExpression(expr);
		return getParamValue(tokens[0].token, state);
	}
	if (tokens.length === 2) {
		const operator = (_f = tokens[0]) == null ? void 0 : _f.token;
		const run = operators[operator];
		if (!run || !isValidParam(tokens[1])) return invalidExpression(expr);
		const a$2 = getParamValue(tokens[1].token, state);
		return run(a$2);
	}
	if (tokens.length === 3) {
		const operator = (_g = tokens[1]) == null ? void 0 : _g.token;
		const run = operators[operator];
		if (!run || !isValidParam(tokens[0]) || !isValidParam(tokens[2])) return invalidExpression(expr);
		const a$2 = getParamValue(tokens[0].token, state);
		if (operator === "|") return run(a$2, tokens[2].token);
		const b$4 = getParamValue(tokens[2].token, state);
		return run(a$2, b$4);
	}
}
function invalidExpression(expr) {
	console.warn(`Warning: invalid expression \`${expr}\``);
	return false;
}
function isValidParam({ type }) {
	return [
		"number",
		"boolean",
		"string",
		"param"
	].includes(type);
}
function getParamValue(raw, state) {
	const firstChar = raw[0];
	const lastChar = raw.slice(-1);
	if (raw === "true" || raw === "false") return raw === "true";
	if (firstChar === lastChar && [`'`, `"`].includes(firstChar)) return raw.slice(1, -1);
	if (isNumericString(raw)) return parseFloat(raw);
	return state[raw];
}
function tokenize(str, parsers) {
	let len, match, token;
	const tokens = [];
	while (str) {
		token = null;
		len = str.length;
		for (const key in parsers) {
			match = parsers[key].exec(str);
			if (match && match.index < len) {
				token = {
					token: match[0],
					type: key,
					matches: match.slice(1)
				};
				len = match.index;
			}
		}
		if (len) tokens.push({
			token: str.substr(0, len),
			type: void 0
		});
		if (token) tokens.push(token);
		str = str.substr(len + (token ? token.token.length : 0));
	}
	return tokens;
}

//#endregion
//#region node_modules/media-chrome/dist/media-theme-element.js
var __accessCheck$6 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$6 = (obj, member, getter) => {
	__accessCheck$6(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$6 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$5 = (obj, member, value, setter) => {
	__accessCheck$6(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$6 = (obj, member, method) => {
	__accessCheck$6(obj, member, "access private method");
	return method;
};
var _template, _prevTemplate, _prevTemplateId, _upgradeProperty, upgradeProperty_fn, _updateTemplate, updateTemplate_fn;
var observedMediaAttributes = {
	mediatargetlivewindow: "targetlivewindow",
	mediastreamtype: "streamtype"
};
var prependTemplate = Document$1.createElement("template");
prependTemplate.innerHTML = `
  <style>
    :host {
      display: inline-block;
      line-height: 0;
    }

    media-controller {
      width: 100%;
      height: 100%;
    }

    media-captions-button:not([mediasubtitleslist]),
    media-captions-menu:not([mediasubtitleslist]),
    media-captions-menu-button:not([mediasubtitleslist]),
    media-audio-track-menu[mediaaudiotrackunavailable],
    media-audio-track-menu-button[mediaaudiotrackunavailable],
    media-rendition-menu[mediarenditionunavailable],
    media-rendition-menu-button[mediarenditionunavailable],
    media-volume-range[mediavolumeunavailable],
    media-airplay-button[mediaairplayunavailable],
    media-fullscreen-button[mediafullscreenunavailable],
    media-cast-button[mediacastunavailable],
    media-pip-button[mediapipunavailable] {
      display: none;
    }
  </style>
`;
var MediaThemeElement = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$6(this, _upgradeProperty);
		__privateAdd$6(this, _updateTemplate);
		__privateAdd$6(this, _template, void 0);
		__privateAdd$6(this, _prevTemplate, void 0);
		__privateAdd$6(this, _prevTemplateId, void 0);
		if (this.shadowRoot) this.renderRoot = this.shadowRoot;
		else {
			this.renderRoot = this.attachShadow({ mode: "open" });
			this.createRenderer();
		}
		const observer$1 = new MutationObserver((mutationList) => {
			var _a$2;
			if (this.mediaController && !((_a$2 = this.mediaController) == null ? void 0 : _a$2.breakpointsComputed)) return;
			if (mutationList.some((mutation) => {
				const target = mutation.target;
				if (target === this) return true;
				if (target.localName !== "media-controller") return false;
				if (observedMediaAttributes[mutation.attributeName]) return true;
				if (mutation.attributeName.startsWith("breakpoint")) return true;
				return false;
			})) this.render();
		});
		observer$1.observe(this, { attributes: true });
		observer$1.observe(this.renderRoot, {
			attributes: true,
			subtree: true
		});
		this.addEventListener(MediaStateChangeEvents.BREAKPOINTS_COMPUTED, this.render);
		__privateMethod$6(this, _upgradeProperty, upgradeProperty_fn).call(this, "template");
	}
	/** @type {HTMLElement & { breakpointsComputed?: boolean }} */
	get mediaController() {
		return this.renderRoot.querySelector("media-controller");
	}
	get template() {
		var _a$2;
		return (_a$2 = __privateGet$6(this, _template)) != null ? _a$2 : this.constructor.template;
	}
	set template(value) {
		if (value === null) {
			this.removeAttribute("template");
			return;
		}
		if (typeof value === "string") this.setAttribute("template", value);
		else if (value instanceof HTMLTemplateElement) {
			__privateSet$5(this, _template, value);
			__privateSet$5(this, _prevTemplateId, null);
			this.createRenderer();
		}
	}
	get props() {
		var _a$2, _b, _c;
		const observedAttributes$1 = [...Array.from((_b = (_a$2 = this.mediaController) == null ? void 0 : _a$2.attributes) != null ? _b : []).filter(({ name }) => {
			return observedMediaAttributes[name] || name.startsWith("breakpoint");
		}), ...Array.from(this.attributes)];
		const props = {};
		for (const attr of observedAttributes$1) {
			const name = (_c = observedMediaAttributes[attr.name]) != null ? _c : camelCase(attr.name);
			let { value } = attr;
			if (value != null) {
				if (isNumericString(value)) value = parseFloat(value);
				props[name] = value === "" ? true : value;
			} else props[name] = false;
		}
		return props;
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		if (attrName === "template" && oldValue != newValue) __privateMethod$6(this, _updateTemplate, updateTemplate_fn).call(this);
	}
	connectedCallback() {
		__privateMethod$6(this, _updateTemplate, updateTemplate_fn).call(this);
	}
	createRenderer() {
		if (this.template instanceof HTMLTemplateElement && this.template !== __privateGet$6(this, _prevTemplate)) {
			__privateSet$5(this, _prevTemplate, this.template);
			this.renderer = new TemplateInstance(this.template, this.props, this.constructor.processor);
			this.renderRoot.textContent = "";
			this.renderRoot.append(prependTemplate.content.cloneNode(true), this.renderer);
		}
	}
	render() {
		var _a$2;
		(_a$2 = this.renderer) == null || _a$2.update(this.props);
	}
};
_template = /* @__PURE__ */ new WeakMap();
_prevTemplate = /* @__PURE__ */ new WeakMap();
_prevTemplateId = /* @__PURE__ */ new WeakMap();
_upgradeProperty = /* @__PURE__ */ new WeakSet();
upgradeProperty_fn = function(prop) {
	if (Object.prototype.hasOwnProperty.call(this, prop)) {
		const value = this[prop];
		delete this[prop];
		this[prop] = value;
	}
};
_updateTemplate = /* @__PURE__ */ new WeakSet();
updateTemplate_fn = function() {
	var _a$2;
	const templateId = this.getAttribute("template");
	if (!templateId || templateId === __privateGet$6(this, _prevTemplateId)) return;
	const rootNode = this.getRootNode();
	const template = (_a$2 = rootNode == null ? void 0 : rootNode.getElementById) == null ? void 0 : _a$2.call(rootNode, templateId);
	if (template) {
		__privateSet$5(this, _prevTemplateId, templateId);
		__privateSet$5(this, _template, template);
		this.createRenderer();
		return;
	}
	if (isValidUrl(templateId)) {
		__privateSet$5(this, _prevTemplateId, templateId);
		request(templateId).then((data) => {
			const template2 = Document$1.createElement("template");
			template2.innerHTML = data;
			__privateSet$5(this, _template, template2);
			this.createRenderer();
		}).catch(console.error);
	}
};
MediaThemeElement.observedAttributes = ["template"];
MediaThemeElement.processor = processor;
function isValidUrl(url) {
	if (!/^(\/|\.\/|https?:\/\/)/.test(url)) return false;
	const base = /^https?:\/\//.test(url) ? void 0 : location.origin;
	try {
		new URL(url, base);
	} catch (e$1) {
		return false;
	}
	return true;
}
async function request(resource) {
	const response = await fetch(resource);
	if (response.status !== 200) throw new Error(`Failed to load resource: the server responded with a status of ${response.status}`);
	return response.text();
}
if (!GlobalThis.customElements.get("media-theme")) GlobalThis.customElements.define("media-theme", MediaThemeElement);

//#endregion
//#region node_modules/media-chrome/dist/utils/anchor-utils.js
function computePosition({ anchor, floating, placement }) {
	const rects = getElementRects({
		anchor,
		floating
	});
	const { x: x$5, y: y$4 } = computeCoordsFromPlacement(rects, placement);
	return {
		x: x$5,
		y: y$4
	};
}
function getElementRects({ anchor, floating }) {
	return {
		anchor: getRectRelativeToOffsetParent(anchor, floating.offsetParent),
		floating: {
			x: 0,
			y: 0,
			width: floating.offsetWidth,
			height: floating.offsetHeight
		}
	};
}
function getRectRelativeToOffsetParent(element, offsetParent) {
	var _a$2;
	const rect = element.getBoundingClientRect();
	const offsetRect = (_a$2 = offsetParent == null ? void 0 : offsetParent.getBoundingClientRect()) != null ? _a$2 : {
		x: 0,
		y: 0
	};
	return {
		x: rect.x - offsetRect.x,
		y: rect.y - offsetRect.y,
		width: rect.width,
		height: rect.height
	};
}
function computeCoordsFromPlacement({ anchor, floating }, placement) {
	const alignmentAxis = getSideAxis(placement) === "x" ? "y" : "x";
	const alignLength = alignmentAxis === "y" ? "height" : "width";
	const side = getSide(placement);
	const commonX = anchor.x + anchor.width / 2 - floating.width / 2;
	const commonY = anchor.y + anchor.height / 2 - floating.height / 2;
	const commonAlign = anchor[alignLength] / 2 - floating[alignLength] / 2;
	let coords;
	switch (side) {
		case "top":
			coords = {
				x: commonX,
				y: anchor.y - floating.height
			};
			break;
		case "bottom":
			coords = {
				x: commonX,
				y: anchor.y + anchor.height
			};
			break;
		case "right":
			coords = {
				x: anchor.x + anchor.width,
				y: commonY
			};
			break;
		case "left":
			coords = {
				x: anchor.x - floating.width,
				y: commonY
			};
			break;
		default: coords = {
			x: anchor.x,
			y: anchor.y
		};
	}
	switch (placement.split("-")[1]) {
		case "start":
			coords[alignmentAxis] -= commonAlign;
			break;
		case "end":
			coords[alignmentAxis] += commonAlign;
			break;
	}
	return coords;
}
function getSide(placement) {
	return placement.split("-")[0];
}
function getSideAxis(placement) {
	return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}

//#endregion
//#region node_modules/media-chrome/dist/utils/events.js
var InvokeEvent = class extends Event {
	/**
	* @param init - The event options.
	*/
	constructor({ action = "auto", relatedTarget,...options }) {
		super("invoke", options);
		this.action = action;
		this.relatedTarget = relatedTarget;
	}
};
var ToggleEvent = class extends Event {
	/**
	* @param init - The event options.
	*/
	constructor({ newState, oldState,...options }) {
		super("toggle", options);
		this.newState = newState;
		this.oldState = oldState;
	}
};

//#endregion
//#region node_modules/media-chrome/dist/menu/media-chrome-menu.js
var __accessCheck$5 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$5 = (obj, member, getter) => {
	__accessCheck$5(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$5 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$4 = (obj, member, value, setter) => {
	__accessCheck$5(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$5 = (obj, member, method) => {
	__accessCheck$5(obj, member, "access private method");
	return method;
};
var _mediaController, _previouslyFocused, _invokerElement, _previousItems, _mutationObserver, _isPopover, _cssRule, _handleSlotChange$1, handleSlotChange_fn$1, _toggleHeader, toggleHeader_fn, _handleMenuItems, _updateLayoutStyle, updateLayoutStyle_fn, _handleInvoke, handleInvoke_fn, _handleOpen, handleOpen_fn, _handleClosed, handleClosed_fn, _handleBoundsResize, _handleMenuResize, _positionMenu, positionMenu_fn, _resizeMenu, resizeMenu_fn, _handleClick, handleClick_fn, _backButtonElement, backButtonElement_get, _handleToggle, handleToggle_fn, _checkSubmenuHasExpanded, checkSubmenuHasExpanded_fn, _handleFocusOut, handleFocusOut_fn, _handleKeyDown$1, handleKeyDown_fn$1, _getItem, getItem_fn, _getTabItem, getTabItem_fn, _setTabItem, setTabItem_fn, _selectItem, selectItem_fn;
function createMenuItem({ type, text, value, checked }) {
	const item = Document$1.createElement("media-chrome-menu-item");
	item.type = type != null ? type : "";
	item.part.add("menu-item");
	if (type) item.part.add(type);
	item.value = value;
	item.checked = checked;
	const label = Document$1.createElement("span");
	label.textContent = text;
	item.append(label);
	return item;
}
function createIndicator(el, name) {
	let customIndicator = el.querySelector(`:scope > [slot="${name}"]`);
	if ((customIndicator == null ? void 0 : customIndicator.nodeName) == "SLOT") customIndicator = customIndicator.assignedElements({ flatten: true })[0];
	if (customIndicator) {
		customIndicator = customIndicator.cloneNode(true);
		return customIndicator;
	}
	const fallbackIndicator = el.shadowRoot.querySelector(`[name="${name}"] > svg`);
	if (fallbackIndicator) return fallbackIndicator.cloneNode(true);
	return "";
}
function getTemplateHTML$4(_attrs) {
	return `
    <style>
      :host {
        font: var(--media-font,
          var(--media-font-weight, normal)
          var(--media-font-size, 14px) /
          var(--media-text-content-height, var(--media-control-height, 24px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        --_menu-bg: rgb(20 20 30 / .8);
        background: var(--media-menu-background, var(--media-control-background, var(--media-secondary-color, var(--_menu-bg))));
        border-radius: var(--media-menu-border-radius);
        border: var(--media-menu-border, none);
        display: var(--media-menu-display, inline-flex) !important;
        
        transition: var(--media-menu-transition-in,
          visibility 0s,
          opacity .2s ease-out,
          transform .15s ease-out,
          left .2s ease-in-out,
          min-width .2s ease-in-out,
          min-height .2s ease-in-out
        ) !important;
        
        visibility: var(--media-menu-visibility, visible);
        opacity: var(--media-menu-opacity, 1);
        max-height: var(--media-menu-max-height, var(--_menu-max-height, 300px));
        transform: var(--media-menu-transform-in, translateY(0) scale(1));
        flex-direction: column;
        
        min-height: 0;
        position: relative;
        bottom: var(--_menu-bottom);
        box-sizing: border-box;
      } 

      @-moz-document url-prefix() {
        :host{
          --_menu-bg: rgb(20 20 30);
        }
      }

      :host([hidden]) {
        transition: var(--media-menu-transition-out,
          visibility .15s ease-in,
          opacity .15s ease-in,
          transform .15s ease-in
        ) !important;
        visibility: var(--media-menu-hidden-visibility, hidden);
        opacity: var(--media-menu-hidden-opacity, 0);
        max-height: var(--media-menu-hidden-max-height,
          var(--media-menu-max-height, var(--_menu-max-height, 300px)));
        transform: var(--media-menu-transform-out, translateY(2px) scale(.99));
        pointer-events: none;
      }

      :host([slot="submenu"]) {
        background: none;
        width: 100%;
        min-height: 100%;
        position: absolute;
        bottom: 0;
        right: -100%;
      }

      #container {
        display: flex;
        flex-direction: column;
        min-height: 0;
        transition: transform .2s ease-out;
        transform: translate(0, 0);
      }

      #container.has-expanded {
        transition: transform .2s ease-in;
        transform: translate(-100%, 0);
      }

      button {
        background: none;
        color: inherit;
        border: none;
        padding: 0;
        font: inherit;
        outline: inherit;
        display: inline-flex;
        align-items: center;
      }

      slot[name="header"][hidden] {
        display: none;
      }

      slot[name="header"] > *,
      slot[name="header"]::slotted(*) {
        padding: .4em .7em;
        border-bottom: 1px solid rgb(255 255 255 / .25);
        cursor: var(--media-cursor, default);
      }

      slot[name="header"] > button[part~="back"],
      slot[name="header"]::slotted(button[part~="back"]) {
        cursor: var(--media-cursor, pointer);
      }

      svg[part~="back"] {
        height: var(--media-menu-icon-height, var(--media-control-height, 24px));
        fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
        display: block;
        margin-right: .5ch;
      }

      slot:not([name]) {
        gap: var(--media-menu-gap);
        flex-direction: var(--media-menu-flex-direction, column);
        overflow: var(--media-menu-overflow, hidden auto);
        display: flex;
        min-height: 0;
      }

      :host([role="menu"]) slot:not([name]) {
        padding-block: .4em;
      }

      slot:not([name])::slotted([role="menu"]) {
        background: none;
      }

      media-chrome-menu-item > span {
        margin-right: .5ch;
        max-width: var(--media-menu-item-max-width);
        text-overflow: ellipsis;
        overflow: hidden;
      }
    </style>
    <style id="layout-row" media="width:0">

      slot[name="header"] > *,
      slot[name="header"]::slotted(*) {
        padding: .4em .5em;
      }

      slot:not([name]) {
        gap: var(--media-menu-gap, .25em);
        flex-direction: var(--media-menu-flex-direction, row);
        padding-inline: .5em;
      }

      media-chrome-menu-item {
        padding: .3em .5em;
      }

      media-chrome-menu-item[aria-checked="true"] {
        background: var(--media-menu-item-checked-background, rgb(255 255 255 / .2));
      }

      
      media-chrome-menu-item::part(checked-indicator) {
        display: var(--media-menu-item-checked-indicator-display, none);
      }
    </style>
    <div id="container" part="container">
      <slot name="header" hidden>
        <button part="back button" aria-label="Back to previous menu">
          <slot name="back-icon">
            <svg aria-hidden="true" viewBox="0 0 20 24" part="back indicator">
              <path d="m11.88 17.585.742-.669-4.2-4.665 4.2-4.666-.743-.669-4.803 5.335 4.803 5.334Z"/>
            </svg>
          </slot>
          <slot name="title"></slot>
        </button>
      </slot>
      <slot></slot>
    </div>
    <slot name="checked-indicator" hidden></slot>
  `;
}
var Attributes$3 = {
	STYLE: "style",
	HIDDEN: "hidden",
	DISABLED: "disabled",
	ANCHOR: "anchor"
};
var MediaChromeMenu = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$5(this, _handleSlotChange$1);
		__privateAdd$5(this, _toggleHeader);
		/**
		* Sets the layout style for the menu.
		* It can be a row or column layout. e.g. playback-rate-menu
		*/
		__privateAdd$5(this, _updateLayoutStyle);
		__privateAdd$5(this, _handleInvoke);
		__privateAdd$5(this, _handleOpen);
		__privateAdd$5(this, _handleClosed);
		/**
		* Updates the popover menu position based on the anchor element.
		* @param  {number} [menuWidth]
		*/
		__privateAdd$5(this, _positionMenu);
		/**
		* Resize this menu to fit the submenu.
		* @param  {boolean} animate
		*/
		__privateAdd$5(this, _resizeMenu);
		__privateAdd$5(this, _handleClick);
		__privateAdd$5(this, _backButtonElement);
		/**
		* Handle the toggle event of submenus.
		* Closes all other open submenus when opening a submenu.
		* Resizes this menu to fit the submenu.
		*
		* @param  {ToggleEvent} event
		*/
		__privateAdd$5(this, _handleToggle);
		/**
		* Check if any submenu is expanded and update the container class accordingly.
		* When the CSS :has() selector is supported, this can be done with CSS only.
		*/
		__privateAdd$5(this, _checkSubmenuHasExpanded);
		__privateAdd$5(this, _handleFocusOut);
		__privateAdd$5(this, _handleKeyDown$1);
		__privateAdd$5(this, _getItem);
		__privateAdd$5(this, _getTabItem);
		__privateAdd$5(this, _setTabItem);
		__privateAdd$5(this, _selectItem);
		__privateAdd$5(this, _mediaController, null);
		__privateAdd$5(this, _previouslyFocused, null);
		__privateAdd$5(this, _invokerElement, null);
		__privateAdd$5(this, _previousItems, /* @__PURE__ */ new Set());
		__privateAdd$5(this, _mutationObserver, void 0);
		__privateAdd$5(this, _isPopover, false);
		__privateAdd$5(this, _cssRule, null);
		/**
		* Fires an event when a menu item is added or removed.
		* This is needed to update the description slot of an ancestor menu item.
		*/
		__privateAdd$5(this, _handleMenuItems, () => {
			const previousItems = __privateGet$5(this, _previousItems);
			const currentItems = new Set(this.items);
			for (const item of previousItems) if (!currentItems.has(item)) this.dispatchEvent(new CustomEvent("removemenuitem", { detail: item }));
			for (const item of currentItems) if (!previousItems.has(item)) this.dispatchEvent(new CustomEvent("addmenuitem", { detail: item }));
			__privateSet$4(this, _previousItems, currentItems);
		});
		__privateAdd$5(this, _handleBoundsResize, () => {
			__privateMethod$5(this, _positionMenu, positionMenu_fn).call(this);
			__privateMethod$5(this, _resizeMenu, resizeMenu_fn).call(this, false);
		});
		__privateAdd$5(this, _handleMenuResize, () => {
			__privateMethod$5(this, _positionMenu, positionMenu_fn).call(this);
		});
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
		this.container = this.shadowRoot.querySelector("#container");
		this.defaultSlot = this.shadowRoot.querySelector("slot:not([name])");
		this.shadowRoot.addEventListener("slotchange", this);
		__privateSet$4(this, _mutationObserver, new MutationObserver(__privateGet$5(this, _handleMenuItems)));
		__privateGet$5(this, _mutationObserver).observe(this.defaultSlot, { childList: true });
	}
	static get observedAttributes() {
		return [
			Attributes$3.DISABLED,
			Attributes$3.HIDDEN,
			Attributes$3.STYLE,
			Attributes$3.ANCHOR,
			MediaStateReceiverAttributes.MEDIA_CONTROLLER
		];
	}
	static formatMenuItemText(text, _data) {
		return text;
	}
	enable() {
		this.addEventListener("click", this);
		this.addEventListener("focusout", this);
		this.addEventListener("keydown", this);
		this.addEventListener("invoke", this);
		this.addEventListener("toggle", this);
	}
	disable() {
		this.removeEventListener("click", this);
		this.removeEventListener("focusout", this);
		this.removeEventListener("keyup", this);
		this.removeEventListener("invoke", this);
		this.removeEventListener("toggle", this);
	}
	handleEvent(event) {
		switch (event.type) {
			case "slotchange":
				__privateMethod$5(this, _handleSlotChange$1, handleSlotChange_fn$1).call(this, event);
				break;
			case "invoke":
				__privateMethod$5(this, _handleInvoke, handleInvoke_fn).call(this, event);
				break;
			case "click":
				__privateMethod$5(this, _handleClick, handleClick_fn).call(this, event);
				break;
			case "toggle":
				__privateMethod$5(this, _handleToggle, handleToggle_fn).call(this, event);
				break;
			case "focusout":
				__privateMethod$5(this, _handleFocusOut, handleFocusOut_fn).call(this, event);
				break;
			case "keydown":
				__privateMethod$5(this, _handleKeyDown$1, handleKeyDown_fn$1).call(this, event);
				break;
		}
	}
	connectedCallback() {
		var _a$2, _b;
		__privateSet$4(this, _cssRule, insertCSSRule(this.shadowRoot, ":host"));
		__privateMethod$5(this, _updateLayoutStyle, updateLayoutStyle_fn).call(this);
		if (!this.hasAttribute("disabled")) this.enable();
		if (!this.role) this.role = "menu";
		__privateSet$4(this, _mediaController, getAttributeMediaController(this));
		(_b = (_a$2 = __privateGet$5(this, _mediaController)) == null ? void 0 : _a$2.associateElement) == null || _b.call(_a$2, this);
		if (!this.hidden) {
			observeResize(getBoundsElement(this), __privateGet$5(this, _handleBoundsResize));
			observeResize(this, __privateGet$5(this, _handleMenuResize));
		}
		__privateMethod$5(this, _toggleHeader, toggleHeader_fn).call(this);
	}
	disconnectedCallback() {
		var _a$2, _b;
		unobserveResize(getBoundsElement(this), __privateGet$5(this, _handleBoundsResize));
		unobserveResize(this, __privateGet$5(this, _handleMenuResize));
		this.disable();
		(_b = (_a$2 = __privateGet$5(this, _mediaController)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
		__privateSet$4(this, _mediaController, null);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$2, _b, _c, _d;
		if (attrName === Attributes$3.HIDDEN && newValue !== oldValue) {
			if (!__privateGet$5(this, _isPopover)) __privateSet$4(this, _isPopover, true);
			if (this.hidden) __privateMethod$5(this, _handleClosed, handleClosed_fn).call(this);
			else __privateMethod$5(this, _handleOpen, handleOpen_fn).call(this);
			this.dispatchEvent(new ToggleEvent({
				oldState: this.hidden ? "open" : "closed",
				newState: this.hidden ? "closed" : "open",
				bubbles: true
			}));
		} else if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$2 = __privateGet$5(this, _mediaController)) == null ? void 0 : _a$2.unassociateElement) == null || _b.call(_a$2, this);
				__privateSet$4(this, _mediaController, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$4(this, _mediaController, getAttributeMediaController(this));
				(_d = (_c = __privateGet$5(this, _mediaController)) == null ? void 0 : _c.associateElement) == null || _d.call(_c, this);
			}
		} else if (attrName === Attributes$3.DISABLED && newValue !== oldValue) if (newValue == null) this.enable();
		else this.disable();
		else if (attrName === Attributes$3.STYLE && newValue !== oldValue) __privateMethod$5(this, _updateLayoutStyle, updateLayoutStyle_fn).call(this);
	}
	formatMenuItemText(text, data) {
		return this.constructor.formatMenuItemText(text, data);
	}
	get anchor() {
		return this.getAttribute("anchor");
	}
	set anchor(value) {
		this.setAttribute("anchor", `${value}`);
	}
	/**
	* Returns the anchor element when it is a floating menu.
	*/
	get anchorElement() {
		var _a$2;
		if (this.anchor) return (_a$2 = getDocumentOrShadowRoot(this)) == null ? void 0 : _a$2.querySelector(`#${this.anchor}`);
		return null;
	}
	/**
	* Returns the menu items.
	*/
	get items() {
		return this.defaultSlot.assignedElements({ flatten: true }).filter(isMenuItem);
	}
	get radioGroupItems() {
		return this.items.filter((item) => item.role === "menuitemradio");
	}
	get checkedItems() {
		return this.items.filter((item) => item.checked);
	}
	get value() {
		var _a$2, _b;
		return (_b = (_a$2 = this.checkedItems[0]) == null ? void 0 : _a$2.value) != null ? _b : "";
	}
	set value(newValue) {
		const item = this.items.find((item2) => item2.value === newValue);
		if (!item) return;
		__privateMethod$5(this, _selectItem, selectItem_fn).call(this, item);
	}
	focus() {
		__privateSet$4(this, _previouslyFocused, getActiveElement());
		if (this.items.length) {
			__privateMethod$5(this, _setTabItem, setTabItem_fn).call(this, this.items[0]);
			this.items[0].focus();
			return;
		}
		this.querySelector("[autofocus], [tabindex]:not([tabindex=\"-1\"]), [role=\"menu\"]")?.focus();
	}
	handleSelect(event) {
		var _a$2;
		const item = __privateMethod$5(this, _getItem, getItem_fn).call(this, event);
		if (!item) return;
		__privateMethod$5(this, _selectItem, selectItem_fn).call(this, item, item.type === "checkbox");
		if (__privateGet$5(this, _invokerElement) && !this.hidden) {
			(_a$2 = __privateGet$5(this, _previouslyFocused)) == null || _a$2.focus();
			this.hidden = true;
		}
	}
	get keysUsed() {
		return [
			"Enter",
			"Escape",
			"Tab",
			" ",
			"ArrowDown",
			"ArrowUp",
			"Home",
			"End"
		];
	}
	handleMove(event) {
		var _a$2, _b;
		const { key } = event;
		const items = this.items;
		const currentItem = (_b = (_a$2 = __privateMethod$5(this, _getItem, getItem_fn).call(this, event)) != null ? _a$2 : __privateMethod$5(this, _getTabItem, getTabItem_fn).call(this)) != null ? _b : items[0];
		const currentIndex = items.indexOf(currentItem);
		let index = Math.max(0, currentIndex);
		if (key === "ArrowDown") index++;
		else if (key === "ArrowUp") index--;
		else if (event.key === "Home") index = 0;
		else if (event.key === "End") index = items.length - 1;
		if (index < 0) index = items.length - 1;
		if (index > items.length - 1) index = 0;
		__privateMethod$5(this, _setTabItem, setTabItem_fn).call(this, items[index]);
		items[index].focus();
	}
};
_mediaController = /* @__PURE__ */ new WeakMap();
_previouslyFocused = /* @__PURE__ */ new WeakMap();
_invokerElement = /* @__PURE__ */ new WeakMap();
_previousItems = /* @__PURE__ */ new WeakMap();
_mutationObserver = /* @__PURE__ */ new WeakMap();
_isPopover = /* @__PURE__ */ new WeakMap();
_cssRule = /* @__PURE__ */ new WeakMap();
_handleSlotChange$1 = /* @__PURE__ */ new WeakSet();
handleSlotChange_fn$1 = function(event) {
	const slot = event.target;
	for (const node of slot.assignedNodes({ flatten: true })) if (node.nodeType === 3 && node.textContent.trim() === "") node.remove();
	if (["header", "title"].includes(slot.name)) __privateMethod$5(this, _toggleHeader, toggleHeader_fn).call(this);
	if (!slot.name) __privateGet$5(this, _handleMenuItems).call(this);
};
_toggleHeader = /* @__PURE__ */ new WeakSet();
toggleHeader_fn = function() {
	const header = this.shadowRoot.querySelector("slot[name=\"header\"]");
	header.hidden = this.shadowRoot.querySelector("slot[name=\"title\"]").assignedNodes().length === 0 && header.assignedNodes().length === 0;
};
_handleMenuItems = /* @__PURE__ */ new WeakMap();
_updateLayoutStyle = /* @__PURE__ */ new WeakSet();
updateLayoutStyle_fn = function() {
	var _a$2;
	const layoutRowStyle = this.shadowRoot.querySelector("#layout-row");
	const menuLayout = (_a$2 = getComputedStyle(this).getPropertyValue("--media-menu-layout")) == null ? void 0 : _a$2.trim();
	layoutRowStyle.setAttribute("media", menuLayout === "row" ? "" : "width:0");
};
_handleInvoke = /* @__PURE__ */ new WeakSet();
handleInvoke_fn = function(event) {
	__privateSet$4(this, _invokerElement, event.relatedTarget);
	if (!containsComposedNode(this, event.relatedTarget)) this.hidden = !this.hidden;
};
_handleOpen = /* @__PURE__ */ new WeakSet();
handleOpen_fn = function() {
	var _a$2;
	(_a$2 = __privateGet$5(this, _invokerElement)) == null || _a$2.setAttribute("aria-expanded", "true");
	this.addEventListener("transitionend", () => this.focus(), { once: true });
	observeResize(getBoundsElement(this), __privateGet$5(this, _handleBoundsResize));
	observeResize(this, __privateGet$5(this, _handleMenuResize));
};
_handleClosed = /* @__PURE__ */ new WeakSet();
handleClosed_fn = function() {
	var _a$2;
	(_a$2 = __privateGet$5(this, _invokerElement)) == null || _a$2.setAttribute("aria-expanded", "false");
	unobserveResize(getBoundsElement(this), __privateGet$5(this, _handleBoundsResize));
	unobserveResize(this, __privateGet$5(this, _handleMenuResize));
};
_handleBoundsResize = /* @__PURE__ */ new WeakMap();
_handleMenuResize = /* @__PURE__ */ new WeakMap();
_positionMenu = /* @__PURE__ */ new WeakSet();
positionMenu_fn = function(menuWidth) {
	if (this.hasAttribute("mediacontroller") && !this.anchor) return;
	if (this.hidden || !this.anchorElement) return;
	const { x: x$5, y: y$4 } = computePosition({
		anchor: this.anchorElement,
		floating: this,
		placement: "top-start"
	});
	menuWidth ??= this.offsetWidth;
	const boundsRect = getBoundsElement(this).getBoundingClientRect();
	const right = boundsRect.width - x$5 - menuWidth;
	const bottom = boundsRect.height - y$4 - this.offsetHeight;
	const { style } = __privateGet$5(this, _cssRule);
	style.setProperty("position", "absolute");
	style.setProperty("right", `${Math.max(0, right)}px`);
	style.setProperty("--_menu-bottom", `${bottom}px`);
	const computedStyle = getComputedStyle(this);
	const realBottom = style.getPropertyValue("--_menu-bottom") === computedStyle.bottom ? bottom : parseFloat(computedStyle.bottom);
	const maxHeight = boundsRect.height - realBottom - parseFloat(computedStyle.marginBottom);
	this.style.setProperty("--_menu-max-height", `${maxHeight}px`);
};
_resizeMenu = /* @__PURE__ */ new WeakSet();
resizeMenu_fn = function(animate) {
	const expandedMenuItem = this.querySelector("[role=\"menuitem\"][aria-haspopup][aria-expanded=\"true\"]");
	const expandedSubmenu = expandedMenuItem == null ? void 0 : expandedMenuItem.querySelector("[role=\"menu\"]");
	const { style } = __privateGet$5(this, _cssRule);
	if (!animate) style.setProperty("--media-menu-transition-in", "none");
	if (expandedSubmenu) {
		const height = expandedSubmenu.offsetHeight;
		const width = Math.max(expandedSubmenu.offsetWidth, expandedMenuItem.offsetWidth);
		this.style.setProperty("min-width", `${width}px`);
		this.style.setProperty("min-height", `${height}px`);
		__privateMethod$5(this, _positionMenu, positionMenu_fn).call(this, width);
	} else {
		this.style.removeProperty("min-width");
		this.style.removeProperty("min-height");
		__privateMethod$5(this, _positionMenu, positionMenu_fn).call(this);
	}
	style.removeProperty("--media-menu-transition-in");
};
_handleClick = /* @__PURE__ */ new WeakSet();
handleClick_fn = function(event) {
	var _a$2;
	event.stopPropagation();
	if (event.composedPath().includes(__privateGet$5(this, _backButtonElement, backButtonElement_get))) {
		(_a$2 = __privateGet$5(this, _previouslyFocused)) == null || _a$2.focus();
		this.hidden = true;
		return;
	}
	const item = __privateMethod$5(this, _getItem, getItem_fn).call(this, event);
	if (!item || item.hasAttribute("disabled")) return;
	__privateMethod$5(this, _setTabItem, setTabItem_fn).call(this, item);
	this.handleSelect(event);
};
_backButtonElement = /* @__PURE__ */ new WeakSet();
backButtonElement_get = function() {
	var _a$2;
	return (_a$2 = this.shadowRoot.querySelector("slot[name=\"header\"]").assignedElements({ flatten: true })) == null ? void 0 : _a$2.find((el) => el.matches("button[part~=\"back\"]"));
};
_handleToggle = /* @__PURE__ */ new WeakSet();
handleToggle_fn = function(event) {
	if (event.target === this) return;
	__privateMethod$5(this, _checkSubmenuHasExpanded, checkSubmenuHasExpanded_fn).call(this);
	const menuItemsWithSubmenu = Array.from(this.querySelectorAll("[role=\"menuitem\"][aria-haspopup]"));
	for (const item of menuItemsWithSubmenu) {
		if (item.invokeTargetElement == event.target) continue;
		if (event.newState == "open" && item.getAttribute("aria-expanded") == "true" && !item.invokeTargetElement.hidden) item.invokeTargetElement.dispatchEvent(new InvokeEvent({ relatedTarget: item }));
	}
	for (const item of menuItemsWithSubmenu) item.setAttribute("aria-expanded", `${!item.submenuElement.hidden}`);
	__privateMethod$5(this, _resizeMenu, resizeMenu_fn).call(this, true);
};
_checkSubmenuHasExpanded = /* @__PURE__ */ new WeakSet();
checkSubmenuHasExpanded_fn = function() {
	const expandedMenuItem = this.querySelector("[role=\"menuitem\"] > [role=\"menu\"]:not([hidden])");
	this.container.classList.toggle("has-expanded", !!expandedMenuItem);
};
_handleFocusOut = /* @__PURE__ */ new WeakSet();
handleFocusOut_fn = function(event) {
	var _a$2;
	if (!containsComposedNode(this, event.relatedTarget)) {
		if (__privateGet$5(this, _isPopover)) (_a$2 = __privateGet$5(this, _previouslyFocused)) == null || _a$2.focus();
		if (__privateGet$5(this, _invokerElement) && __privateGet$5(this, _invokerElement) !== event.relatedTarget && !this.hidden) this.hidden = true;
	}
};
_handleKeyDown$1 = /* @__PURE__ */ new WeakSet();
handleKeyDown_fn$1 = function(event) {
	var _a$2, _b, _c, _d, _e$3;
	const { key, ctrlKey, altKey, metaKey } = event;
	if (ctrlKey || altKey || metaKey) return;
	if (!this.keysUsed.includes(key)) return;
	event.preventDefault();
	event.stopPropagation();
	if (key === "Tab") {
		if (__privateGet$5(this, _isPopover)) {
			this.hidden = true;
			return;
		}
		if (event.shiftKey) (_b = (_a$2 = this.previousElementSibling) == null ? void 0 : _a$2.focus) == null || _b.call(_a$2);
		else (_d = (_c = this.nextElementSibling) == null ? void 0 : _c.focus) == null || _d.call(_c);
		this.blur();
	} else if (key === "Escape") {
		(_e$3 = __privateGet$5(this, _previouslyFocused)) == null || _e$3.focus();
		if (__privateGet$5(this, _isPopover)) this.hidden = true;
	} else if (key === "Enter" || key === " ") this.handleSelect(event);
	else this.handleMove(event);
};
_getItem = /* @__PURE__ */ new WeakSet();
getItem_fn = function(event) {
	return event.composedPath().find((el) => {
		return ["menuitemradio", "menuitemcheckbox"].includes(el.role);
	});
};
_getTabItem = /* @__PURE__ */ new WeakSet();
getTabItem_fn = function() {
	return this.items.find((item) => item.tabIndex === 0);
};
_setTabItem = /* @__PURE__ */ new WeakSet();
setTabItem_fn = function(tabItem) {
	for (const item of this.items) item.tabIndex = item === tabItem ? 0 : -1;
};
_selectItem = /* @__PURE__ */ new WeakSet();
selectItem_fn = function(item, toggle) {
	const oldCheckedItems = [...this.checkedItems];
	if (item.type === "radio") this.radioGroupItems.forEach((el) => el.checked = false);
	if (toggle) item.checked = !item.checked;
	else item.checked = true;
	if (this.checkedItems.some((opt, i$1) => opt != oldCheckedItems[i$1])) this.dispatchEvent(new Event("change", {
		bubbles: true,
		composed: true
	}));
};
MediaChromeMenu.shadowRootOptions = { mode: "open" };
MediaChromeMenu.getTemplateHTML = getTemplateHTML$4;
function isMenuItem(element) {
	return [
		"menuitem",
		"menuitemradio",
		"menuitemcheckbox"
	].includes(element == null ? void 0 : element.role);
}
function getBoundsElement(host) {
	var _a$2;
	return (_a$2 = host.getAttribute("bounds") ? closestComposedNode(host, `#${host.getAttribute("bounds")}`) : getMediaController(host) || host.parentElement) != null ? _a$2 : host;
}
if (!GlobalThis.customElements.get("media-chrome-menu")) GlobalThis.customElements.define("media-chrome-menu", MediaChromeMenu);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-chrome-menu-item.js
var __accessCheck$4 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$4 = (obj, member, getter) => {
	__accessCheck$4(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$4 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$3 = (obj, member, value, setter) => {
	__accessCheck$4(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$4 = (obj, member, method) => {
	__accessCheck$4(obj, member, "access private method");
	return method;
};
var _dirty, _ownerElement, _handleSlotChange, handleSlotChange_fn, _submenuConnected, submenuConnected_fn, _submenuDisconnected, submenuDisconnected_fn, _handleMenuItem, _handleKeyUp, handleKeyUp_fn, _handleKeyDown, handleKeyDown_fn, _reset, reset_fn;
function getTemplateHTML$3(_attrs) {
	return `
    <style>
      :host {
        transition: var(--media-menu-item-transition,
          background .15s linear,
          opacity .2s ease-in-out
        );
        outline: var(--media-menu-item-outline, 0);
        outline-offset: var(--media-menu-item-outline-offset, -1px);
        cursor: var(--media-cursor, pointer);
        display: flex;
        align-items: center;
        align-self: stretch;
        justify-self: stretch;
        white-space: nowrap;
        white-space-collapse: collapse;
        text-wrap: nowrap;
        padding: .4em .8em .4em 1em;
      }

      :host(:focus-visible) {
        box-shadow: var(--media-menu-item-focus-shadow, inset 0 0 0 2px rgb(27 127 204 / .9));
        outline: var(--media-menu-item-hover-outline, 0);
        outline-offset: var(--media-menu-item-hover-outline-offset,  var(--media-menu-item-outline-offset, -1px));
      }

      :host(:hover) {
        cursor: var(--media-cursor, pointer);
        background: var(--media-menu-item-hover-background, rgb(92 92 102 / .5));
        outline: var(--media-menu-item-hover-outline);
        outline-offset: var(--media-menu-item-hover-outline-offset,  var(--media-menu-item-outline-offset, -1px));
      }

      :host([aria-checked="true"]) {
        background: var(--media-menu-item-checked-background);
      }

      :host([hidden]) {
        display: none;
      }

      :host([disabled]) {
        pointer-events: none;
        color: rgba(255, 255, 255, .3);
      }

      slot:not([name]) {
        width: 100%;
      }

      slot:not([name="submenu"]) {
        display: inline-flex;
        align-items: center;
        transition: inherit;
        opacity: var(--media-menu-item-opacity, 1);
      }

      slot[name="description"] {
        justify-content: end;
      }

      slot[name="description"] > span {
        display: inline-block;
        margin-inline: 1em .2em;
        max-width: var(--media-menu-item-description-max-width, 100px);
        text-overflow: ellipsis;
        overflow: hidden;
        font-size: .8em;
        font-weight: 400;
        text-align: right;
        position: relative;
        top: .04em;
      }

      slot[name="checked-indicator"] {
        display: none;
      }

      :host(:is([role="menuitemradio"],[role="menuitemcheckbox"])) slot[name="checked-indicator"] {
        display: var(--media-menu-item-checked-indicator-display, inline-block);
      }

      
      svg, img, ::slotted(svg), ::slotted(img) {
        height: var(--media-menu-item-icon-height, var(--media-control-height, 24px));
        fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
        display: block;
      }

      
      [part~="indicator"],
      ::slotted([part~="indicator"]) {
        fill: var(--media-menu-item-indicator-fill,
          var(--media-icon-color, var(--media-primary-color, rgb(238 238 238))));
        height: var(--media-menu-item-indicator-height, 1.25em);
        margin-right: .5ch;
      }

      [part~="checked-indicator"] {
        visibility: hidden;
      }

      :host([aria-checked="true"]) [part~="checked-indicator"] {
        visibility: visible;
      }
    </style>
    <slot name="checked-indicator">
      <svg aria-hidden="true" viewBox="0 1 24 24" part="checked-indicator indicator">
        <path d="m10 15.17 9.193-9.191 1.414 1.414-10.606 10.606-6.364-6.364 1.414-1.414 4.95 4.95Z"/>
      </svg>
    </slot>
    <slot name="prefix"></slot>
    <slot></slot>
    <slot name="description"></slot>
    <slot name="suffix">
      ${this.getSuffixSlotInnerHTML(_attrs)}
    </slot>
    <slot name="submenu"></slot>
  `;
}
function getSuffixSlotInnerHTML$1(_attrs) {
	return "";
}
var Attributes$2 = {
	TYPE: "type",
	VALUE: "value",
	CHECKED: "checked",
	DISABLED: "disabled"
};
var MediaChromeMenuItem = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$4(this, _handleSlotChange);
		__privateAdd$4(this, _submenuConnected);
		__privateAdd$4(this, _submenuDisconnected);
		__privateAdd$4(this, _handleKeyUp);
		__privateAdd$4(this, _handleKeyDown);
		__privateAdd$4(this, _reset);
		__privateAdd$4(this, _dirty, false);
		__privateAdd$4(this, _ownerElement, void 0);
		/**
		* If there is a slotted submenu the fallback content of the description slot
		* is populated with the text of the first checked item.
		*/
		__privateAdd$4(this, _handleMenuItem, () => {
			var _a$2, _b;
			if (this.submenuElement.items) this.setAttribute("submenusize", `${this.submenuElement.items.length}`);
			const descriptionSlot = this.shadowRoot.querySelector("slot[name=\"description\"]");
			const checkedItem = (_a$2 = this.submenuElement.checkedItems) == null ? void 0 : _a$2[0];
			const description = (_b = checkedItem == null ? void 0 : checkedItem.dataset.description) != null ? _b : checkedItem == null ? void 0 : checkedItem.text;
			const span = Document$1.createElement("span");
			span.textContent = description != null ? description : "";
			descriptionSlot.replaceChildren(span);
		});
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
		this.shadowRoot.addEventListener("slotchange", this);
	}
	static get observedAttributes() {
		return [
			Attributes$2.TYPE,
			Attributes$2.DISABLED,
			Attributes$2.CHECKED,
			Attributes$2.VALUE
		];
	}
	enable() {
		if (!this.hasAttribute("tabindex")) this.setAttribute("tabindex", "-1");
		if (isCheckable(this) && !this.hasAttribute("aria-checked")) this.setAttribute("aria-checked", "false");
		this.addEventListener("click", this);
		this.addEventListener("keydown", this);
	}
	disable() {
		this.removeAttribute("tabindex");
		this.removeEventListener("click", this);
		this.removeEventListener("keydown", this);
		this.removeEventListener("keyup", this);
	}
	handleEvent(event) {
		switch (event.type) {
			case "slotchange":
				__privateMethod$4(this, _handleSlotChange, handleSlotChange_fn).call(this, event);
				break;
			case "click":
				this.handleClick(event);
				break;
			case "keydown":
				__privateMethod$4(this, _handleKeyDown, handleKeyDown_fn).call(this, event);
				break;
			case "keyup":
				__privateMethod$4(this, _handleKeyUp, handleKeyUp_fn).call(this, event);
				break;
		}
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		if (attrName === Attributes$2.CHECKED && isCheckable(this) && !__privateGet$4(this, _dirty)) this.setAttribute("aria-checked", newValue != null ? "true" : "false");
		else if (attrName === Attributes$2.TYPE && newValue !== oldValue) this.role = "menuitem" + newValue;
		else if (attrName === Attributes$2.DISABLED && newValue !== oldValue) if (newValue == null) this.enable();
		else this.disable();
	}
	connectedCallback() {
		if (!this.hasAttribute(Attributes$2.DISABLED)) this.enable();
		this.role = "menuitem" + this.type;
		__privateSet$3(this, _ownerElement, closestMenuItemsContainer(this, this.parentNode));
		__privateMethod$4(this, _reset, reset_fn).call(this);
		if (this.submenuElement) __privateMethod$4(this, _submenuConnected, submenuConnected_fn).call(this);
	}
	disconnectedCallback() {
		this.disable();
		__privateMethod$4(this, _reset, reset_fn).call(this);
		__privateSet$3(this, _ownerElement, null);
	}
	get invokeTarget() {
		return this.getAttribute("invoketarget");
	}
	set invokeTarget(value) {
		this.setAttribute("invoketarget", `${value}`);
	}
	/**
	* Returns the element with the id specified by the `invoketarget` attribute
	* or the slotted submenu element.
	*/
	get invokeTargetElement() {
		var _a$2;
		if (this.invokeTarget) return (_a$2 = getDocumentOrShadowRoot(this)) == null ? void 0 : _a$2.querySelector(`#${this.invokeTarget}`);
		return this.submenuElement;
	}
	/**
	* Returns the slotted submenu element.
	*/
	get submenuElement() {
		return this.shadowRoot.querySelector("slot[name=\"submenu\"]").assignedElements({ flatten: true })[0];
	}
	get type() {
		var _a$2;
		return (_a$2 = this.getAttribute(Attributes$2.TYPE)) != null ? _a$2 : "";
	}
	set type(val) {
		this.setAttribute(Attributes$2.TYPE, `${val}`);
	}
	get value() {
		var _a$2;
		return (_a$2 = this.getAttribute(Attributes$2.VALUE)) != null ? _a$2 : this.text;
	}
	set value(val) {
		this.setAttribute(Attributes$2.VALUE, val);
	}
	get text() {
		var _a$2;
		return ((_a$2 = this.textContent) != null ? _a$2 : "").trim();
	}
	get checked() {
		if (!isCheckable(this)) return void 0;
		return this.getAttribute("aria-checked") === "true";
	}
	set checked(value) {
		if (!isCheckable(this)) return;
		__privateSet$3(this, _dirty, true);
		this.setAttribute("aria-checked", value ? "true" : "false");
		if (value) this.part.add("checked");
		else this.part.remove("checked");
	}
	handleClick(event) {
		if (isCheckable(this)) return;
		if (this.invokeTargetElement && containsComposedNode(this, event.target)) this.invokeTargetElement.dispatchEvent(new InvokeEvent({ relatedTarget: this }));
	}
	get keysUsed() {
		return ["Enter", " "];
	}
};
_dirty = /* @__PURE__ */ new WeakMap();
_ownerElement = /* @__PURE__ */ new WeakMap();
_handleSlotChange = /* @__PURE__ */ new WeakSet();
handleSlotChange_fn = function(event) {
	const slot = event.target;
	if (!(slot == null ? void 0 : slot.name)) {
		for (const node of slot.assignedNodes({ flatten: true })) if (node instanceof Text && node.textContent.trim() === "") node.remove();
	}
	if (slot.name === "submenu") if (this.submenuElement) __privateMethod$4(this, _submenuConnected, submenuConnected_fn).call(this);
	else __privateMethod$4(this, _submenuDisconnected, submenuDisconnected_fn).call(this);
};
_submenuConnected = /* @__PURE__ */ new WeakSet();
submenuConnected_fn = async function() {
	this.setAttribute("aria-haspopup", "menu");
	this.setAttribute("aria-expanded", `${!this.submenuElement.hidden}`);
	this.submenuElement.addEventListener("change", __privateGet$4(this, _handleMenuItem));
	this.submenuElement.addEventListener("addmenuitem", __privateGet$4(this, _handleMenuItem));
	this.submenuElement.addEventListener("removemenuitem", __privateGet$4(this, _handleMenuItem));
	__privateGet$4(this, _handleMenuItem).call(this);
};
_submenuDisconnected = /* @__PURE__ */ new WeakSet();
submenuDisconnected_fn = function() {
	this.removeAttribute("aria-haspopup");
	this.removeAttribute("aria-expanded");
	this.submenuElement.removeEventListener("change", __privateGet$4(this, _handleMenuItem));
	this.submenuElement.removeEventListener("addmenuitem", __privateGet$4(this, _handleMenuItem));
	this.submenuElement.removeEventListener("removemenuitem", __privateGet$4(this, _handleMenuItem));
	__privateGet$4(this, _handleMenuItem).call(this);
};
_handleMenuItem = /* @__PURE__ */ new WeakMap();
_handleKeyUp = /* @__PURE__ */ new WeakSet();
handleKeyUp_fn = function(event) {
	const { key } = event;
	if (!this.keysUsed.includes(key)) {
		this.removeEventListener("keyup", __privateMethod$4(this, _handleKeyUp, handleKeyUp_fn));
		return;
	}
	this.handleClick(event);
};
_handleKeyDown = /* @__PURE__ */ new WeakSet();
handleKeyDown_fn = function(event) {
	const { metaKey, altKey, key } = event;
	if (metaKey || altKey || !this.keysUsed.includes(key)) {
		this.removeEventListener("keyup", __privateMethod$4(this, _handleKeyUp, handleKeyUp_fn));
		return;
	}
	this.addEventListener("keyup", __privateMethod$4(this, _handleKeyUp, handleKeyUp_fn), { once: true });
};
_reset = /* @__PURE__ */ new WeakSet();
reset_fn = function() {
	var _a$2;
	const items = (_a$2 = __privateGet$4(this, _ownerElement)) == null ? void 0 : _a$2.radioGroupItems;
	if (!items) return;
	let checkedItem = items.filter((item) => item.getAttribute("aria-checked") === "true").pop();
	if (!checkedItem) checkedItem = items[0];
	for (const item of items) item.setAttribute("aria-checked", "false");
	checkedItem?.setAttribute("aria-checked", "true");
};
MediaChromeMenuItem.shadowRootOptions = { mode: "open" };
MediaChromeMenuItem.getTemplateHTML = getTemplateHTML$3;
MediaChromeMenuItem.getSuffixSlotInnerHTML = getSuffixSlotInnerHTML$1;
function isCheckable(item) {
	return item.type === "radio" || item.type === "checkbox";
}
function closestMenuItemsContainer(childNode, parentNode) {
	if (!childNode) return null;
	const { host } = childNode.getRootNode();
	if (!parentNode && host) return closestMenuItemsContainer(childNode, host);
	if (parentNode == null ? void 0 : parentNode.items) return parentNode;
	return closestMenuItemsContainer(parentNode, parentNode == null ? void 0 : parentNode.parentNode);
}
if (!GlobalThis.customElements.get("media-chrome-menu-item")) GlobalThis.customElements.define("media-chrome-menu-item", MediaChromeMenuItem);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-settings-menu.js
function getTemplateHTML$2(_attrs) {
	return `
    ${MediaChromeMenu.getTemplateHTML(_attrs)}
    <style>
      :host {
        --_menu-bg: rgb(20 20 30 / .8);
        background: var(--media-settings-menu-background,
            var(--media-menu-background,
              var(--media-control-background,
                var(--media-secondary-color, var(--_menu-bg)))));
        min-width: var(--media-settings-menu-min-width, 170px);
        border-radius: 2px 2px 0 0;
        overflow: hidden;
      }

      @-moz-document url-prefix() {
        :host{
          --_menu-bg: rgb(20 20 30);
        }
      }

      :host([role="menu"]) {
        
        justify-content: end;
      }

      slot:not([name]) {
        justify-content: var(--media-settings-menu-justify-content);
        flex-direction: var(--media-settings-menu-flex-direction, column);
        overflow: visible;
      }

      #container.has-expanded {
        --media-settings-menu-item-opacity: 0;
      }
    </style>
  `;
}
var MediaSettingsMenu = class extends MediaChromeMenu {
	/**
	* Returns the anchor element when it is a floating menu.
	*/
	get anchorElement() {
		if (this.anchor !== "auto") return super.anchorElement;
		return getMediaController(this).querySelector("media-settings-menu-button");
	}
};
MediaSettingsMenu.getTemplateHTML = getTemplateHTML$2;
if (!GlobalThis.customElements.get("media-settings-menu")) GlobalThis.customElements.define("media-settings-menu", MediaSettingsMenu);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-settings-menu-item.js
function getTemplateHTML$1(_attrs) {
	return `
    ${MediaChromeMenuItem.getTemplateHTML.call(this, _attrs)}
    <style>
      slot:not([name="submenu"]) {
        opacity: var(--media-settings-menu-item-opacity, var(--media-menu-item-opacity));
      }

      :host([aria-expanded="true"]:hover) {
        background: transparent;
      }
    </style>
  `;
}
function getSuffixSlotInnerHTML(_attrs) {
	return `
    <svg aria-hidden="true" viewBox="0 0 20 24">
      <path d="m8.12 17.585-.742-.669 4.2-4.665-4.2-4.666.743-.669 4.803 5.335-4.803 5.334Z"/>
    </svg>
  `;
}
var MediaSettingsMenuItem = class extends MediaChromeMenuItem {};
MediaSettingsMenuItem.shadowRootOptions = { mode: "open" };
MediaSettingsMenuItem.getTemplateHTML = getTemplateHTML$1;
MediaSettingsMenuItem.getSuffixSlotInnerHTML = getSuffixSlotInnerHTML;
if (!GlobalThis.customElements.get("media-settings-menu-item")) GlobalThis.customElements.define("media-settings-menu-item", MediaSettingsMenuItem);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-chrome-menu-button.js
var MediaChromeMenuButton = class extends MediaChromeButton {
	connectedCallback() {
		super.connectedCallback();
		if (this.invokeTargetElement) this.setAttribute("aria-haspopup", "menu");
	}
	get invokeTarget() {
		return this.getAttribute("invoketarget");
	}
	set invokeTarget(value) {
		this.setAttribute("invoketarget", `${value}`);
	}
	/**
	* Returns the element with the id specified by the `invoketarget` attribute.
	* @return {HTMLElement | null}
	*/
	get invokeTargetElement() {
		var _a$2;
		if (this.invokeTarget) return (_a$2 = getDocumentOrShadowRoot(this)) == null ? void 0 : _a$2.querySelector(`#${this.invokeTarget}`);
		return null;
	}
	handleClick() {
		var _a$2;
		(_a$2 = this.invokeTargetElement) == null || _a$2.dispatchEvent(new InvokeEvent({ relatedTarget: this }));
	}
};
if (!GlobalThis.customElements.get("media-chrome-menu-button")) GlobalThis.customElements.define("media-chrome-menu-button", MediaChromeMenuButton);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-settings-menu-button.js
function getSlotTemplateHTML$4() {
	return `
    <style>
      :host([aria-expanded="true"]) slot[name=tooltip] {
        display: none;
      }
    </style>
    <slot name="icon">
      <svg aria-hidden="true" viewBox="0 0 24 24">
        <path d="M4.5 14.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Zm7.5 0a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Zm7.5 0a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"/>
      </svg>
    </slot>
  `;
}
function getTooltipContentHTML$4() {
	return t("Settings");
}
var MediaSettingsMenuButton = class extends MediaChromeMenuButton {
	static get observedAttributes() {
		return [...super.observedAttributes, "target"];
	}
	connectedCallback() {
		super.connectedCallback();
		this.setAttribute("aria-label", t("settings"));
	}
	/**
	* Returns the element with the id specified by the `invoketarget` attribute.
	* @return {HTMLElement | null}
	*/
	get invokeTargetElement() {
		if (this.invokeTarget != void 0) return super.invokeTargetElement;
		return getMediaController(this).querySelector("media-settings-menu");
	}
};
MediaSettingsMenuButton.getSlotTemplateHTML = getSlotTemplateHTML$4;
MediaSettingsMenuButton.getTooltipContentHTML = getTooltipContentHTML$4;
if (!GlobalThis.customElements.get("media-settings-menu-button")) GlobalThis.customElements.define("media-settings-menu-button", MediaSettingsMenuButton);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-audio-track-menu.js
var __accessCheck$3 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$3 = (obj, member, getter) => {
	__accessCheck$3(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$3 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$2 = (obj, member, value, setter) => {
	__accessCheck$3(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$3 = (obj, member, method) => {
	__accessCheck$3(obj, member, "access private method");
	return method;
};
var _audioTrackList, _prevState$2, _render$3, render_fn$3, _onChange$3, onChange_fn$3;
var MediaAudioTrackMenu = class extends MediaChromeMenu {
	constructor() {
		super(...arguments);
		__privateAdd$3(this, _render$3);
		__privateAdd$3(this, _onChange$3);
		__privateAdd$3(this, _audioTrackList, []);
		__privateAdd$3(this, _prevState$2, void 0);
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST,
			MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED,
			MediaUIAttributes.MEDIA_AUDIO_TRACK_UNAVAILABLE
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED && oldValue !== newValue) this.value = newValue;
		else if (attrName === MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST && oldValue !== newValue) {
			__privateSet$2(this, _audioTrackList, parseAudioTrackList(newValue != null ? newValue : ""));
			__privateMethod$3(this, _render$3, render_fn$3).call(this);
		}
	}
	connectedCallback() {
		super.connectedCallback();
		this.addEventListener("change", __privateMethod$3(this, _onChange$3, onChange_fn$3));
	}
	disconnectedCallback() {
		super.disconnectedCallback();
		this.removeEventListener("change", __privateMethod$3(this, _onChange$3, onChange_fn$3));
	}
	/**
	* Returns the anchor element when it is a floating menu.
	*/
	get anchorElement() {
		var _a$2;
		if (this.anchor !== "auto") return super.anchorElement;
		return (_a$2 = getMediaController(this)) == null ? void 0 : _a$2.querySelector("media-audio-track-menu-button");
	}
	get mediaAudioTrackList() {
		return __privateGet$3(this, _audioTrackList);
	}
	set mediaAudioTrackList(list) {
		__privateSet$2(this, _audioTrackList, list);
		__privateMethod$3(this, _render$3, render_fn$3).call(this);
	}
	/**
	* Get enabled audio track id.
	*/
	get mediaAudioTrackEnabled() {
		var _a$2;
		return (_a$2 = getStringAttr(this, MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED)) != null ? _a$2 : "";
	}
	set mediaAudioTrackEnabled(id) {
		setStringAttr(this, MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED, id);
	}
};
_audioTrackList = /* @__PURE__ */ new WeakMap();
_prevState$2 = /* @__PURE__ */ new WeakMap();
_render$3 = /* @__PURE__ */ new WeakSet();
render_fn$3 = function() {
	if (__privateGet$3(this, _prevState$2) === JSON.stringify(this.mediaAudioTrackList)) return;
	__privateSet$2(this, _prevState$2, JSON.stringify(this.mediaAudioTrackList));
	const audioTrackList = this.mediaAudioTrackList;
	this.defaultSlot.textContent = "";
	for (const audioTrack of audioTrackList) {
		const text = this.formatMenuItemText(audioTrack.label, audioTrack);
		const item = createMenuItem({
			type: "radio",
			text,
			value: `${audioTrack.id}`,
			checked: audioTrack.enabled
		});
		item.prepend(createIndicator(this, "checked-indicator"));
		this.defaultSlot.append(item);
	}
};
_onChange$3 = /* @__PURE__ */ new WeakSet();
onChange_fn$3 = function() {
	if (this.value == null) return;
	const event = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_AUDIO_TRACK_REQUEST, {
		composed: true,
		bubbles: true,
		detail: this.value
	});
	this.dispatchEvent(event);
};
if (!GlobalThis.customElements.get("media-audio-track-menu")) GlobalThis.customElements.define("media-audio-track-menu", MediaAudioTrackMenu);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-audio-track-menu-button.js
var audioTrackIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M11 17H9.5V7H11v10Zm-3-3H6.5v-4H8v4Zm6-5h-1.5v6H14V9Zm3 7h-1.5V8H17v8Z"/>
  <path d="M22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Zm-2 0a8 8 0 1 0-16 0 8 8 0 0 0 16 0Z"/>
</svg>`;
function getSlotTemplateHTML$3() {
	return `
    <style>
      :host([aria-expanded="true"]) slot[name=tooltip] {
        display: none;
      }
    </style>
    <slot name="icon">${audioTrackIcon}</slot>
  `;
}
function getTooltipContentHTML$3() {
	return t("Audio");
}
var updateAriaLabel$1 = (el) => {
	const label = t("Audio");
	el.setAttribute("aria-label", label);
};
var MediaAudioTrackMenuButton = class extends MediaChromeMenuButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED,
			MediaUIAttributes.MEDIA_AUDIO_TRACK_UNAVAILABLE
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$1(this);
	}
	attributeChangedCallback(attrName, _oldValue, newValue) {
		super.attributeChangedCallback(attrName, _oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_LANG) updateAriaLabel$1(this);
	}
	/**
	* Returns the element with the id specified by the `invoketarget` attribute.
	* @return {HTMLElement | null}
	*/
	get invokeTargetElement() {
		var _a$2;
		if (this.invokeTarget != void 0) return super.invokeTargetElement;
		return (_a$2 = getMediaController(this)) == null ? void 0 : _a$2.querySelector("media-audio-track-menu");
	}
	/**
	* Get enabled audio track id.
	* @return {string}
	*/
	get mediaAudioTrackEnabled() {
		var _a$2;
		return (_a$2 = getStringAttr(this, MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED)) != null ? _a$2 : "";
	}
	set mediaAudioTrackEnabled(id) {
		setStringAttr(this, MediaUIAttributes.MEDIA_AUDIO_TRACK_ENABLED, id);
	}
};
MediaAudioTrackMenuButton.getSlotTemplateHTML = getSlotTemplateHTML$3;
MediaAudioTrackMenuButton.getTooltipContentHTML = getTooltipContentHTML$3;
if (!GlobalThis.customElements.get("media-audio-track-menu-button")) GlobalThis.customElements.define("media-audio-track-menu-button", MediaAudioTrackMenuButton);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-captions-menu.js
var __accessCheck$2 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$2 = (obj, member, getter) => {
	__accessCheck$2(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$2 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$1 = (obj, member, value, setter) => {
	__accessCheck$2(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$2 = (obj, member, method) => {
	__accessCheck$2(obj, member, "access private method");
	return method;
};
var _prevState$1, _render$2, render_fn$2, _onChange$2, onChange_fn$2;
var ccIcon = `
  <svg aria-hidden="true" viewBox="0 0 26 24" part="captions-indicator indicator">
    <path d="M22.83 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.39 9.45a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.92 3.92 0 0 1 .92-2.77 3.18 3.18 0 0 1 2.43-1 2.94 2.94 0 0 1 2.13.78c.364.359.62.813.74 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.17 1.61 1.61 0 0 0-1.29.58 2.79 2.79 0 0 0-.5 1.89 3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.48 1.48 0 0 0 1-.37 2.1 2.1 0 0 0 .59-1.14l1.4.44a3.23 3.23 0 0 1-1.07 1.69Zm7.22 0a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.88 3.88 0 0 1 .93-2.77 3.14 3.14 0 0 1 2.42-1 3 3 0 0 1 2.16.82 2.8 2.8 0 0 1 .73 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.21 1.61 1.61 0 0 0-1.29.58A2.79 2.79 0 0 0 15 12a3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.44 1.44 0 0 0 1-.37 2.1 2.1 0 0 0 .6-1.15l1.4.44a3.17 3.17 0 0 1-1.1 1.7Z"/>
  </svg>`;
function getTemplateHTML(_attrs) {
	return `
    ${MediaChromeMenu.getTemplateHTML(_attrs)}
    <slot name="captions-indicator" hidden>${ccIcon}</slot>
  `;
}
var MediaCaptionsMenu = class extends MediaChromeMenu {
	constructor() {
		super(...arguments);
		__privateAdd$2(this, _render$2);
		__privateAdd$2(this, _onChange$2);
		__privateAdd$2(this, _prevState$1, void 0);
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_SUBTITLES_LIST,
			MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_LIST && oldValue !== newValue) __privateMethod$2(this, _render$2, render_fn$2).call(this);
		else if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_SHOWING && oldValue !== newValue) this.value = newValue;
	}
	connectedCallback() {
		super.connectedCallback();
		this.addEventListener("change", __privateMethod$2(this, _onChange$2, onChange_fn$2));
	}
	disconnectedCallback() {
		super.disconnectedCallback();
		this.removeEventListener("change", __privateMethod$2(this, _onChange$2, onChange_fn$2));
	}
	/**
	* Returns the anchor element when it is a floating menu.
	*/
	get anchorElement() {
		if (this.anchor !== "auto") return super.anchorElement;
		return getMediaController(this).querySelector("media-captions-menu-button");
	}
	/**
	* @type {Array<object>} An array of TextTrack-like objects.
	* Objects must have the properties: kind, language, and label.
	*/
	get mediaSubtitlesList() {
		return getSubtitlesListAttr$1(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST);
	}
	set mediaSubtitlesList(list) {
		setSubtitlesListAttr$1(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST, list);
	}
	/**
	* An array of TextTrack-like objects.
	* Objects must have the properties: kind, language, and label.
	*/
	get mediaSubtitlesShowing() {
		return getSubtitlesListAttr$1(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);
	}
	set mediaSubtitlesShowing(list) {
		setSubtitlesListAttr$1(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING, list);
	}
};
_prevState$1 = /* @__PURE__ */ new WeakMap();
_render$2 = /* @__PURE__ */ new WeakSet();
render_fn$2 = function() {
	var _a$2;
	if (__privateGet$2(this, _prevState$1) === JSON.stringify(this.mediaSubtitlesList)) return;
	__privateSet$1(this, _prevState$1, JSON.stringify(this.mediaSubtitlesList));
	this.defaultSlot.textContent = "";
	const isOff = !this.value;
	const item = createMenuItem({
		type: "radio",
		text: this.formatMenuItemText(t("Off")),
		value: "off",
		checked: isOff
	});
	item.prepend(createIndicator(this, "checked-indicator"));
	this.defaultSlot.append(item);
	const subtitlesList = this.mediaSubtitlesList;
	for (const subs of subtitlesList) {
		const item2 = createMenuItem({
			type: "radio",
			text: this.formatMenuItemText(subs.label, subs),
			value: formatTextTrackObj(subs),
			checked: this.value == formatTextTrackObj(subs)
		});
		item2.prepend(createIndicator(this, "checked-indicator"));
		if (((_a$2 = subs.kind) != null ? _a$2 : "subs") === "captions") item2.append(createIndicator(this, "captions-indicator"));
		this.defaultSlot.append(item2);
	}
};
_onChange$2 = /* @__PURE__ */ new WeakSet();
onChange_fn$2 = function() {
	const showingSubs = this.mediaSubtitlesShowing;
	const showingSubsStr = this.getAttribute(MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);
	const localStateChange = this.value !== showingSubsStr;
	if ((showingSubs == null ? void 0 : showingSubs.length) && localStateChange) this.dispatchEvent(new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_DISABLE_SUBTITLES_REQUEST, {
		composed: true,
		bubbles: true,
		detail: showingSubs
	}));
	if (!this.value || !localStateChange) return;
	const event = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST, {
		composed: true,
		bubbles: true,
		detail: this.value
	});
	this.dispatchEvent(event);
};
MediaCaptionsMenu.getTemplateHTML = getTemplateHTML;
var getSubtitlesListAttr$1 = (el, attrName) => {
	const attrVal = el.getAttribute(attrName);
	return attrVal ? parseTextTracksStr(attrVal) : [];
};
var setSubtitlesListAttr$1 = (el, attrName, list) => {
	if (!(list == null ? void 0 : list.length)) {
		el.removeAttribute(attrName);
		return;
	}
	const newValStr = stringifyTextTrackList(list);
	if (el.getAttribute(attrName) === newValStr) return;
	el.setAttribute(attrName, newValStr);
};
if (!GlobalThis.customElements.get("media-captions-menu")) GlobalThis.customElements.define("media-captions-menu", MediaCaptionsMenu);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-captions-menu-button.js
var ccIconOn = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.83 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.39 9.45a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.92 3.92 0 0 1 .92-2.77 3.18 3.18 0 0 1 2.43-1 2.94 2.94 0 0 1 2.13.78c.364.359.62.813.74 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.17 1.61 1.61 0 0 0-1.29.58 2.79 2.79 0 0 0-.5 1.89 3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.48 1.48 0 0 0 1-.37 2.1 2.1 0 0 0 .59-1.14l1.4.44a3.23 3.23 0 0 1-1.07 1.69Zm7.22 0a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.88 3.88 0 0 1 .93-2.77 3.14 3.14 0 0 1 2.42-1 3 3 0 0 1 2.16.82 2.8 2.8 0 0 1 .73 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.21 1.61 1.61 0 0 0-1.29.58A2.79 2.79 0 0 0 15 12a3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.44 1.44 0 0 0 1-.37 2.1 2.1 0 0 0 .6-1.15l1.4.44a3.17 3.17 0 0 1-1.1 1.7Z"/>
</svg>`;
var ccIconOff = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M17.73 14.09a1.4 1.4 0 0 1-1 .37 1.579 1.579 0 0 1-1.27-.58A3 3 0 0 1 15 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34A2.89 2.89 0 0 0 19 9.07a3 3 0 0 0-2.14-.78 3.14 3.14 0 0 0-2.42 1 3.91 3.91 0 0 0-.93 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.17 3.17 0 0 0 1.07-1.74l-1.4-.45c-.083.43-.3.822-.62 1.12Zm-7.22 0a1.43 1.43 0 0 1-1 .37 1.58 1.58 0 0 1-1.27-.58A3 3 0 0 1 7.76 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34a2.81 2.81 0 0 0-.74-1.32 2.94 2.94 0 0 0-2.13-.78 3.18 3.18 0 0 0-2.43 1 4 4 0 0 0-.92 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.23 3.23 0 0 0 1.07-1.74l-1.4-.45a2.06 2.06 0 0 1-.6 1.07Zm12.32-8.41a2.59 2.59 0 0 0-2.3-2.51C18.72 3.05 15.86 3 13 3c-2.86 0-5.72.05-7.53.17a2.59 2.59 0 0 0-2.3 2.51c-.23 4.207-.23 8.423 0 12.63a2.57 2.57 0 0 0 2.3 2.5c1.81.13 4.67.19 7.53.19 2.86 0 5.72-.06 7.53-.19a2.57 2.57 0 0 0 2.3-2.5c.23-4.207.23-8.423 0-12.63Zm-1.49 12.53a1.11 1.11 0 0 1-.91 1.11c-1.67.11-4.45.18-7.43.18-2.98 0-5.76-.07-7.43-.18a1.11 1.11 0 0 1-.91-1.11c-.21-4.14-.21-8.29 0-12.43a1.11 1.11 0 0 1 .91-1.11C7.24 4.56 10 4.49 13 4.49s5.76.07 7.43.18a1.11 1.11 0 0 1 .91 1.11c.21 4.14.21 8.29 0 12.43Z"/>
</svg>`;
function getSlotTemplateHTML$2() {
	return `
    <style>
      :host([data-captions-enabled="true"]) slot[name=off] {
        display: none !important;
      }

      
      :host(:not([data-captions-enabled="true"])) slot[name=on] {
        display: none !important;
      }

      :host([aria-expanded="true"]) slot[name=tooltip] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="on">${ccIconOn}</slot>
      <slot name="off">${ccIconOff}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$2() {
	return t("Captions");
}
var updateAriaChecked = (el) => {
	el.setAttribute("data-captions-enabled", areSubsOn(el).toString());
};
var updateAriaLabel = (el) => {
	el.setAttribute("aria-label", t("closed captions"));
};
var MediaCaptionsMenuButton = class extends MediaChromeMenuButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_SUBTITLES_LIST,
			MediaUIAttributes.MEDIA_SUBTITLES_SHOWING,
			MediaUIAttributes.MEDIA_LANG
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel(this);
		updateAriaChecked(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_SHOWING) updateAriaChecked(this);
		else if (attrName === MediaUIAttributes.MEDIA_LANG) updateAriaLabel(this);
	}
	/**
	* Returns the element with the id specified by the `invoketarget` attribute.
	* @return {HTMLElement | null}
	*/
	get invokeTargetElement() {
		var _a$2;
		if (this.invokeTarget != void 0) return super.invokeTargetElement;
		return (_a$2 = getMediaController(this)) == null ? void 0 : _a$2.querySelector("media-captions-menu");
	}
	/**
	* An array of TextTrack-like objects.
	* Objects must have the properties: kind, language, and label.
	*/
	get mediaSubtitlesList() {
		return getSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST);
	}
	set mediaSubtitlesList(list) {
		setSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST, list);
	}
	/**
	* An array of TextTrack-like objects.
	* Objects must have the properties: kind, language, and label.
	*/
	get mediaSubtitlesShowing() {
		return getSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);
	}
	set mediaSubtitlesShowing(list) {
		setSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING, list);
	}
};
MediaCaptionsMenuButton.getSlotTemplateHTML = getSlotTemplateHTML$2;
MediaCaptionsMenuButton.getTooltipContentHTML = getTooltipContentHTML$2;
var getSubtitlesListAttr = (el, attrName) => {
	const attrVal = el.getAttribute(attrName);
	return attrVal ? parseTextTracksStr(attrVal) : [];
};
var setSubtitlesListAttr = (el, attrName, list) => {
	if (!(list == null ? void 0 : list.length)) {
		el.removeAttribute(attrName);
		return;
	}
	const newValStr = stringifyTextTrackList(list);
	if (el.getAttribute(attrName) === newValStr) return;
	el.setAttribute(attrName, newValStr);
};
if (!GlobalThis.customElements.get("media-captions-menu-button")) GlobalThis.customElements.define("media-captions-menu-button", MediaCaptionsMenuButton);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-playback-rate-menu.js
var __accessCheck$1 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$1 = (obj, member, getter) => {
	__accessCheck$1(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$1 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateMethod$1 = (obj, member, method) => {
	__accessCheck$1(obj, member, "access private method");
	return method;
};
var _rates, _render$1, render_fn$1, _onChange$1, onChange_fn$1;
var Attributes$1 = { RATES: "rates" };
var MediaPlaybackRateMenu = class extends MediaChromeMenu {
	constructor() {
		super();
		__privateAdd$1(this, _render$1);
		__privateAdd$1(this, _onChange$1);
		__privateAdd$1(this, _rates, new AttributeTokenList(this, Attributes$1.RATES, { defaultValue: DEFAULT_RATES }));
		__privateMethod$1(this, _render$1, render_fn$1).call(this);
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_PLAYBACK_RATE,
			Attributes$1.RATES
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_PLAYBACK_RATE && oldValue != newValue) this.value = newValue;
		else if (attrName === Attributes$1.RATES && oldValue != newValue) {
			__privateGet$1(this, _rates).value = newValue;
			__privateMethod$1(this, _render$1, render_fn$1).call(this);
		}
	}
	connectedCallback() {
		super.connectedCallback();
		this.addEventListener("change", __privateMethod$1(this, _onChange$1, onChange_fn$1));
	}
	disconnectedCallback() {
		super.disconnectedCallback();
		this.removeEventListener("change", __privateMethod$1(this, _onChange$1, onChange_fn$1));
	}
	/**
	* Returns the anchor element when it is a floating menu.
	*/
	get anchorElement() {
		if (this.anchor !== "auto") return super.anchorElement;
		return getMediaController(this).querySelector("media-playback-rate-menu-button");
	}
	/**
	* Get the playback rates for the button.
	*/
	get rates() {
		return __privateGet$1(this, _rates);
	}
	/**
	* Set the playback rates for the button.
	* For React 19+ compatibility, accept a string of space-separated rates.
	*/
	set rates(value) {
		if (!value) __privateGet$1(this, _rates).value = "";
		else if (Array.isArray(value)) __privateGet$1(this, _rates).value = value.join(" ");
		else if (typeof value === "string") __privateGet$1(this, _rates).value = value;
		__privateMethod$1(this, _render$1, render_fn$1).call(this);
	}
	/**
	* The current playback rate
	*/
	get mediaPlaybackRate() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, DEFAULT_RATE$1);
	}
	set mediaPlaybackRate(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
	}
};
_rates = /* @__PURE__ */ new WeakMap();
_render$1 = /* @__PURE__ */ new WeakSet();
render_fn$1 = function() {
	this.defaultSlot.textContent = "";
	for (const rate of __privateGet$1(this, _rates)) {
		const item = createMenuItem({
			type: "radio",
			text: this.formatMenuItemText(`${rate}x`, rate),
			value: rate,
			checked: this.mediaPlaybackRate === Number(rate)
		});
		item.prepend(createIndicator(this, "checked-indicator"));
		this.defaultSlot.append(item);
	}
};
_onChange$1 = /* @__PURE__ */ new WeakSet();
onChange_fn$1 = function() {
	if (!this.value) return;
	const event = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST, {
		composed: true,
		bubbles: true,
		detail: this.value
	});
	this.dispatchEvent(event);
};
if (!GlobalThis.customElements.get("media-playback-rate-menu")) GlobalThis.customElements.define("media-playback-rate-menu", MediaPlaybackRateMenu);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-playback-rate-menu-button.js
var DEFAULT_RATE = 1;
function getSlotTemplateHTML$1(attrs) {
	return `
    <style>
      :host {
        min-width: 5ch;
        padding: var(--media-button-padding, var(--media-control-padding, 10px 5px));
      }
      
      :host([aria-expanded="true"]) slot[name=tooltip] {
        display: none;
      }
    </style>
    <slot name="icon">${attrs["mediaplaybackrate"] || DEFAULT_RATE}x</slot>
  `;
}
function getTooltipContentHTML$1() {
	return t("Playback rate");
}
var MediaPlaybackRateMenuButton = class extends MediaChromeMenuButton {
	static get observedAttributes() {
		return [...super.observedAttributes, MediaUIAttributes.MEDIA_PLAYBACK_RATE];
	}
	constructor() {
		var _a$2;
		super();
		this.container = this.shadowRoot.querySelector("slot[name=\"icon\"]");
		this.container.innerHTML = `${(_a$2 = this.mediaPlaybackRate) != null ? _a$2 : DEFAULT_RATE}x`;
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_PLAYBACK_RATE) {
			const newPlaybackRate = newValue ? +newValue : NaN;
			const playbackRate = !Number.isNaN(newPlaybackRate) ? newPlaybackRate : DEFAULT_RATE;
			this.container.innerHTML = `${playbackRate}x`;
			this.setAttribute("aria-label", t("Playback rate {playbackRate}", { playbackRate }));
		}
	}
	/**
	* Returns the element with the id specified by the `invoketarget` attribute.
	*/
	get invokeTargetElement() {
		if (this.invokeTarget != void 0) return super.invokeTargetElement;
		return getMediaController(this).querySelector("media-playback-rate-menu");
	}
	/**
	* The current playback rate
	*/
	get mediaPlaybackRate() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, DEFAULT_RATE);
	}
	set mediaPlaybackRate(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
	}
};
MediaPlaybackRateMenuButton.getSlotTemplateHTML = getSlotTemplateHTML$1;
MediaPlaybackRateMenuButton.getTooltipContentHTML = getTooltipContentHTML$1;
if (!GlobalThis.customElements.get("media-playback-rate-menu-button")) GlobalThis.customElements.define("media-playback-rate-menu-button", MediaPlaybackRateMenuButton);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-rendition-menu.js
var __accessCheck = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
	__accessCheck(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
	__accessCheck(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod = (obj, member, method) => {
	__accessCheck(obj, member, "access private method");
	return method;
};
var _renditionList, _prevState, _render, render_fn, _onChange, onChange_fn;
var MediaRenditionMenu = class extends MediaChromeMenu {
	constructor() {
		super(...arguments);
		__privateAdd(this, _render);
		__privateAdd(this, _onChange);
		__privateAdd(this, _renditionList, []);
		__privateAdd(this, _prevState, {});
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_RENDITION_LIST,
			MediaUIAttributes.MEDIA_RENDITION_SELECTED,
			MediaUIAttributes.MEDIA_RENDITION_UNAVAILABLE,
			MediaUIAttributes.MEDIA_HEIGHT
		];
	}
	static formatMenuItemText(text, rendition) {
		return super.formatMenuItemText(text, rendition);
	}
	static formatRendition(rendition, { showBitrate = false } = {}) {
		const renditionText = `${Math.min(rendition.width, rendition.height)}p`;
		if (showBitrate && rendition.bitrate) {
			const mbps = rendition.bitrate / 1e6;
			const bitrateText = `${mbps.toFixed(mbps < 1 ? 1 : 0)} Mbps`;
			return `${renditionText} (${bitrateText})`;
		}
		return this.formatMenuItemText(renditionText, rendition);
	}
	static compareRendition(a$2, b$4) {
		var _a$2, _b;
		return b$4.height === a$2.height ? ((_a$2 = b$4.bitrate) != null ? _a$2 : 0) - ((_b = a$2.bitrate) != null ? _b : 0) : b$4.height - a$2.height;
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_RENDITION_SELECTED && oldValue !== newValue) {
			this.value = newValue != null ? newValue : "auto";
			__privateMethod(this, _render, render_fn).call(this);
		} else if (attrName === MediaUIAttributes.MEDIA_RENDITION_LIST && oldValue !== newValue) {
			__privateSet(this, _renditionList, parseRenditionList(newValue));
			__privateMethod(this, _render, render_fn).call(this);
		} else if (attrName === MediaUIAttributes.MEDIA_HEIGHT && oldValue !== newValue) __privateMethod(this, _render, render_fn).call(this);
	}
	connectedCallback() {
		super.connectedCallback();
		this.addEventListener("change", __privateMethod(this, _onChange, onChange_fn));
	}
	disconnectedCallback() {
		super.disconnectedCallback();
		this.removeEventListener("change", __privateMethod(this, _onChange, onChange_fn));
	}
	/**
	* Returns the anchor element when it is a floating menu.
	*/
	get anchorElement() {
		if (this.anchor !== "auto") return super.anchorElement;
		return getMediaController(this).querySelector("media-rendition-menu-button");
	}
	get mediaRenditionList() {
		return __privateGet(this, _renditionList);
	}
	set mediaRenditionList(list) {
		__privateSet(this, _renditionList, list);
		__privateMethod(this, _render, render_fn).call(this);
	}
	/**
	* Get selected rendition id.
	*/
	get mediaRenditionSelected() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED);
	}
	set mediaRenditionSelected(id) {
		setStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED, id);
	}
	get mediaHeight() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT);
	}
	set mediaHeight(height) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT, height);
	}
	compareRendition(a$2, b$4) {
		return this.constructor.compareRendition(a$2, b$4);
	}
	formatMenuItemText(text, rendition) {
		return this.constructor.formatMenuItemText(text, rendition);
	}
	formatRendition(rendition, options) {
		return this.constructor.formatRendition(rendition, options);
	}
	showRenditionBitrate(rendition) {
		return this.mediaRenditionList.some((r$3) => r$3 !== rendition && r$3.height === rendition.height && r$3.bitrate !== rendition.bitrate);
	}
};
_renditionList = /* @__PURE__ */ new WeakMap();
_prevState = /* @__PURE__ */ new WeakMap();
_render = /* @__PURE__ */ new WeakSet();
render_fn = function() {
	if (__privateGet(this, _prevState).mediaRenditionList === JSON.stringify(this.mediaRenditionList) && __privateGet(this, _prevState).mediaHeight === this.mediaHeight) return;
	__privateGet(this, _prevState).mediaRenditionList = JSON.stringify(this.mediaRenditionList);
	__privateGet(this, _prevState).mediaHeight = this.mediaHeight;
	const renditionList = this.mediaRenditionList.sort(this.compareRendition.bind(this));
	const selectedRendition = renditionList.find((rendition) => rendition.id === this.mediaRenditionSelected);
	for (const rendition of renditionList) rendition.selected = rendition === selectedRendition;
	this.defaultSlot.textContent = "";
	const isAuto = !this.mediaRenditionSelected;
	for (const rendition of renditionList) {
		const text = this.formatRendition(rendition, { showBitrate: this.showRenditionBitrate(rendition) });
		const item2 = createMenuItem({
			type: "radio",
			text,
			value: `${rendition.id}`,
			checked: rendition.selected && !isAuto
		});
		item2.prepend(createIndicator(this, "checked-indicator"));
		this.defaultSlot.append(item2);
	}
	const showSelectedBitrate = selectedRendition && this.showRenditionBitrate(selectedRendition);
	const autoText = isAuto ? selectedRendition ? this.formatMenuItemText(`${t("Auto")} \u2022 ${this.formatRendition(selectedRendition, { showBitrate: showSelectedBitrate })}`, selectedRendition) : this.formatMenuItemText(`${t("Auto")} (${this.mediaHeight}p)`) : this.formatMenuItemText(t("Auto"));
	const item = createMenuItem({
		type: "radio",
		text: autoText,
		value: "auto",
		checked: isAuto
	});
	item.dataset.description = autoText;
	item.prepend(createIndicator(this, "checked-indicator"));
	this.defaultSlot.append(item);
};
_onChange = /* @__PURE__ */ new WeakSet();
onChange_fn = function() {
	if (this.value == null) return;
	const event = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_RENDITION_REQUEST, {
		composed: true,
		bubbles: true,
		detail: this.value
	});
	this.dispatchEvent(event);
};
if (!GlobalThis.customElements.get("media-rendition-menu")) GlobalThis.customElements.define("media-rendition-menu", MediaRenditionMenu);

//#endregion
//#region node_modules/media-chrome/dist/menu/media-rendition-menu-button.js
var renditionIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M13.5 2.5h2v6h-2v-2h-11v-2h11v-2Zm4 2h4v2h-4v-2Zm-12 4h2v6h-2v-2h-3v-2h3v-2Zm4 2h12v2h-12v-2Zm1 4h2v6h-2v-2h-8v-2h8v-2Zm4 2h7v2h-7v-2Z" />
</svg>`;
function getSlotTemplateHTML() {
	return `
    <style>
      :host([aria-expanded="true"]) slot[name=tooltip] {
        display: none;
      }
    </style>
    <slot name="icon">${renditionIcon}</slot>
  `;
}
function getTooltipContentHTML() {
	return t("Quality");
}
var MediaRenditionMenuButton = class extends MediaChromeMenuButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_RENDITION_SELECTED,
			MediaUIAttributes.MEDIA_RENDITION_UNAVAILABLE,
			MediaUIAttributes.MEDIA_HEIGHT
		];
	}
	connectedCallback() {
		super.connectedCallback();
		this.setAttribute("aria-label", t("quality"));
	}
	/**
	* Returns the element with the id specified by the `invoketarget` attribute.
	*/
	get invokeTargetElement() {
		if (this.invokeTarget != void 0) return super.invokeTargetElement;
		return getMediaController(this).querySelector("media-rendition-menu");
	}
	/**
	* Get selected rendition id.
	*/
	get mediaRenditionSelected() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED);
	}
	set mediaRenditionSelected(id) {
		setStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED, id);
	}
	get mediaHeight() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT);
	}
	set mediaHeight(height) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT, height);
	}
};
MediaRenditionMenuButton.getSlotTemplateHTML = getSlotTemplateHTML;
MediaRenditionMenuButton.getTooltipContentHTML = getTooltipContentHTML;
if (!GlobalThis.customElements.get("media-rendition-menu-button")) GlobalThis.customElements.define("media-rendition-menu-button", MediaRenditionMenuButton);

//#endregion
//#region node_modules/@mux/mux-player/dist/base.mjs
var Je = (t$1) => {
	throw TypeError(t$1);
};
var he = (t$1, a$2, e$1) => a$2.has(t$1) || Je("Cannot " + e$1);
var u$1 = (t$1, a$2, e$1) => (he(t$1, a$2, "read from private field"), e$1 ? e$1.call(t$1) : a$2.get(t$1)), T = (t$1, a$2, e$1) => a$2.has(t$1) ? Je("Cannot add the same private member more than once") : a$2 instanceof WeakSet ? a$2.add(t$1) : a$2.set(t$1, e$1), C$1 = (t$1, a$2, e$1, i$1) => (he(t$1, a$2, "write to private field"), i$1 ? i$1.call(t$1, e$1) : a$2.set(t$1, e$1), e$1), p$2 = (t$1, a$2, e$1) => (he(t$1, a$2, "access private method"), e$1);
var $ = class {
	addEventListener() {}
	removeEventListener() {}
	dispatchEvent(a$2) {
		return !0;
	}
};
if (typeof DocumentFragment == "undefined") {
	class t$1 extends $ {}
	globalThis.DocumentFragment = t$1;
}
var G = class extends $ {}, ge = class extends $ {}, Ut = {
	get(t$1) {},
	define(t$1, a$2, e$1) {},
	getName(t$1) {
		return null;
	},
	upgrade(t$1) {},
	whenDefined(t$1) {
		return Promise.resolve(G);
	}
}, j, fe$1 = class {
	constructor(a$2, e$1 = {}) {
		T(this, j);
		C$1(this, j, e$1 == null ? void 0 : e$1.detail);
	}
	get detail() {
		return u$1(this, j);
	}
	initCustomEvent() {}
};
j = /* @__PURE__ */ new WeakMap();
function Vt(t$1, a$2) {
	return new G();
}
var et = {
	document: { createElement: Vt },
	DocumentFragment,
	customElements: Ut,
	CustomEvent: fe$1,
	EventTarget: $,
	HTMLElement: G,
	HTMLVideoElement: ge
}, tt = typeof window == "undefined" || typeof globalThis.customElements == "undefined", k = tt ? et : globalThis, Y = tt ? et.document : globalThis.document;
function at(t$1) {
	let a$2 = "";
	return Object.entries(t$1).forEach(([e$1, i$1]) => {
		i$1 != null && (a$2 += `${re$1(e$1)}: ${i$1}; `);
	}), a$2 ? a$2.trim() : void 0;
}
function re$1(t$1) {
	return t$1.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}
function oe$1(t$1) {
	return t$1.replace(/[-_]([a-z])/g, (a$2, e$1) => e$1.toUpperCase());
}
function y$1(t$1) {
	if (t$1 == null) return;
	let a$2 = +t$1;
	return Number.isNaN(a$2) ? void 0 : a$2;
}
function ye$1(t$1) {
	let a$2 = Bt(t$1).toString();
	return a$2 ? "?" + a$2 : "";
}
function Bt(t$1) {
	let a$2 = {};
	for (let e$1 in t$1) t$1[e$1] != null && (a$2[e$1] = t$1[e$1]);
	return new URLSearchParams(a$2);
}
var ve = (t$1, a$2) => !t$1 || !a$2 ? !1 : t$1.contains(a$2) ? !0 : ve(t$1, a$2.getRootNode().host);
var rt = "mux.com", Ht = () => {
	try {
		return "3.6.1";
	} catch {}
	return "UNKNOWN";
}, Kt = Ht(), se$2 = () => Kt, ot = (t$1, { token: a$2, customDomain: e$1 = rt, thumbnailTime: i$1, programTime: r$3 } = {}) => {
	var l$3;
	let n$2 = a$2 == null ? i$1 : void 0, { aud: d$2 } = (l$3 = ee$1(a$2)) != null ? l$3 : {};
	if (!(a$2 && d$2 !== "t")) return `https://image.${e$1}/${t$1}/thumbnail.webp${ye$1({
		token: a$2,
		time: n$2,
		program_time: r$3
	})}`;
}, nt = (t$1, { token: a$2, customDomain: e$1 = rt, programStartTime: i$1, programEndTime: r$3 } = {}) => {
	var d$2;
	let { aud: n$2 } = (d$2 = ee$1(a$2)) != null ? d$2 : {};
	if (!(a$2 && n$2 !== "s")) return `https://image.${e$1}/${t$1}/storyboard.vtt${ye$1({
		token: a$2,
		format: "webp",
		program_start_time: i$1,
		program_end_time: r$3
	})}`;
}, z = (t$1) => {
	if (t$1) {
		if ([_.LIVE, _.ON_DEMAND].includes(t$1)) return t$1;
		if (t$1 != null && t$1.includes("live")) return _.LIVE;
	}
};
var $t = {
	crossorigin: "crossOrigin",
	playsinline: "playsInline"
};
function st$1(t$1) {
	var a$2;
	return (a$2 = $t[t$1]) != null ? a$2 : oe$1(t$1);
}
var P$1, D, v, ne$2 = class {
	constructor(a$2, e$1) {
		T(this, P$1);
		T(this, D);
		T(this, v, []);
		C$1(this, P$1, a$2), C$1(this, D, e$1);
	}
	[Symbol.iterator]() {
		return u$1(this, v).values();
	}
	get length() {
		return u$1(this, v).length;
	}
	get value() {
		var a$2;
		return (a$2 = u$1(this, v).join(" ")) != null ? a$2 : "";
	}
	set value(a$2) {
		var e$1;
		a$2 !== this.value && (C$1(this, v, []), this.add(...(e$1 = a$2 == null ? void 0 : a$2.split(" ")) != null ? e$1 : []));
	}
	toString() {
		return this.value;
	}
	item(a$2) {
		return u$1(this, v)[a$2];
	}
	values() {
		return u$1(this, v).values();
	}
	keys() {
		return u$1(this, v).keys();
	}
	forEach(a$2) {
		u$1(this, v).forEach(a$2);
	}
	add(...a$2) {
		var e$1, i$1;
		a$2.forEach((r$3) => {
			this.contains(r$3) || u$1(this, v).push(r$3);
		}), !(this.value === "" && !((e$1 = u$1(this, P$1)) != null && e$1.hasAttribute(`${u$1(this, D)}`))) && ((i$1 = u$1(this, P$1)) == null || i$1.setAttribute(`${u$1(this, D)}`, `${this.value}`));
	}
	remove(...a$2) {
		var e$1;
		a$2.forEach((i$1) => {
			u$1(this, v).splice(u$1(this, v).indexOf(i$1), 1);
		}), (e$1 = u$1(this, P$1)) == null || e$1.setAttribute(`${u$1(this, D)}`, `${this.value}`);
	}
	contains(a$2) {
		return u$1(this, v).includes(a$2);
	}
	toggle(a$2, e$1) {
		return typeof e$1 != "undefined" ? e$1 ? (this.add(a$2), !0) : (this.remove(a$2), !1) : this.contains(a$2) ? (this.remove(a$2), !1) : (this.add(a$2), !0);
	}
	replace(a$2, e$1) {
		this.remove(a$2), this.add(e$1);
	}
};
P$1 = /* @__PURE__ */ new WeakMap(), D = /* @__PURE__ */ new WeakMap(), v = /* @__PURE__ */ new WeakMap();
var dt = `[mux-player ${se$2()}]`;
function x$2(...t$1) {
	console.warn(dt, ...t$1);
}
function E$2(...t$1) {
	console.error(dt, ...t$1);
}
function Ee$1(t$1) {
	var e$1;
	let a$2 = (e$1 = t$1.message) != null ? e$1 : "";
	t$1.context && (a$2 += ` ${t$1.context}`), t$1.file && (a$2 += ` ${x$1("Read more: ")}
https://github.com/muxinc/elements/blob/main/errors/${t$1.file}`), x$2(a$2);
}
var g$2 = {
	AUTOPLAY: "autoplay",
	CROSSORIGIN: "crossorigin",
	LOOP: "loop",
	MUTED: "muted",
	PLAYSINLINE: "playsinline",
	PRELOAD: "preload"
}, N = {
	VOLUME: "volume",
	PLAYBACKRATE: "playbackrate",
	MUTED: "muted"
};
({
	...g$2,
	...N
});
var ut = Object.freeze({
	length: 0,
	start(t$1) {
		let a$2 = t$1 >>> 0;
		if (a$2 >= this.length) throw new DOMException(`Failed to execute 'start' on 'TimeRanges': The index provided (${a$2}) is greater than or equal to the maximum bound (${this.length}).`);
		return 0;
	},
	end(t$1) {
		let a$2 = t$1 >>> 0;
		if (a$2 >= this.length) throw new DOMException(`Failed to execute 'end' on 'TimeRanges': The index provided (${a$2}) is greater than or equal to the maximum bound (${this.length}).`);
		return 0;
	}
}), Ft = Object.values(g$2).filter((t$1) => g$2.PLAYSINLINE !== t$1), Wt = Object.values(N), Zt = [...Ft, ...Wt], Ae = class extends k.HTMLElement {
	static get observedAttributes() {
		return Zt;
	}
	constructor() {
		super();
	}
	attributeChangedCallback(a$2, e$1, i$1) {
		var r$3, n$2;
		switch (a$2) {
			case N.MUTED:
				this.media && (this.media.muted = i$1 != null, this.media.defaultMuted = i$1 != null);
				return;
			case N.VOLUME: {
				let d$2 = (r$3 = y$1(i$1)) != null ? r$3 : 1;
				this.media && (this.media.volume = d$2);
				return;
			}
			case N.PLAYBACKRATE: {
				let d$2 = (n$2 = y$1(i$1)) != null ? n$2 : 1;
				this.media && (this.media.playbackRate = d$2, this.media.defaultPlaybackRate = d$2);
				return;
			}
		}
	}
	play() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.play()) != null ? e$1 : Promise.reject();
	}
	pause() {
		var a$2;
		(a$2 = this.media) == null || a$2.pause();
	}
	load() {
		var a$2;
		(a$2 = this.media) == null || a$2.load();
	}
	get media() {
		var a$2;
		return (a$2 = this.shadowRoot) == null ? void 0 : a$2.querySelector("mux-video");
	}
	get audioTracks() {
		return this.media.audioTracks;
	}
	get videoTracks() {
		return this.media.videoTracks;
	}
	get audioRenditions() {
		return this.media.audioRenditions;
	}
	get videoRenditions() {
		return this.media.videoRenditions;
	}
	get paused() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.paused) != null ? e$1 : !0;
	}
	get duration() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.duration) != null ? e$1 : NaN;
	}
	get ended() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.ended) != null ? e$1 : !1;
	}
	get buffered() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.buffered) != null ? e$1 : ut;
	}
	get seekable() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.seekable) != null ? e$1 : ut;
	}
	get readyState() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.readyState) != null ? e$1 : 0;
	}
	get videoWidth() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.videoWidth) != null ? e$1 : 0;
	}
	get videoHeight() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.videoHeight) != null ? e$1 : 0;
	}
	get currentSrc() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.currentSrc) != null ? e$1 : "";
	}
	get currentTime() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.currentTime) != null ? e$1 : 0;
	}
	set currentTime(a$2) {
		this.media && (this.media.currentTime = Number(a$2));
	}
	get volume() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.volume) != null ? e$1 : 1;
	}
	set volume(a$2) {
		this.media && (this.media.volume = Number(a$2));
	}
	get playbackRate() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.playbackRate) != null ? e$1 : 1;
	}
	set playbackRate(a$2) {
		this.media && (this.media.playbackRate = Number(a$2));
	}
	get defaultPlaybackRate() {
		var a$2;
		return (a$2 = y$1(this.getAttribute(N.PLAYBACKRATE))) != null ? a$2 : 1;
	}
	set defaultPlaybackRate(a$2) {
		a$2 != null ? this.setAttribute(N.PLAYBACKRATE, `${a$2}`) : this.removeAttribute(N.PLAYBACKRATE);
	}
	get crossOrigin() {
		return X$2(this, g$2.CROSSORIGIN);
	}
	set crossOrigin(a$2) {
		this.setAttribute(g$2.CROSSORIGIN, `${a$2}`);
	}
	get autoplay() {
		return X$2(this, g$2.AUTOPLAY) != null;
	}
	set autoplay(a$2) {
		a$2 ? this.setAttribute(g$2.AUTOPLAY, typeof a$2 == "string" ? a$2 : "") : this.removeAttribute(g$2.AUTOPLAY);
	}
	get loop() {
		return X$2(this, g$2.LOOP) != null;
	}
	set loop(a$2) {
		a$2 ? this.setAttribute(g$2.LOOP, "") : this.removeAttribute(g$2.LOOP);
	}
	get muted() {
		var a$2, e$1;
		return (e$1 = (a$2 = this.media) == null ? void 0 : a$2.muted) != null ? e$1 : !1;
	}
	set muted(a$2) {
		this.media && (this.media.muted = !!a$2);
	}
	get defaultMuted() {
		return X$2(this, g$2.MUTED) != null;
	}
	set defaultMuted(a$2) {
		a$2 ? this.setAttribute(g$2.MUTED, "") : this.removeAttribute(g$2.MUTED);
	}
	get playsInline() {
		return X$2(this, g$2.PLAYSINLINE) != null;
	}
	set playsInline(a$2) {
		E$2("playsInline is set to true by default and is not currently supported as a setter.");
	}
	get preload() {
		return this.media ? this.media.preload : this.getAttribute("preload");
	}
	set preload(a$2) {
		[
			"",
			"none",
			"metadata",
			"auto"
		].includes(a$2) ? this.setAttribute(g$2.PRELOAD, a$2) : this.removeAttribute(g$2.PRELOAD);
	}
};
function X$2(t$1, a$2) {
	return t$1.media ? t$1.media.getAttribute(a$2) : t$1.getAttribute(a$2);
}
var Ce = Ae;
var mt = `:host {
  --media-control-display: var(--controls);
  --media-loading-indicator-display: var(--loading-indicator);
  --media-dialog-display: var(--dialog);
  --media-play-button-display: var(--play-button);
  --media-live-button-display: var(--live-button);
  --media-seek-backward-button-display: var(--seek-backward-button);
  --media-seek-forward-button-display: var(--seek-forward-button);
  --media-mute-button-display: var(--mute-button);
  --media-captions-button-display: var(--captions-button);
  --media-captions-menu-button-display: var(--captions-menu-button, var(--media-captions-button-display));
  --media-rendition-menu-button-display: var(--rendition-menu-button);
  --media-audio-track-menu-button-display: var(--audio-track-menu-button);
  --media-airplay-button-display: var(--airplay-button);
  --media-pip-button-display: var(--pip-button);
  --media-fullscreen-button-display: var(--fullscreen-button);
  --media-cast-button-display: var(--cast-button, var(--_cast-button-drm-display));
  --media-playback-rate-button-display: var(--playback-rate-button);
  --media-playback-rate-menu-button-display: var(--playback-rate-menu-button);
  --media-volume-range-display: var(--volume-range);
  --media-time-range-display: var(--time-range);
  --media-time-display-display: var(--time-display);
  --media-duration-display-display: var(--duration-display);
  --media-title-display-display: var(--title-display);

  display: inline-block;
  line-height: 0;
  width: 100%;
}

a {
  color: #fff;
  font-size: 0.9em;
  text-decoration: underline;
}

media-theme {
  display: inline-block;
  line-height: 0;
  width: 100%;
  height: 100%;
  direction: ltr;
}

media-poster-image {
  display: inline-block;
  line-height: 0;
  width: 100%;
  height: 100%;
}

media-poster-image:not([src]):not([placeholdersrc]) {
  display: none;
}

::part(top),
[part~='top'] {
  --media-control-display: var(--controls, var(--top-controls));
  --media-play-button-display: var(--play-button, var(--top-play-button));
  --media-live-button-display: var(--live-button, var(--top-live-button));
  --media-seek-backward-button-display: var(--seek-backward-button, var(--top-seek-backward-button));
  --media-seek-forward-button-display: var(--seek-forward-button, var(--top-seek-forward-button));
  --media-mute-button-display: var(--mute-button, var(--top-mute-button));
  --media-captions-button-display: var(--captions-button, var(--top-captions-button));
  --media-captions-menu-button-display: var(
    --captions-menu-button,
    var(--media-captions-button-display, var(--top-captions-menu-button))
  );
  --media-rendition-menu-button-display: var(--rendition-menu-button, var(--top-rendition-menu-button));
  --media-audio-track-menu-button-display: var(--audio-track-menu-button, var(--top-audio-track-menu-button));
  --media-airplay-button-display: var(--airplay-button, var(--top-airplay-button));
  --media-pip-button-display: var(--pip-button, var(--top-pip-button));
  --media-fullscreen-button-display: var(--fullscreen-button, var(--top-fullscreen-button));
  --media-cast-button-display: var(--cast-button, var(--top-cast-button, var(--_cast-button-drm-display)));
  --media-playback-rate-button-display: var(--playback-rate-button, var(--top-playback-rate-button));
  --media-playback-rate-menu-button-display: var(
    --captions-menu-button,
    var(--media-playback-rate-button-display, var(--top-playback-rate-menu-button))
  );
  --media-volume-range-display: var(--volume-range, var(--top-volume-range));
  --media-time-range-display: var(--time-range, var(--top-time-range));
  --media-time-display-display: var(--time-display, var(--top-time-display));
  --media-duration-display-display: var(--duration-display, var(--top-duration-display));
  --media-title-display-display: var(--title-display, var(--top-title-display));
}

::part(center),
[part~='center'] {
  --media-control-display: var(--controls, var(--center-controls));
  --media-play-button-display: var(--play-button, var(--center-play-button));
  --media-live-button-display: var(--live-button, var(--center-live-button));
  --media-seek-backward-button-display: var(--seek-backward-button, var(--center-seek-backward-button));
  --media-seek-forward-button-display: var(--seek-forward-button, var(--center-seek-forward-button));
  --media-mute-button-display: var(--mute-button, var(--center-mute-button));
  --media-captions-button-display: var(--captions-button, var(--center-captions-button));
  --media-captions-menu-button-display: var(
    --captions-menu-button,
    var(--media-captions-button-display, var(--center-captions-menu-button))
  );
  --media-rendition-menu-button-display: var(--rendition-menu-button, var(--center-rendition-menu-button));
  --media-audio-track-menu-button-display: var(--audio-track-menu-button, var(--center-audio-track-menu-button));
  --media-airplay-button-display: var(--airplay-button, var(--center-airplay-button));
  --media-pip-button-display: var(--pip-button, var(--center-pip-button));
  --media-fullscreen-button-display: var(--fullscreen-button, var(--center-fullscreen-button));
  --media-cast-button-display: var(--cast-button, var(--center-cast-button, var(--_cast-button-drm-display)));
  --media-playback-rate-button-display: var(--playback-rate-button, var(--center-playback-rate-button));
  --media-playback-rate-menu-button-display: var(
    --playback-rate-menu-button,
    var(--media-playback-rate-button-display, var(--center-playback-rate-menu-button))
  );
  --media-volume-range-display: var(--volume-range, var(--center-volume-range));
  --media-time-range-display: var(--time-range, var(--center-time-range));
  --media-time-display-display: var(--time-display, var(--center-time-display));
  --media-duration-display-display: var(--duration-display, var(--center-duration-display));
}

::part(bottom),
[part~='bottom'] {
  --media-control-display: var(--controls, var(--bottom-controls));
  --media-play-button-display: var(--play-button, var(--bottom-play-button));
  --media-live-button-display: var(--live-button, var(--bottom-live-button));
  --media-seek-backward-button-display: var(--seek-backward-button, var(--bottom-seek-backward-button));
  --media-seek-forward-button-display: var(--seek-forward-button, var(--bottom-seek-forward-button));
  --media-mute-button-display: var(--mute-button, var(--bottom-mute-button));
  --media-captions-button-display: var(--captions-button, var(--bottom-captions-button));
  --media-captions-menu-button-display: var(
    --captions-menu-button,
    var(--media-captions-button-display, var(--bottom-captions-menu-button))
  );
  --media-rendition-menu-button-display: var(--rendition-menu-button, var(--bottom-rendition-menu-button));
  --media-audio-track-menu-button-display: var(--audio-track-menu-button, var(--bottom-audio-track-menu-button));
  --media-airplay-button-display: var(--airplay-button, var(--bottom-airplay-button));
  --media-pip-button-display: var(--pip-button, var(--bottom-pip-button));
  --media-fullscreen-button-display: var(--fullscreen-button, var(--bottom-fullscreen-button));
  --media-cast-button-display: var(--cast-button, var(--bottom-cast-button, var(--_cast-button-drm-display)));
  --media-playback-rate-button-display: var(--playback-rate-button, var(--bottom-playback-rate-button));
  --media-playback-rate-menu-button-display: var(
    --playback-rate-menu-button,
    var(--media-playback-rate-button-display, var(--bottom-playback-rate-menu-button))
  );
  --media-volume-range-display: var(--volume-range, var(--bottom-volume-range));
  --media-time-range-display: var(--time-range, var(--bottom-time-range));
  --media-time-display-display: var(--time-display, var(--bottom-time-display));
  --media-duration-display-display: var(--duration-display, var(--bottom-duration-display));
  --media-title-display-display: var(--title-display, var(--bottom-title-display));
}

:host([no-tooltips]) {
  --media-tooltip-display: none;
}
`;
var q = /* @__PURE__ */ new WeakMap(), _e = class t$1 {
	constructor(a$2, e$1) {
		this.element = a$2;
		this.type = e$1;
		this.element.addEventListener(this.type, this);
		let i$1 = q.get(this.element);
		i$1 && i$1.set(this.type, this);
	}
	set(a$2) {
		if (typeof a$2 == "function") this.handleEvent = a$2.bind(this.element);
		else if (typeof a$2 == "object" && typeof a$2.handleEvent == "function") this.handleEvent = a$2.handleEvent.bind(a$2);
		else {
			this.element.removeEventListener(this.type, this);
			let e$1 = q.get(this.element);
			e$1 && e$1.delete(this.type);
		}
	}
	static for(a$2) {
		q.has(a$2.element) || q.set(a$2.element, /* @__PURE__ */ new Map());
		let e$1 = a$2.attributeName.slice(2), i$1 = q.get(a$2.element);
		return i$1 && i$1.has(e$1) ? i$1.get(e$1) : new t$1(a$2.element, e$1);
	}
};
function zt$1(t$1, a$2) {
	return t$1 instanceof AttrPart && t$1.attributeName.startsWith("on") ? (_e.for(t$1).set(a$2), t$1.element.removeAttributeNS(t$1.attributeNamespace, t$1.attributeName), !0) : !1;
}
function Xt$1(t$1, a$2) {
	return a$2 instanceof de$1 && t$1 instanceof ChildNodePart ? (a$2.renderInto(t$1), !0) : !1;
}
function qt(t$1, a$2) {
	return a$2 instanceof DocumentFragment && t$1 instanceof ChildNodePart ? (a$2.childNodes.length && t$1.replace(...a$2.childNodes), !0) : !1;
}
function Qt(t$1, a$2) {
	if (t$1 instanceof AttrPart) {
		let e$1 = t$1.attributeNamespace, i$1 = t$1.element.getAttributeNS(e$1, t$1.attributeName);
		return String(a$2) !== i$1 && (t$1.value = String(a$2)), !0;
	}
	return t$1.value = String(a$2), !0;
}
function Jt(t$1, a$2) {
	if (t$1 instanceof AttrPart && a$2 instanceof Element) {
		let e$1 = t$1.element;
		return e$1[t$1.attributeName] !== a$2 && (t$1.element.removeAttributeNS(t$1.attributeNamespace, t$1.attributeName), e$1[t$1.attributeName] = a$2), !0;
	}
	return !1;
}
function ea(t$1, a$2) {
	if (typeof a$2 == "boolean" && t$1 instanceof AttrPart) {
		let e$1 = t$1.attributeNamespace, i$1 = t$1.element.hasAttributeNS(e$1, t$1.attributeName);
		return a$2 !== i$1 && (t$1.booleanValue = a$2), !0;
	}
	return !1;
}
function ta(t$1, a$2) {
	return a$2 === !1 && t$1 instanceof ChildNodePart ? (t$1.replace(""), !0) : !1;
}
function aa(t$1, a$2) {
	Jt(t$1, a$2) || ea(t$1, a$2) || zt$1(t$1, a$2) || ta(t$1, a$2) || Xt$1(t$1, a$2) || qt(t$1, a$2) || Qt(t$1, a$2);
}
var ke = /* @__PURE__ */ new Map(), ct = /* @__PURE__ */ new WeakMap(), pt = /* @__PURE__ */ new WeakMap(), de$1 = class {
	constructor(a$2, e$1, i$1) {
		this.strings = a$2;
		this.values = e$1;
		this.processor = i$1;
		this.stringsKey = this.strings.join("");
	}
	get template() {
		if (ke.has(this.stringsKey)) return ke.get(this.stringsKey);
		{
			let a$2 = Y.createElement("template"), e$1 = this.strings.length - 1;
			return a$2.innerHTML = this.strings.reduce((i$1, r$3, n$2) => i$1 + r$3 + (n$2 < e$1 ? `{{ ${n$2} }}` : ""), ""), ke.set(this.stringsKey, a$2), a$2;
		}
	}
	renderInto(a$2) {
		var r$3;
		let e$1 = this.template;
		if (ct.get(a$2) !== e$1) {
			ct.set(a$2, e$1);
			let n$2 = new TemplateInstance(e$1, this.values, this.processor);
			pt.set(a$2, n$2), a$2 instanceof ChildNodePart ? a$2.replace(...n$2.children) : a$2.appendChild(n$2);
			return;
		}
		let i$1 = pt.get(a$2);
		(r$3 = i$1 == null ? void 0 : i$1.update) == null || r$3.call(i$1, this.values);
	}
}, ia = { processCallback(t$1, a$2, e$1) {
	var i$1;
	if (e$1) {
		for (let [r$3, n$2] of a$2) if (r$3 in e$1) {
			let d$2 = (i$1 = e$1[r$3]) != null ? i$1 : "";
			aa(n$2, d$2);
		}
	}
} };
function Q(t$1, ...a$2) {
	return new de$1(t$1, a$2, ia);
}
function bt(t$1, a$2) {
	t$1.renderInto(a$2);
}
var oa = (t$1) => {
	let { tokens: a$2 } = t$1;
	return a$2.drm ? ":host(:not([cast-receiver])) { --_cast-button-drm-display: none; }" : "";
}, gt = (t$1) => Q`
  <style>
    ${oa(t$1)}
    ${mt}
  </style>
  ${la(t$1)}
`, na = (t$1) => {
	let a$2 = t$1.hotKeys ? `${t$1.hotKeys}` : "";
	return z(t$1.streamType) === "live" && (a$2 += " noarrowleft noarrowright"), a$2;
}, da = Object.values({
	TOP: "top",
	CENTER: "center",
	BOTTOM: "bottom",
	LAYER: "layer",
	MEDIA_LAYER: "media-layer",
	POSTER_LAYER: "poster-layer",
	VERTICAL_LAYER: "vertical-layer",
	CENTERED_LAYER: "centered-layer",
	GESTURE_LAYER: "gesture-layer",
	CONTROLLER_LAYER: "controller",
	BUTTON: "button",
	RANGE: "range",
	DISPLAY: "display",
	CONTROL_BAR: "control-bar",
	MENU_BUTTON: "menu-button",
	MENU: "menu",
	OPTION: "option",
	POSTER: "poster",
	LIVE: "live",
	PLAY: "play",
	PRE_PLAY: "pre-play",
	SEEK_BACKWARD: "seek-backward",
	SEEK_FORWARD: "seek-forward",
	MUTE: "mute",
	CAPTIONS: "captions",
	AIRPLAY: "airplay",
	PIP: "pip",
	FULLSCREEN: "fullscreen",
	CAST: "cast",
	PLAYBACK_RATE: "playback-rate",
	VOLUME: "volume",
	TIME: "time",
	TITLE: "title",
	AUDIO_TRACK: "audio-track",
	RENDITION: "rendition"
}).join(", "), la = (t$1) => {
	var a$2, e$1, i$1, r$3, n$2, d$2, l$3, b$4, S$1, F$2, _$2, A$3, R, K$2, h$2, ie$2, W$2, Z$1, Ie$2, Pe$3, De$2, Ue$2, Ve$1, Be$1, He$2, Ke$2, $e$2, Ye$2, Fe$2, We$1, Ze$1, Ge$2, je$1, ze$3, Xe$2, qe$1, Qe$2;
	return Q`
  <media-theme
    template="${t$1.themeTemplate || !1}"
    defaultstreamtype="${(a$2 = t$1.defaultStreamType) != null ? a$2 : !1}"
    hotkeys="${na(t$1) || !1}"
    nohotkeys="${t$1.noHotKeys || !t$1.hasSrc || !1}"
    noautoseektolive="${!!((e$1 = t$1.streamType) != null && e$1.includes(_.LIVE)) && t$1.targetLiveWindow !== 0}"
    novolumepref="${t$1.novolumepref || !1}"
    disabled="${!t$1.hasSrc || t$1.isDialogOpen}"
    audio="${(i$1 = t$1.audio) != null ? i$1 : !1}"
    style="${(r$3 = at({
		"--media-primary-color": t$1.primaryColor,
		"--media-secondary-color": t$1.secondaryColor,
		"--media-accent-color": t$1.accentColor
	})) != null ? r$3 : !1}"
    defaultsubtitles="${!t$1.defaultHiddenCaptions}"
    forwardseekoffset="${(n$2 = t$1.forwardSeekOffset) != null ? n$2 : !1}"
    backwardseekoffset="${(d$2 = t$1.backwardSeekOffset) != null ? d$2 : !1}"
    playbackrates="${(l$3 = t$1.playbackRates) != null ? l$3 : !1}"
    defaultshowremainingtime="${(b$4 = t$1.defaultShowRemainingTime) != null ? b$4 : !1}"
    defaultduration="${(S$1 = t$1.defaultDuration) != null ? S$1 : !1}"
    hideduration="${(F$2 = t$1.hideDuration) != null ? F$2 : !1}"
    title="${(_$2 = t$1.title) != null ? _$2 : !1}"
    videotitle="${(A$3 = t$1.videoTitle) != null ? A$3 : !1}"
    proudlydisplaymuxbadge="${(R = t$1.proudlyDisplayMuxBadge) != null ? R : !1}"
    exportparts="${da}"
    onclose="${t$1.onCloseErrorDialog}"
    onfocusin="${t$1.onFocusInErrorDialog}"
  >
    <mux-video
      slot="media"
      inert="${(K$2 = t$1.noHotKeys) != null ? K$2 : !1}"
      target-live-window="${(h$2 = t$1.targetLiveWindow) != null ? h$2 : !1}"
      stream-type="${(ie$2 = z(t$1.streamType)) != null ? ie$2 : !1}"
      crossorigin="${(W$2 = t$1.crossOrigin) != null ? W$2 : ""}"
      playsinline
      autoplay="${(Z$1 = t$1.autoplay) != null ? Z$1 : !1}"
      muted="${(Ie$2 = t$1.muted) != null ? Ie$2 : !1}"
      loop="${(Pe$3 = t$1.loop) != null ? Pe$3 : !1}"
      preload="${(De$2 = t$1.preload) != null ? De$2 : !1}"
      debug="${(Ue$2 = t$1.debug) != null ? Ue$2 : !1}"
      prefer-cmcd="${(Ve$1 = t$1.preferCmcd) != null ? Ve$1 : !1}"
      disable-tracking="${(Be$1 = t$1.disableTracking) != null ? Be$1 : !1}"
      disable-cookies="${(He$2 = t$1.disableCookies) != null ? He$2 : !1}"
      prefer-playback="${(Ke$2 = t$1.preferPlayback) != null ? Ke$2 : !1}"
      start-time="${t$1.startTime != null ? t$1.startTime : !1}"
      beacon-collection-domain="${($e$2 = t$1.beaconCollectionDomain) != null ? $e$2 : !1}"
      player-init-time="${(Ye$2 = t$1.playerInitTime) != null ? Ye$2 : !1}"
      player-software-name="${(Fe$2 = t$1.playerSoftwareName) != null ? Fe$2 : !1}"
      player-software-version="${(We$1 = t$1.playerSoftwareVersion) != null ? We$1 : !1}"
      env-key="${(Ze$1 = t$1.envKey) != null ? Ze$1 : !1}"
      custom-domain="${(Ge$2 = t$1.customDomain) != null ? Ge$2 : !1}"
      src="${t$1.src ? t$1.src : t$1.playbackId ? Yr(t$1) : !1}"
      cast-src="${t$1.src ? t$1.src : t$1.playbackId ? Yr(t$1) : !1}"
      cast-receiver="${(je$1 = t$1.castReceiver) != null ? je$1 : !1}"
      drm-token="${(Xe$2 = (ze$3 = t$1.tokens) == null ? void 0 : ze$3.drm) != null ? Xe$2 : !1}"
      exportparts="video"
      disable-pseudo-ended="${(qe$1 = t$1.disablePseudoEnded) != null ? qe$1 : !1}"
    >
      ${t$1.storyboard ? Q`<track label="thumbnails" default kind="metadata" src="${t$1.storyboard}" />` : Q``}
      <slot></slot>
    </mux-video>
    <slot name="poster" slot="poster">
      <media-poster-image
        part="poster"
        exportparts="poster, img"
        src="${t$1.poster ? t$1.poster : !1}"
        placeholdersrc="${(Qe$2 = t$1.placeholder) != null ? Qe$2 : !1}"
      ></media-poster-image>
    </slot>
  </media-theme>
`;
};
var vt = (t$1) => t$1.charAt(0).toUpperCase() + t$1.slice(1), ua = (t$1, a$2 = !1) => {
	var e$1, i$1;
	if (t$1.muxCode) {
		let r$3 = vt((e$1 = t$1.errorCategory) != null ? e$1 : "video"), n$2 = V((i$1 = t$1.errorCategory) != null ? i$1 : C.VIDEO);
		if (t$1.muxCode === b$1.NETWORK_OFFLINE) return x$1("Your device appears to be offline", a$2);
		if (t$1.muxCode === b$1.NETWORK_TOKEN_EXPIRED) return x$1("{category} URL has expired", a$2).format({ category: r$3 });
		if ([
			b$1.NETWORK_TOKEN_SUB_MISMATCH,
			b$1.NETWORK_TOKEN_AUD_MISMATCH,
			b$1.NETWORK_TOKEN_AUD_MISSING,
			b$1.NETWORK_TOKEN_MALFORMED
		].includes(t$1.muxCode)) return x$1("{category} URL is formatted incorrectly", a$2).format({ category: r$3 });
		if (t$1.muxCode === b$1.NETWORK_TOKEN_MISSING) return x$1("Invalid {categoryName} URL", a$2).format({ categoryName: n$2 });
		if (t$1.muxCode === b$1.NETWORK_NOT_FOUND) return x$1("{category} does not exist", a$2).format({ category: r$3 });
		if (t$1.muxCode === b$1.NETWORK_NOT_READY) {
			let d$2 = t$1.streamType === "live" ? "Live stream" : "Video";
			return x$1("{mediaType} is not currently available", a$2).format({ mediaType: d$2 });
		}
	}
	if (t$1.code) {
		if (t$1.code === f.MEDIA_ERR_NETWORK) return x$1("Network Error", a$2);
		if (t$1.code === f.MEDIA_ERR_DECODE) return x$1("Media Error", a$2);
		if (t$1.code === f.MEDIA_ERR_SRC_NOT_SUPPORTED) return x$1("Source Not Supported", a$2);
	}
	return x$1("Error", a$2);
}, ma = (t$1, a$2 = !1) => {
	var e$1, i$1;
	if (t$1.muxCode) {
		let r$3 = vt((e$1 = t$1.errorCategory) != null ? e$1 : "video"), n$2 = V((i$1 = t$1.errorCategory) != null ? i$1 : C.VIDEO);
		return t$1.muxCode === b$1.NETWORK_OFFLINE ? x$1("Check your internet connection and try reloading this video.", a$2) : t$1.muxCode === b$1.NETWORK_TOKEN_EXPIRED ? x$1("The video’s secured {tokenNamePrefix}-token has expired.", a$2).format({ tokenNamePrefix: n$2 }) : t$1.muxCode === b$1.NETWORK_TOKEN_SUB_MISMATCH ? x$1("The video’s playback ID does not match the one encoded in the {tokenNamePrefix}-token.", a$2).format({ tokenNamePrefix: n$2 }) : t$1.muxCode === b$1.NETWORK_TOKEN_MALFORMED ? x$1("{category} URL is formatted incorrectly", a$2).format({ category: r$3 }) : [b$1.NETWORK_TOKEN_AUD_MISMATCH, b$1.NETWORK_TOKEN_AUD_MISSING].includes(t$1.muxCode) ? x$1("The {tokenNamePrefix}-token is formatted with incorrect information.", a$2).format({ tokenNamePrefix: n$2 }) : [b$1.NETWORK_TOKEN_MISSING, b$1.NETWORK_INVALID_URL].includes(t$1.muxCode) ? x$1("The video URL or {tokenNamePrefix}-token are formatted with incorrect or incomplete information.", a$2).format({ tokenNamePrefix: n$2 }) : t$1.muxCode === b$1.NETWORK_NOT_FOUND ? "" : t$1.message;
	}
	return t$1.code && (t$1.code === f.MEDIA_ERR_NETWORK || t$1.code === f.MEDIA_ERR_DECODE || (t$1.code, f.MEDIA_ERR_SRC_NOT_SUPPORTED)), t$1.message;
}, Tt = (t$1, a$2 = !1) => {
	let e$1 = ua(t$1, a$2).toString(), i$1 = ma(t$1, a$2).toString();
	return {
		title: e$1,
		message: i$1
	};
}, ca = (t$1) => {
	if (t$1.muxCode) {
		if (t$1.muxCode === b$1.NETWORK_TOKEN_EXPIRED) return "403-expired-token.md";
		if (t$1.muxCode === b$1.NETWORK_TOKEN_MALFORMED) return "403-malformatted-token.md";
		if ([b$1.NETWORK_TOKEN_AUD_MISMATCH, b$1.NETWORK_TOKEN_AUD_MISSING].includes(t$1.muxCode)) return "403-incorrect-aud-value.md";
		if (t$1.muxCode === b$1.NETWORK_TOKEN_SUB_MISMATCH) return "403-playback-id-mismatch.md";
		if (t$1.muxCode === b$1.NETWORK_TOKEN_MISSING) return "missing-signed-tokens.md";
		if (t$1.muxCode === b$1.NETWORK_NOT_FOUND) return "404-not-found.md";
		if (t$1.muxCode === b$1.NETWORK_NOT_READY) return "412-not-playable.md";
	}
	if (t$1.code) {
		if (t$1.code === f.MEDIA_ERR_NETWORK) return "";
		if (t$1.code === f.MEDIA_ERR_DECODE) return "media-decode-error.md";
		if (t$1.code === f.MEDIA_ERR_SRC_NOT_SUPPORTED) return "media-src-not-supported.md";
	}
	return "";
}, Re = (t$1, a$2) => {
	let e$1 = ca(t$1);
	return {
		message: t$1.message,
		context: t$1.context,
		file: e$1
	};
};
var Et = `<template id="media-theme-gerwig">
  <style>
    @keyframes pre-play-hide {
      0% {
        transform: scale(1);
        opacity: 1;
      }

      30% {
        transform: scale(0.7);
      }

      100% {
        transform: scale(1.5);
        opacity: 0;
      }
    }

    :host {
      --_primary-color: var(--media-primary-color, #fff);
      --_secondary-color: var(--media-secondary-color, transparent);
      --_accent-color: var(--media-accent-color, #fa50b5);
      --_text-color: var(--media-text-color, #000);

      --media-icon-color: var(--_primary-color);
      --media-control-background: var(--_secondary-color);
      --media-control-hover-background: var(--_accent-color);
      --media-time-buffered-color: rgba(255, 255, 255, 0.4);
      --media-preview-time-text-shadow: none;
      --media-control-height: 14px;
      --media-control-padding: 6px;
      --media-tooltip-container-margin: 6px;
      --media-tooltip-distance: 18px;

      color: var(--_primary-color);
      display: inline-block;
      width: 100%;
      height: 100%;
    }

    :host([audio]) {
      --_secondary-color: var(--media-secondary-color, black);
      --media-preview-time-text-shadow: none;
    }

    :host([audio]) ::slotted([slot='media']) {
      height: 0px;
    }

    :host([audio]) media-loading-indicator {
      display: none;
    }

    :host([audio]) media-controller {
      background: transparent;
    }

    :host([audio]) media-controller::part(vertical-layer) {
      background: transparent;
    }

    :host([audio]) media-control-bar {
      width: 100%;
      background-color: var(--media-control-background);
    }

    /*
     * 0.433s is the transition duration for VTT Regions.
     * Borrowed here, so the captions don't move too fast.
     */
    media-controller {
      --media-webkit-text-track-transform: translateY(0) scale(0.98);
      --media-webkit-text-track-transition: transform 0.433s ease-out 0.3s;
    }
    media-controller:is([mediapaused], :not([userinactive])) {
      --media-webkit-text-track-transform: translateY(-50px) scale(0.98);
      --media-webkit-text-track-transition: transform 0.15s ease;
    }

    /*
     * CSS specific to iOS devices.
     * See: https://stackoverflow.com/questions/30102792/css-media-query-to-target-only-ios-devices/60220757#60220757
     */
    @supports (-webkit-touch-callout: none) {
      /* Disable subtitle adjusting for iOS Safari */
      media-controller[mediaisfullscreen] {
        --media-webkit-text-track-transform: unset;
        --media-webkit-text-track-transition: unset;
      }
    }

    media-time-range {
      --media-box-padding-left: 6px;
      --media-box-padding-right: 6px;
      --media-range-bar-color: var(--_accent-color);
      --media-time-range-buffered-color: var(--_primary-color);
      --media-range-track-color: transparent;
      --media-range-track-background: rgba(255, 255, 255, 0.4);
      --media-range-thumb-background: radial-gradient(
        circle,
        #000 0%,
        #000 25%,
        var(--_accent-color) 25%,
        var(--_accent-color)
      );
      --media-range-thumb-width: 12px;
      --media-range-thumb-height: 12px;
      --media-range-thumb-transform: scale(0);
      --media-range-thumb-transition: transform 0.3s;
      --media-range-thumb-opacity: 1;
      --media-preview-background: var(--_primary-color);
      --media-box-arrow-background: var(--_primary-color);
      --media-preview-thumbnail-border: 5px solid var(--_primary-color);
      --media-preview-border-radius: 5px;
      --media-text-color: var(--_text-color);
      --media-control-hover-background: transparent;
      --media-preview-chapter-text-shadow: none;
      color: var(--_accent-color);
      padding: 0 6px;
    }

    :host([audio]) media-time-range {
      --media-preview-time-padding: 1.5px 6px;
      --media-preview-box-margin: 0 0 -5px;
    }

    media-time-range:hover {
      --media-range-thumb-transform: scale(1);
    }

    media-preview-thumbnail {
      border-bottom-width: 0;
    }

    [part~='menu'] {
      border-radius: 2px;
      border: 1px solid rgba(0, 0, 0, 0.1);
      bottom: 50px;
      padding: 2.5px 10px;
    }

    [part~='menu']::part(indicator) {
      fill: var(--_accent-color);
    }

    [part~='menu']::part(menu-item) {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      padding: 6px 10px;
      min-height: 34px;
    }

    [part~='menu']::part(checked) {
      font-weight: 700;
    }

    media-captions-menu,
    media-rendition-menu,
    media-audio-track-menu,
    media-playback-rate-menu {
      position: absolute; /* ensure they don't take up space in DOM on load */
      --media-menu-background: var(--_primary-color);
      --media-menu-item-checked-background: transparent;
      --media-text-color: var(--_text-color);
      --media-menu-item-hover-background: transparent;
      --media-menu-item-hover-outline: var(--_accent-color) solid 1px;
    }

    media-rendition-menu {
      min-width: 140px;
    }

    /* The icon is a circle so make it 16px high instead of 14px for more balance. */
    media-audio-track-menu-button {
      --media-control-padding: 5px;
      --media-control-height: 16px;
    }

    media-playback-rate-menu-button {
      --media-control-padding: 6px 3px;
      min-width: 4.4ch;
    }

    media-playback-rate-menu {
      --media-menu-flex-direction: row;
      --media-menu-item-checked-background: var(--_accent-color);
      --media-menu-item-checked-indicator-display: none;
      margin-right: 6px;
      padding: 0;
      --media-menu-gap: 0.25em;
    }

    media-playback-rate-menu[part~='menu']::part(menu-item) {
      padding: 6px 6px 6px 8px;
    }

    media-playback-rate-menu[part~='menu']::part(checked) {
      color: #fff;
    }

    :host(:not([audio])) media-time-range {
      /* Adding px is required here for calc() */
      --media-range-padding: 0px;
      background: transparent;
      z-index: 10;
      height: 10px;
      bottom: -3px;
      width: 100%;
    }

    media-control-bar :is([role='button'], [role='switch'], button) {
      line-height: 0;
    }

    media-control-bar :is([part*='button'], [part*='range'], [part*='display']) {
      border-radius: 3px;
    }

    .spacer {
      flex-grow: 1;
      background-color: var(--media-control-background, rgba(20, 20, 30, 0.7));
    }

    media-control-bar[slot~='top-chrome'] {
      min-height: 42px;
      pointer-events: none;
    }

    media-control-bar {
      --gradient-steps:
        hsl(0 0% 0% / 0) 0%, hsl(0 0% 0% / 0.013) 8.1%, hsl(0 0% 0% / 0.049) 15.5%, hsl(0 0% 0% / 0.104) 22.5%,
        hsl(0 0% 0% / 0.175) 29%, hsl(0 0% 0% / 0.259) 35.3%, hsl(0 0% 0% / 0.352) 41.2%, hsl(0 0% 0% / 0.45) 47.1%,
        hsl(0 0% 0% / 0.55) 52.9%, hsl(0 0% 0% / 0.648) 58.8%, hsl(0 0% 0% / 0.741) 64.7%, hsl(0 0% 0% / 0.825) 71%,
        hsl(0 0% 0% / 0.896) 77.5%, hsl(0 0% 0% / 0.951) 84.5%, hsl(0 0% 0% / 0.987) 91.9%, hsl(0 0% 0%) 100%;
    }

    :host([title]) media-control-bar[slot='top-chrome']::before,
    :host([videotitle]) media-control-bar[slot='top-chrome']::before {
      content: '';
      position: absolute;
      width: 100%;
      padding-bottom: min(100px, 25%);
      background: linear-gradient(to top, var(--gradient-steps));
      opacity: 0.8;
      pointer-events: none;
    }

    :host(:not([audio])) media-control-bar[part~='bottom']::before {
      content: '';
      position: absolute;
      width: 100%;
      bottom: 0;
      left: 0;
      padding-bottom: min(100px, 25%);
      background: linear-gradient(to bottom, var(--gradient-steps));
      opacity: 0.8;
      z-index: 1;
      pointer-events: none;
    }

    media-control-bar[part~='bottom'] > * {
      z-index: 20;
    }

    media-control-bar[part~='bottom'] {
      padding: 6px 6px;
    }

    media-control-bar[slot~='top-chrome'] > * {
      --media-control-background: transparent;
      --media-control-hover-background: transparent;
      position: relative;
    }

    media-controller::part(vertical-layer) {
      transition: background-color 1s;
    }

    media-controller:is([mediapaused], :not([userinactive]))::part(vertical-layer) {
      background-color: var(--controls-backdrop-color, var(--controls, transparent));
      transition: background-color 0.25s;
    }

    .center-controls {
      --media-button-icon-width: 100%;
      --media-button-icon-height: auto;
      --media-tooltip-display: none;
      pointer-events: none;
      width: 100%;
      display: flex;
      flex-flow: row;
      align-items: center;
      justify-content: center;
      filter: drop-shadow(0 0 2px rgb(0 0 0 / 0.25)) drop-shadow(0 0 6px rgb(0 0 0 / 0.25));
      paint-order: stroke;
      stroke: rgba(102, 102, 102, 1);
      stroke-width: 0.3px;
      text-shadow:
        0 0 2px rgb(0 0 0 / 0.25),
        0 0 6px rgb(0 0 0 / 0.25);
    }

    .center-controls media-play-button {
      --media-control-background: transparent;
      --media-control-hover-background: transparent;
      --media-control-padding: 0;
      width: 40px;
    }

    [breakpointsm] .center-controls media-play-button {
      width: 90px;
      height: 90px;
      border-radius: 50%;
      transition: background 0.4s;
      padding: 24px;
      --media-control-background: #000;
      --media-control-hover-background: var(--_accent-color);
    }

    .center-controls media-seek-backward-button,
    .center-controls media-seek-forward-button {
      --media-control-background: transparent;
      --media-control-hover-background: transparent;
      padding: 0;
      margin: 0 20px;
      width: max(33px, min(8%, 40px));
    }

    [breakpointsm]:not([audio]) .center-controls.pre-playback {
      display: grid;
      align-items: initial;
      justify-content: initial;
      height: 100%;
      overflow: hidden;
    }

    [breakpointsm]:not([audio]) .center-controls.pre-playback media-play-button {
      place-self: var(--_pre-playback-place, center);
      grid-area: 1 / 1;
      margin: 16px;
    }

    /* Show and hide controls or pre-playback state */

    [breakpointsm]:is([mediahasplayed], :not([mediapaused])):not([audio])
      .center-controls.pre-playback
      media-play-button {
      /* Using \`forwards\` would lead to a laggy UI after the animation got in the end state */
      animation: 0.3s linear pre-play-hide;
      opacity: 0;
      pointer-events: none;
    }

    .autoplay-unmute {
      --media-control-hover-background: transparent;
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      filter: drop-shadow(0 0 2px rgb(0 0 0 / 0.25)) drop-shadow(0 0 6px rgb(0 0 0 / 0.25));
    }

    .autoplay-unmute-btn {
      --media-control-height: 16px;
      border-radius: 8px;
      background: #000;
      color: var(--_primary-color);
      display: flex;
      align-items: center;
      padding: 8px 16px;
      font-size: 18px;
      font-weight: 500;
      cursor: pointer;
    }

    .autoplay-unmute-btn:hover {
      background: var(--_accent-color);
    }

    [breakpointsm] .autoplay-unmute-btn {
      --media-control-height: 30px;
      padding: 14px 24px;
      font-size: 26px;
    }

    .autoplay-unmute-btn svg {
      margin: 0 6px 0 0;
    }

    [breakpointsm] .autoplay-unmute-btn svg {
      margin: 0 10px 0 0;
    }

    media-controller:not([audio]):not([mediahasplayed]) *:is(media-control-bar, media-time-range) {
      display: none;
    }

    media-error-dialog:not([mediaerrorcode]) {
      opacity: 0;
    }

    media-loading-indicator {
      --media-loading-icon-width: 100%;
      --media-button-icon-height: auto;
      display: var(--media-control-display, var(--media-loading-indicator-display, flex));
      pointer-events: none;
      position: absolute;
      width: min(15%, 150px);
      flex-flow: row;
      align-items: center;
      justify-content: center;
    }

    /* Intentionally don't target the div for transition but the children
     of the div. Prevents messing with media-chrome's autohide feature. */
    media-loading-indicator + div * {
      transition: opacity 0.15s;
      opacity: 1;
    }

    media-loading-indicator[medialoading]:not([mediapaused]) ~ div > * {
      opacity: 0;
      transition-delay: 400ms;
    }

    media-volume-range {
      width: min(100%, 100px);
      --media-range-padding-left: 10px;
      --media-range-padding-right: 10px;
      --media-range-thumb-width: 12px;
      --media-range-thumb-height: 12px;
      --media-range-thumb-background: radial-gradient(
        circle,
        #000 0%,
        #000 25%,
        var(--_primary-color) 25%,
        var(--_primary-color)
      );
      --media-control-hover-background: none;
    }

    media-time-display {
      white-space: nowrap;
    }

    /* Generic style for explicitly disabled controls */
    media-control-bar[part~='bottom'] [disabled],
    media-control-bar[part~='bottom'] [aria-disabled='true'] {
      opacity: 60%;
      cursor: not-allowed;
    }

    media-text-display {
      --media-font-size: 16px;
      --media-control-padding: 14px;
      font-weight: 500;
    }

    media-play-button.animated *:is(g, path) {
      transition: all 0.3s;
    }

    media-play-button.animated[mediapaused] .pause-icon-pt1 {
      opacity: 0;
    }

    media-play-button.animated[mediapaused] .pause-icon-pt2 {
      transform-origin: center center;
      transform: scaleY(0);
    }

    media-play-button.animated[mediapaused] .play-icon {
      clip-path: inset(0 0 0 0);
    }

    media-play-button.animated:not([mediapaused]) .play-icon {
      clip-path: inset(0 0 0 100%);
    }

    media-seek-forward-button,
    media-seek-backward-button {
      --media-font-weight: 400;
    }

    .mute-icon {
      display: inline-block;
    }

    .mute-icon :is(path, g) {
      transition: opacity 0.5s;
    }

    .muted {
      opacity: 0;
    }

    media-mute-button[mediavolumelevel='low'] :is(.volume-medium, .volume-high),
    media-mute-button[mediavolumelevel='medium'] :is(.volume-high) {
      opacity: 0;
    }

    media-mute-button[mediavolumelevel='off'] .unmuted {
      opacity: 0;
    }

    media-mute-button[mediavolumelevel='off'] .muted {
      opacity: 1;
    }

    /**
     * Our defaults for these buttons are to hide them at small sizes
     * users can override this with CSS
     */
    media-controller:not([breakpointsm]):not([audio]) {
      --bottom-play-button: none;
      --bottom-seek-backward-button: none;
      --bottom-seek-forward-button: none;
      --bottom-time-display: none;
      --bottom-playback-rate-menu-button: none;
      --bottom-pip-button: none;
    }

    [part='mux-badge'] {
      position: absolute;
      bottom: 10px;
      right: 10px;
      z-index: 2;
      opacity: 0.6;
      transition:
        opacity 0.2s ease-in-out,
        bottom 0.2s ease-in-out;
    }

    [part='mux-badge']:hover {
      opacity: 1;
    }

    [part='mux-badge'] a {
      font-size: 14px;
      font-family: var(--_font-family);
      color: var(--_primary-color);
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    [part='mux-badge'] .mux-badge-text {
      transition: opacity 0.5s ease-in-out;
      opacity: 0;
    }

    [part='mux-badge'] .mux-badge-logo {
      width: 40px;
      height: auto;
      display: inline-block;
    }

    [part='mux-badge'] .mux-badge-logo svg {
      width: 100%;
      height: 100%;
      fill: white;
    }

    media-controller:not([userinactive]):not([mediahasplayed]) [part='mux-badge'],
    media-controller:not([userinactive]) [part='mux-badge'],
    media-controller[mediahasplayed][mediapaused] [part='mux-badge'] {
      transition: bottom 0.1s ease-in-out;
    }

    media-controller[userinactive]:not([mediapaused]) [part='mux-badge'] {
      transition: bottom 0.2s ease-in-out 0.62s;
    }

    media-controller:not([userinactive]) [part='mux-badge'] .mux-badge-text,
    media-controller[mediahasplayed][mediapaused] [part='mux-badge'] .mux-badge-text {
      opacity: 1;
    }

    media-controller[userinactive]:not([mediapaused]) [part='mux-badge'] .mux-badge-text {
      opacity: 0;
    }

    media-controller[userinactive]:not([mediapaused]) [part='mux-badge'] {
      bottom: 10px;
    }

    media-controller:not([userinactive]):not([mediahasplayed]) [part='mux-badge'] {
      bottom: 10px;
    }

    media-controller:not([userinactive])[mediahasplayed] [part='mux-badge'],
    media-controller[mediahasplayed][mediapaused] [part='mux-badge'] {
      bottom: calc(28px + var(--media-control-height, 0px) + var(--media-control-padding, 0px) * 2);
    }
  </style>

  <template partial="TitleDisplay">
    <template if="videotitle">
      <template if="videotitle != true">
        <media-text-display part="top title display" class="title-display">{{videotitle}}</media-text-display>
      </template>
    </template>
    <template if="!videotitle">
      <template if="title">
        <media-text-display part="top title display" class="title-display">{{title}}</media-text-display>
      </template>
    </template>
  </template>

  <template partial="PlayButton">
    <media-play-button
      part="{{section ?? 'bottom'}} play button"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
      class="animated"
    >
      <svg aria-hidden="true" viewBox="0 0 18 14" slot="icon">
        <g class="play-icon">
          <path
            d="M15.5987 6.2911L3.45577 0.110898C2.83667 -0.204202 2.06287 0.189698 2.06287 0.819798V13.1802C2.06287 13.8103 2.83667 14.2042 3.45577 13.8891L15.5987 7.7089C16.2178 7.3938 16.2178 6.6061 15.5987 6.2911Z"
          />
        </g>
        <g class="pause-icon">
          <path
            class="pause-icon-pt1"
            d="M5.90709 0H2.96889C2.46857 0 2.06299 0.405585 2.06299 0.9059V13.0941C2.06299 13.5944 2.46857 14 2.96889 14H5.90709C6.4074 14 6.81299 13.5944 6.81299 13.0941V0.9059C6.81299 0.405585 6.4074 0 5.90709 0Z"
          />
          <path
            class="pause-icon-pt2"
            d="M15.1571 0H12.2189C11.7186 0 11.313 0.405585 11.313 0.9059V13.0941C11.313 13.5944 11.7186 14 12.2189 14H15.1571C15.6574 14 16.063 13.5944 16.063 13.0941V0.9059C16.063 0.405585 15.6574 0 15.1571 0Z"
          />
        </g>
      </svg>
    </media-play-button>
  </template>

  <template partial="PrePlayButton">
    <media-play-button
      part="{{section ?? 'center'}} play button pre-play"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    >
      <svg aria-hidden="true" viewBox="0 0 18 14" slot="icon" style="transform: translate(3px, 0)">
        <path
          d="M15.5987 6.2911L3.45577 0.110898C2.83667 -0.204202 2.06287 0.189698 2.06287 0.819798V13.1802C2.06287 13.8103 2.83667 14.2042 3.45577 13.8891L15.5987 7.7089C16.2178 7.3938 16.2178 6.6061 15.5987 6.2911Z"
        />
      </svg>
    </media-play-button>
  </template>

  <template partial="SeekBackwardButton">
    <media-seek-backward-button
      seekoffset="{{backwardseekoffset}}"
      part="{{section ?? 'bottom'}} seek-backward button"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    >
      <svg viewBox="0 0 22 14" aria-hidden="true" slot="icon">
        <path
          d="M3.65 2.07888L0.0864 6.7279C-0.0288 6.87812 -0.0288 7.12188 0.0864 7.2721L3.65 11.9211C3.7792 12.0896 4 11.9703 4 11.7321V2.26787C4 2.02968 3.7792 1.9104 3.65 2.07888Z"
        />
        <text transform="translate(6 12)" style="font-size: 14px; font-family: 'ArialMT', 'Arial'">
          {{backwardseekoffset}}
        </text>
      </svg>
    </media-seek-backward-button>
  </template>

  <template partial="SeekForwardButton">
    <media-seek-forward-button
      seekoffset="{{forwardseekoffset}}"
      part="{{section ?? 'bottom'}} seek-forward button"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    >
      <svg viewBox="0 0 22 14" aria-hidden="true" slot="icon">
        <g>
          <text transform="translate(-1 12)" style="font-size: 14px; font-family: 'ArialMT', 'Arial'">
            {{forwardseekoffset}}
          </text>
          <path
            d="M18.35 11.9211L21.9136 7.2721C22.0288 7.12188 22.0288 6.87812 21.9136 6.7279L18.35 2.07888C18.2208 1.91041 18 2.02968 18 2.26787V11.7321C18 11.9703 18.2208 12.0896 18.35 11.9211Z"
          />
        </g>
      </svg>
    </media-seek-forward-button>
  </template>

  <template partial="MuteButton">
    <media-mute-button part="bottom mute button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg viewBox="0 0 18 14" slot="icon" class="mute-icon" aria-hidden="true">
        <g class="unmuted">
          <path
            d="M6.76786 1.21233L3.98606 3.98924H1.19937C0.593146 3.98924 0.101743 4.51375 0.101743 5.1607V6.96412L0 6.99998L0.101743 7.03583V8.83926C0.101743 9.48633 0.593146 10.0108 1.19937 10.0108H3.98606L6.76773 12.7877C7.23561 13.2547 8 12.9007 8 12.2171V1.78301C8 1.09925 7.23574 0.745258 6.76786 1.21233Z"
          />
          <path
            class="volume-low"
            d="M10 3.54781C10.7452 4.55141 11.1393 5.74511 11.1393 6.99991C11.1393 8.25471 10.7453 9.44791 10 10.4515L10.7988 11.0496C11.6734 9.87201 12.1356 8.47161 12.1356 6.99991C12.1356 5.52821 11.6735 4.12731 10.7988 2.94971L10 3.54781Z"
          />
          <path
            class="volume-medium"
            d="M12.3778 2.40086C13.2709 3.76756 13.7428 5.35806 13.7428 7.00026C13.7428 8.64246 13.2709 10.233 12.3778 11.5992L13.2106 12.1484C14.2107 10.6185 14.739 8.83796 14.739 7.00016C14.739 5.16236 14.2107 3.38236 13.2106 1.85156L12.3778 2.40086Z"
          />
          <path
            class="volume-high"
            d="M15.5981 0.75L14.7478 1.2719C15.7937 2.9919 16.3468 4.9723 16.3468 7C16.3468 9.0277 15.7937 11.0082 14.7478 12.7281L15.5981 13.25C16.7398 11.3722 17.343 9.211 17.343 7C17.343 4.789 16.7398 2.6268 15.5981 0.75Z"
          />
        </g>
        <g class="muted">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M4.39976 4.98924H1.19937C1.19429 4.98924 1.17777 4.98961 1.15296 5.01609C1.1271 5.04369 1.10174 5.09245 1.10174 5.1607V8.83926C1.10174 8.90761 1.12714 8.95641 1.15299 8.984C1.17779 9.01047 1.1943 9.01084 1.19937 9.01084H4.39977L7 11.6066V2.39357L4.39976 4.98924ZM7.47434 1.92006C7.4743 1.9201 7.47439 1.92002 7.47434 1.92006V1.92006ZM6.76773 12.7877L3.98606 10.0108H1.19937C0.593146 10.0108 0.101743 9.48633 0.101743 8.83926V7.03583L0 6.99998L0.101743 6.96412V5.1607C0.101743 4.51375 0.593146 3.98924 1.19937 3.98924H3.98606L6.76786 1.21233C7.23574 0.745258 8 1.09925 8 1.78301V12.2171C8 12.9007 7.23561 13.2547 6.76773 12.7877Z"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M15.2677 9.30323C15.463 9.49849 15.7796 9.49849 15.9749 9.30323C16.1701 9.10796 16.1701 8.79138 15.9749 8.59612L14.2071 6.82841L15.9749 5.06066C16.1702 4.8654 16.1702 4.54882 15.9749 4.35355C15.7796 4.15829 15.4631 4.15829 15.2678 4.35355L13.5 6.1213L11.7322 4.35348C11.537 4.15822 11.2204 4.15822 11.0251 4.35348C10.8298 4.54874 10.8298 4.86532 11.0251 5.06058L12.7929 6.82841L11.0251 8.59619C10.8299 8.79146 10.8299 9.10804 11.0251 9.3033C11.2204 9.49856 11.537 9.49856 11.7323 9.3033L13.5 7.53552L15.2677 9.30323Z"
          />
        </g>
      </svg>
    </media-mute-button>
  </template>

  <template partial="PipButton">
    <media-pip-button part="bottom pip button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg viewBox="0 0 18 14" aria-hidden="true" slot="icon">
        <path
          d="M15.9891 0H2.011C0.9004 0 0 0.9003 0 2.0109V11.989C0 13.0996 0.9004 14 2.011 14H15.9891C17.0997 14 18 13.0997 18 11.9891V2.0109C18 0.9003 17.0997 0 15.9891 0ZM17 11.9891C17 12.5465 16.5465 13 15.9891 13H2.011C1.4536 13 1.0001 12.5465 1.0001 11.9891V2.0109C1.0001 1.4535 1.4536 0.9999 2.011 0.9999H15.9891C16.5465 0.9999 17 1.4535 17 2.0109V11.9891Z"
        />
        <path
          d="M15.356 5.67822H8.19523C8.03253 5.67822 7.90063 5.81012 7.90063 5.97282V11.3836C7.90063 11.5463 8.03253 11.6782 8.19523 11.6782H15.356C15.5187 11.6782 15.6506 11.5463 15.6506 11.3836V5.97282C15.6506 5.81012 15.5187 5.67822 15.356 5.67822Z"
        />
      </svg>
    </media-pip-button>
  </template>

  <template partial="CaptionsMenu">
    <media-captions-menu-button part="bottom captions button">
      <svg aria-hidden="true" viewBox="0 0 18 14" slot="on">
        <path
          d="M15.989 0H2.011C0.9004 0 0 0.9003 0 2.0109V11.9891C0 13.0997 0.9004 14 2.011 14H15.989C17.0997 14 18 13.0997 18 11.9891V2.0109C18 0.9003 17.0997 0 15.989 0ZM4.2292 8.7639C4.5954 9.1902 5.0935 9.4031 5.7233 9.4031C6.1852 9.4031 6.5544 9.301 6.8302 9.0969C7.1061 8.8933 7.2863 8.614 7.3702 8.26H8.4322C8.3062 8.884 8.0093 9.3733 7.5411 9.7273C7.0733 10.0813 6.4703 10.2581 5.732 10.2581C5.108 10.2581 4.5699 10.1219 4.1168 9.8489C3.6637 9.5759 3.3141 9.1946 3.0685 8.7058C2.8224 8.2165 2.6994 7.6511 2.6994 7.009C2.6994 6.3611 2.8224 5.7927 3.0685 5.3034C3.3141 4.8146 3.6637 4.4323 4.1168 4.1559C4.5699 3.88 5.108 3.7418 5.732 3.7418C6.4703 3.7418 7.0733 3.922 7.5411 4.2818C8.0094 4.6422 8.3062 5.1461 8.4322 5.794H7.3702C7.2862 5.4283 7.106 5.1368 6.8302 4.921C6.5544 4.7052 6.1852 4.5968 5.7233 4.5968C5.0934 4.5968 4.5954 4.8116 4.2292 5.2404C3.8635 5.6696 3.6804 6.259 3.6804 7.009C3.6804 7.7531 3.8635 8.3381 4.2292 8.7639ZM11.0974 8.7639C11.4636 9.1902 11.9617 9.4031 12.5915 9.4031C13.0534 9.4031 13.4226 9.301 13.6984 9.0969C13.9743 8.8933 14.1545 8.614 14.2384 8.26H15.3004C15.1744 8.884 14.8775 9.3733 14.4093 9.7273C13.9415 10.0813 13.3385 10.2581 12.6002 10.2581C11.9762 10.2581 11.4381 10.1219 10.985 9.8489C10.5319 9.5759 10.1823 9.1946 9.9367 8.7058C9.6906 8.2165 9.5676 7.6511 9.5676 7.009C9.5676 6.3611 9.6906 5.7927 9.9367 5.3034C10.1823 4.8146 10.5319 4.4323 10.985 4.1559C11.4381 3.88 11.9762 3.7418 12.6002 3.7418C13.3385 3.7418 13.9415 3.922 14.4093 4.2818C14.8776 4.6422 15.1744 5.1461 15.3004 5.794H14.2384C14.1544 5.4283 13.9742 5.1368 13.6984 4.921C13.4226 4.7052 13.0534 4.5968 12.5915 4.5968C11.9616 4.5968 11.4636 4.8116 11.0974 5.2404C10.7317 5.6696 10.5486 6.259 10.5486 7.009C10.5486 7.7531 10.7317 8.3381 11.0974 8.7639Z"
        />
      </svg>
      <svg aria-hidden="true" viewBox="0 0 18 14" slot="off">
        <path
          d="M5.73219 10.258C5.10819 10.258 4.57009 10.1218 4.11699 9.8488C3.66389 9.5758 3.31429 9.1945 3.06869 8.7057C2.82259 8.2164 2.69958 7.651 2.69958 7.0089C2.69958 6.361 2.82259 5.7926 3.06869 5.3033C3.31429 4.8145 3.66389 4.4322 4.11699 4.1558C4.57009 3.8799 5.10819 3.7417 5.73219 3.7417C6.47049 3.7417 7.07348 3.9219 7.54128 4.2817C8.00958 4.6421 8.30638 5.146 8.43238 5.7939H7.37039C7.28639 5.4282 7.10618 5.1367 6.83039 4.9209C6.55459 4.7051 6.18538 4.5967 5.72348 4.5967C5.09358 4.5967 4.59559 4.8115 4.22939 5.2403C3.86369 5.6695 3.68058 6.2589 3.68058 7.0089C3.68058 7.753 3.86369 8.338 4.22939 8.7638C4.59559 9.1901 5.09368 9.403 5.72348 9.403C6.18538 9.403 6.55459 9.3009 6.83039 9.0968C7.10629 8.8932 7.28649 8.6139 7.37039 8.2599H8.43238C8.30638 8.8839 8.00948 9.3732 7.54128 9.7272C7.07348 10.0812 6.47049 10.258 5.73219 10.258Z"
        />
        <path
          d="M12.6003 10.258C11.9763 10.258 11.4382 10.1218 10.9851 9.8488C10.532 9.5758 10.1824 9.1945 9.93685 8.7057C9.69075 8.2164 9.56775 7.651 9.56775 7.0089C9.56775 6.361 9.69075 5.7926 9.93685 5.3033C10.1824 4.8145 10.532 4.4322 10.9851 4.1558C11.4382 3.8799 11.9763 3.7417 12.6003 3.7417C13.3386 3.7417 13.9416 3.9219 14.4094 4.2817C14.8777 4.6421 15.1745 5.146 15.3005 5.7939H14.2385C14.1545 5.4282 13.9743 5.1367 13.6985 4.9209C13.4227 4.7051 13.0535 4.5967 12.5916 4.5967C11.9617 4.5967 11.4637 4.8115 11.0975 5.2403C10.7318 5.6695 10.5487 6.2589 10.5487 7.0089C10.5487 7.753 10.7318 8.338 11.0975 8.7638C11.4637 9.1901 11.9618 9.403 12.5916 9.403C13.0535 9.403 13.4227 9.3009 13.6985 9.0968C13.9744 8.8932 14.1546 8.6139 14.2385 8.2599H15.3005C15.1745 8.8839 14.8776 9.3732 14.4094 9.7272C13.9416 10.0812 13.3386 10.258 12.6003 10.258Z"
        />
        <path
          d="M15.9891 1C16.5465 1 17 1.4535 17 2.011V11.9891C17 12.5465 16.5465 13 15.9891 13H2.0109C1.4535 13 1 12.5465 1 11.9891V2.0109C1 1.4535 1.4535 0.9999 2.0109 0.9999L15.9891 1ZM15.9891 0H2.0109C0.9003 0 0 0.9003 0 2.0109V11.9891C0 13.0997 0.9003 14 2.0109 14H15.9891C17.0997 14 18 13.0997 18 11.9891V2.0109C18 0.9003 17.0997 0 15.9891 0Z"
        />
      </svg>
    </media-captions-menu-button>
    <media-captions-menu
      hidden
      anchor="auto"
      part="bottom captions menu"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
      exportparts="menu-item"
    >
      <div slot="checked-indicator">
        <style>
          .indicator {
            position: relative;
            top: 1px;
            width: 0.9em;
            height: auto;
            fill: var(--_accent-color);
            margin-right: 5px;
          }

          [aria-checked='false'] .indicator {
            display: none;
          }
        </style>
        <svg viewBox="0 0 14 18" class="indicator">
          <path
            d="M12.252 3.48c-.115.033-.301.161-.425.291-.059.063-1.407 1.815-2.995 3.894s-2.897 3.79-2.908 3.802c-.013.014-.661-.616-1.672-1.624-.908-.905-1.702-1.681-1.765-1.723-.401-.27-.783-.211-1.176.183a1.285 1.285 0 0 0-.261.342.582.582 0 0 0-.082.35c0 .165.01.205.08.35.075.153.213.296 2.182 2.271 1.156 1.159 2.17 2.159 2.253 2.222.189.143.338.196.539.194.203-.003.412-.104.618-.299.205-.193 6.7-8.693 6.804-8.903a.716.716 0 0 0 .085-.345c.01-.179.005-.203-.062-.339-.124-.252-.45-.531-.746-.639a.784.784 0 0 0-.469-.027"
            fill-rule="evenodd"
          />
        </svg></div
    ></media-captions-menu>
  </template>

  <template partial="AirplayButton">
    <media-airplay-button part="bottom airplay button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg viewBox="0 0 18 14" aria-hidden="true" slot="icon">
        <path
          d="M16.1383 0H1.8618C0.8335 0 0 0.8335 0 1.8617V10.1382C0 11.1664 0.8335 12 1.8618 12H3.076C3.1204 11.9433 3.1503 11.8785 3.2012 11.826L4.004 11H1.8618C1.3866 11 1 10.6134 1 10.1382V1.8617C1 1.3865 1.3866 0.9999 1.8618 0.9999H16.1383C16.6135 0.9999 17.0001 1.3865 17.0001 1.8617V10.1382C17.0001 10.6134 16.6135 11 16.1383 11H13.9961L14.7989 11.826C14.8499 11.8785 14.8798 11.9432 14.9241 12H16.1383C17.1665 12 18.0001 11.1664 18.0001 10.1382V1.8617C18 0.8335 17.1665 0 16.1383 0Z"
        />
        <path
          d="M9.55061 8.21903C9.39981 8.06383 9.20001 7.98633 9.00011 7.98633C8.80021 7.98633 8.60031 8.06383 8.44951 8.21903L4.09771 12.697C3.62471 13.1838 3.96961 13.9998 4.64831 13.9998H13.3518C14.0304 13.9998 14.3754 13.1838 13.9023 12.697L9.55061 8.21903Z"
        />
      </svg>
    </media-airplay-button>
  </template>

  <template partial="FullscreenButton">
    <media-fullscreen-button part="bottom fullscreen button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg viewBox="0 0 18 14" aria-hidden="true" slot="enter">
        <path
          d="M1.00745 4.39539L1.01445 1.98789C1.01605 1.43049 1.47085 0.978289 2.02835 0.979989L6.39375 0.992589L6.39665 -0.007411L2.03125 -0.020011C0.920646 -0.023211 0.0176463 0.874489 0.0144463 1.98509L0.00744629 4.39539H1.00745Z"
        />
        <path
          d="M17.0144 2.03431L17.0076 4.39541H18.0076L18.0144 2.03721C18.0176 0.926712 17.1199 0.0237125 16.0093 0.0205125L11.6439 0.0078125L11.641 1.00781L16.0064 1.02041C16.5638 1.02201 17.016 1.47681 17.0144 2.03431Z"
        />
        <path
          d="M16.9925 9.60498L16.9855 12.0124C16.9839 12.5698 16.5291 13.022 15.9717 13.0204L11.6063 13.0078L11.6034 14.0078L15.9688 14.0204C17.0794 14.0236 17.9823 13.1259 17.9855 12.0153L17.9925 9.60498H16.9925Z"
        />
        <path
          d="M0.985626 11.9661L0.992426 9.60498H-0.0074737L-0.0142737 11.9632C-0.0174737 13.0738 0.880226 13.9767 1.99083 13.98L6.35623 13.9926L6.35913 12.9926L1.99373 12.98C1.43633 12.9784 0.983926 12.5236 0.985626 11.9661Z"
        />
      </svg>
      <svg viewBox="0 0 18 14" aria-hidden="true" slot="exit">
        <path
          d="M5.39655 -0.0200195L5.38955 2.38748C5.38795 2.94488 4.93315 3.39708 4.37565 3.39538L0.0103463 3.38278L0.00744629 4.38278L4.37285 4.39538C5.48345 4.39858 6.38635 3.50088 6.38965 2.39028L6.39665 -0.0200195H5.39655Z"
        />
        <path
          d="M12.6411 2.36891L12.6479 0.0078125H11.6479L11.6411 2.36601C11.6379 3.47651 12.5356 4.37951 13.6462 4.38271L18.0116 4.39531L18.0145 3.39531L13.6491 3.38271C13.0917 3.38111 12.6395 2.92641 12.6411 2.36891Z"
        />
        <path
          d="M12.6034 14.0204L12.6104 11.613C12.612 11.0556 13.0668 10.6034 13.6242 10.605L17.9896 10.6176L17.9925 9.61759L13.6271 9.60499C12.5165 9.60179 11.6136 10.4995 11.6104 11.6101L11.6034 14.0204H12.6034Z"
        />
        <path
          d="M5.359 11.6315L5.3522 13.9926H6.3522L6.359 11.6344C6.3622 10.5238 5.4645 9.62088 4.3539 9.61758L-0.0115043 9.60498L-0.0144043 10.605L4.351 10.6176C4.9084 10.6192 5.3607 11.074 5.359 11.6315Z"
        />
      </svg>
    </media-fullscreen-button>
  </template>

  <template partial="CastButton">
    <media-cast-button part="bottom cast button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <svg viewBox="0 0 18 14" aria-hidden="true" slot="enter">
        <path
          d="M16.0072 0H2.0291C0.9185 0 0.0181 0.9003 0.0181 2.011V5.5009C0.357 5.5016 0.6895 5.5275 1.0181 5.5669V2.011C1.0181 1.4536 1.4716 1 2.029 1H16.0072C16.5646 1 17.0181 1.4536 17.0181 2.011V11.9891C17.0181 12.5465 16.5646 13 16.0072 13H8.4358C8.4746 13.3286 8.4999 13.6611 8.4999 13.9999H16.0071C17.1177 13.9999 18.018 13.0996 18.018 11.989V2.011C18.0181 0.9003 17.1178 0 16.0072 0ZM0 6.4999V7.4999C3.584 7.4999 6.5 10.4159 6.5 13.9999H7.5C7.5 9.8642 4.1357 6.4999 0 6.4999ZM0 8.7499V9.7499C2.3433 9.7499 4.25 11.6566 4.25 13.9999H5.25C5.25 11.1049 2.895 8.7499 0 8.7499ZM0.0181 11V14H3.0181C3.0181 12.3431 1.675 11 0.0181 11Z"
        />
      </svg>
      <svg viewBox="0 0 18 14" aria-hidden="true" slot="exit">
        <path
          d="M15.9891 0H2.01103C0.900434 0 3.35947e-05 0.9003 3.35947e-05 2.011V5.5009C0.338934 5.5016 0.671434 5.5275 1.00003 5.5669V2.011C1.00003 1.4536 1.45353 1 2.01093 1H15.9891C16.5465 1 17 1.4536 17 2.011V11.9891C17 12.5465 16.5465 13 15.9891 13H8.41773C8.45653 13.3286 8.48183 13.6611 8.48183 13.9999H15.989C17.0996 13.9999 17.9999 13.0996 17.9999 11.989V2.011C18 0.9003 17.0997 0 15.9891 0ZM-0.0180664 6.4999V7.4999C3.56593 7.4999 6.48193 10.4159 6.48193 13.9999H7.48193C7.48193 9.8642 4.11763 6.4999 -0.0180664 6.4999ZM-0.0180664 8.7499V9.7499C2.32523 9.7499 4.23193 11.6566 4.23193 13.9999H5.23193C5.23193 11.1049 2.87693 8.7499 -0.0180664 8.7499ZM3.35947e-05 11V14H3.00003C3.00003 12.3431 1.65693 11 3.35947e-05 11Z"
        />
        <path d="M2.15002 5.634C5.18352 6.4207 7.57252 8.8151 8.35282 11.8499H15.8501V2.1499H2.15002V5.634Z" />
      </svg>
    </media-cast-button>
  </template>

  <template partial="LiveButton">
    <media-live-button part="{{section ?? 'top'}} live button" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <span slot="text">Live</span>
    </media-live-button>
  </template>

  <template partial="PlaybackRateMenu">
    <media-playback-rate-menu-button part="bottom playback-rate button"></media-playback-rate-menu-button>
    <media-playback-rate-menu
      hidden
      anchor="auto"
      rates="{{playbackrates}}"
      exportparts="menu-item"
      part="bottom playback-rate menu"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    ></media-playback-rate-menu>
  </template>

  <template partial="VolumeRange">
    <media-volume-range
      part="bottom volume range"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    ></media-volume-range>
  </template>

  <template partial="TimeDisplay">
    <media-time-display
      remaining="{{defaultshowremainingtime}}"
      showduration="{{!hideduration}}"
      part="bottom time display"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    ></media-time-display>
  </template>

  <template partial="TimeRange">
    <media-time-range part="bottom time range" disabled="{{disabled}}" aria-disabled="{{disabled}}">
      <media-preview-thumbnail slot="preview"></media-preview-thumbnail>
      <media-preview-chapter-display slot="preview"></media-preview-chapter-display>
      <media-preview-time-display slot="preview"></media-preview-time-display>
      <div slot="preview" part="arrow"></div>
    </media-time-range>
  </template>

  <template partial="AudioTrackMenu">
    <media-audio-track-menu-button part="bottom audio-track button">
      <svg aria-hidden="true" slot="icon" viewBox="0 0 18 16">
        <path d="M9 15A7 7 0 1 1 9 1a7 7 0 0 1 0 14Zm0 1A8 8 0 1 0 9 0a8 8 0 0 0 0 16Z" />
        <path
          d="M5.2 6.3a.5.5 0 0 1 .5.5v2.4a.5.5 0 1 1-1 0V6.8a.5.5 0 0 1 .5-.5Zm2.4-2.4a.5.5 0 0 1 .5.5v7.2a.5.5 0 0 1-1 0V4.4a.5.5 0 0 1 .5-.5ZM10 5.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.4-.8a.5.5 0 0 1 .5.5v5.6a.5.5 0 0 1-1 0V5.2a.5.5 0 0 1 .5-.5Z"
        />
      </svg>
    </media-audio-track-menu-button>
    <media-audio-track-menu
      hidden
      anchor="auto"
      part="bottom audio-track menu"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
      exportparts="menu-item"
    >
      <div slot="checked-indicator">
        <style>
          .indicator {
            position: relative;
            top: 1px;
            width: 0.9em;
            height: auto;
            fill: var(--_accent-color);
            margin-right: 5px;
          }

          [aria-checked='false'] .indicator {
            display: none;
          }
        </style>
        <svg viewBox="0 0 14 18" class="indicator">
          <path
            d="M12.252 3.48c-.115.033-.301.161-.425.291-.059.063-1.407 1.815-2.995 3.894s-2.897 3.79-2.908 3.802c-.013.014-.661-.616-1.672-1.624-.908-.905-1.702-1.681-1.765-1.723-.401-.27-.783-.211-1.176.183a1.285 1.285 0 0 0-.261.342.582.582 0 0 0-.082.35c0 .165.01.205.08.35.075.153.213.296 2.182 2.271 1.156 1.159 2.17 2.159 2.253 2.222.189.143.338.196.539.194.203-.003.412-.104.618-.299.205-.193 6.7-8.693 6.804-8.903a.716.716 0 0 0 .085-.345c.01-.179.005-.203-.062-.339-.124-.252-.45-.531-.746-.639a.784.784 0 0 0-.469-.027"
            fill-rule="evenodd"
          />
        </svg>
      </div>
    </media-audio-track-menu>
  </template>

  <template partial="RenditionMenu">
    <media-rendition-menu-button part="bottom rendition button">
      <svg aria-hidden="true" slot="icon" viewBox="0 0 18 14">
        <path
          d="M2.25 9a2 2 0 1 0 0-4 2 2 0 0 0 0 4ZM9 9a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm6.75 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"
        />
      </svg>
    </media-rendition-menu-button>
    <media-rendition-menu
      hidden
      anchor="auto"
      part="bottom rendition menu"
      disabled="{{disabled}}"
      aria-disabled="{{disabled}}"
    >
      <div slot="checked-indicator">
        <style>
          .indicator {
            position: relative;
            top: 1px;
            width: 0.9em;
            height: auto;
            fill: var(--_accent-color);
            margin-right: 5px;
          }

          [aria-checked='false'] .indicator {
            opacity: 0;
          }
        </style>
        <svg viewBox="0 0 14 18" class="indicator">
          <path
            d="M12.252 3.48c-.115.033-.301.161-.425.291-.059.063-1.407 1.815-2.995 3.894s-2.897 3.79-2.908 3.802c-.013.014-.661-.616-1.672-1.624-.908-.905-1.702-1.681-1.765-1.723-.401-.27-.783-.211-1.176.183a1.285 1.285 0 0 0-.261.342.582.582 0 0 0-.082.35c0 .165.01.205.08.35.075.153.213.296 2.182 2.271 1.156 1.159 2.17 2.159 2.253 2.222.189.143.338.196.539.194.203-.003.412-.104.618-.299.205-.193 6.7-8.693 6.804-8.903a.716.716 0 0 0 .085-.345c.01-.179.005-.203-.062-.339-.124-.252-.45-.531-.746-.639a.784.784 0 0 0-.469-.027"
            fill-rule="evenodd"
          />
        </svg>
      </div>
    </media-rendition-menu>
  </template>

  <template partial="MuxBadge">
    <div part="mux-badge">
      <a href="https://www.mux.com/player" target="_blank">
        <span class="mux-badge-text">Powered by</span>
        <div class="mux-badge-logo">
          <svg
            viewBox="0 0 1600 500"
            style="fill-rule: evenodd; clip-rule: evenodd; stroke-linejoin: round; stroke-miterlimit: 2"
          >
            <g>
              <path
                d="M994.287,93.486c-17.121,-0 -31,-13.879 -31,-31c0,-17.121 13.879,-31 31,-31c17.121,-0 31,13.879 31,31c0,17.121 -13.879,31 -31,31m0,-93.486c-34.509,-0 -62.484,27.976 -62.484,62.486l0,187.511c0,68.943 -56.09,125.033 -125.032,125.033c-68.942,-0 -125.03,-56.09 -125.03,-125.033l0,-187.511c0,-34.51 -27.976,-62.486 -62.485,-62.486c-34.509,-0 -62.484,27.976 -62.484,62.486l0,187.511c0,137.853 112.149,250.003 249.999,250.003c137.851,-0 250.001,-112.15 250.001,-250.003l0,-187.511c0,-34.51 -27.976,-62.486 -62.485,-62.486"
                style="fill-rule: nonzero"
              ></path>
              <path
                d="M1537.51,468.511c-17.121,-0 -31,-13.879 -31,-31c0,-17.121 13.879,-31 31,-31c17.121,-0 31,13.879 31,31c0,17.121 -13.879,31 -31,31m-275.883,-218.509l-143.33,143.329c-24.402,24.402 -24.402,63.966 0,88.368c24.402,24.402 63.967,24.402 88.369,-0l143.33,-143.329l143.328,143.329c24.402,24.4 63.967,24.402 88.369,-0c24.403,-24.402 24.403,-63.966 0.001,-88.368l-143.33,-143.329l0.001,-0.004l143.329,-143.329c24.402,-24.402 24.402,-63.965 0,-88.367c-24.402,-24.402 -63.967,-24.402 -88.369,-0l-143.329,143.328l-143.329,-143.328c-24.402,-24.401 -63.967,-24.402 -88.369,-0c-24.402,24.402 -24.402,63.965 0,88.367l143.329,143.329l0,0.004Z"
                style="fill-rule: nonzero"
              ></path>
              <path
                d="M437.511,468.521c-17.121,-0 -31,-13.879 -31,-31c0,-17.121 13.879,-31 31,-31c17.121,-0 31,13.879 31,31c0,17.121 -13.879,31 -31,31m23.915,-463.762c-23.348,-9.672 -50.226,-4.327 -68.096,13.544l-143.331,143.329l-143.33,-143.329c-17.871,-17.871 -44.747,-23.216 -68.096,-13.544c-23.349,9.671 -38.574,32.455 -38.574,57.729l0,375.026c0,34.51 27.977,62.486 62.487,62.486c34.51,-0 62.486,-27.976 62.486,-62.486l0,-224.173l80.843,80.844c24.404,24.402 63.965,24.402 88.369,-0l80.843,-80.844l0,224.173c0,34.51 27.976,62.486 62.486,62.486c34.51,-0 62.486,-27.976 62.486,-62.486l0,-375.026c0,-25.274 -15.224,-48.058 -38.573,-57.729"
                style="fill-rule: nonzero"
              ></path>
            </g>
          </svg>
        </div>
      </a>
    </div>
  </template>

  <media-controller
    part="controller"
    defaultstreamtype="{{defaultstreamtype ?? 'on-demand'}}"
    breakpoints="sm:470"
    gesturesdisabled="{{disabled}}"
    hotkeys="{{hotkeys}}"
    nohotkeys="{{nohotkeys}}"
    novolumepref="{{novolumepref}}"
    audio="{{audio}}"
    noautoseektolive="{{noautoseektolive}}"
    defaultsubtitles="{{defaultsubtitles}}"
    defaultduration="{{defaultduration ?? false}}"
    keyboardforwardseekoffset="{{forwardseekoffset}}"
    keyboardbackwardseekoffset="{{backwardseekoffset}}"
    exportparts="layer, media-layer, poster-layer, vertical-layer, centered-layer, gesture-layer"
    style="--_pre-playback-place:{{preplaybackplace ?? 'center'}}"
  >
    <slot name="media" slot="media"></slot>
    <slot name="poster" slot="poster"></slot>

    <media-loading-indicator slot="centered-chrome" noautohide></media-loading-indicator>

    <template if="!audio">
      <media-error-dialog slot="dialog" noautohide></media-error-dialog>
      <!-- Pre-playback UI -->
      <!-- same for both on-demand and live -->
      <div slot="centered-chrome" class="center-controls pre-playback">
        <template if="!breakpointsm">{{>PlayButton section="center"}}</template>
        <template if="breakpointsm">{{>PrePlayButton section="center"}}</template>
      </div>

      <!-- Mux Badge -->
      <template if="proudlydisplaymuxbadge"> {{>MuxBadge}} </template>

      <!-- Autoplay centered unmute button -->
      <!--
        todo: figure out how show this with available state variables
        needs to show when:
        - autoplay is enabled
        - playback has been successful
        - audio is muted
        - in place / instead of the pre-plaback play button
        - not to show again after user has interacted with this button
          - OR user has interacted with the mute button in the control bar
      -->
      <!--
        There should be a >MuteButton to the left of the "Unmute" text, but a templating bug
        makes it appear even if commented out in the markup, add it back when code is un-commented
      -->
      <!-- <div slot="centered-chrome" class="autoplay-unmute">
        <div role="button" class="autoplay-unmute-btn">Unmute</div>
      </div> -->

      <template if="streamtype == 'on-demand'">
        <template if="breakpointsm">
          <media-control-bar part="control-bar top" slot="top-chrome">{{>TitleDisplay}} </media-control-bar>
        </template>
        {{>TimeRange}}
        <media-control-bar part="control-bar bottom">
          {{>PlayButton}} {{>SeekBackwardButton}} {{>SeekForwardButton}} {{>TimeDisplay}} {{>MuteButton}}
          {{>VolumeRange}}
          <div class="spacer"></div>
          {{>RenditionMenu}} {{>PlaybackRateMenu}} {{>AudioTrackMenu}} {{>CaptionsMenu}} {{>AirplayButton}}
          {{>CastButton}} {{>PipButton}} {{>FullscreenButton}}
        </media-control-bar>
      </template>

      <template if="streamtype == 'live'">
        <media-control-bar part="control-bar top" slot="top-chrome">
          {{>LiveButton}}
          <template if="breakpointsm"> {{>TitleDisplay}} </template>
        </media-control-bar>
        <template if="targetlivewindow > 0">{{>TimeRange}}</template>
        <media-control-bar part="control-bar bottom">
          {{>PlayButton}}
          <template if="targetlivewindow > 0">{{>SeekBackwardButton}} {{>SeekForwardButton}}</template>
          {{>MuteButton}} {{>VolumeRange}}
          <div class="spacer"></div>
          {{>RenditionMenu}} {{>AudioTrackMenu}} {{>CaptionsMenu}} {{>AirplayButton}} {{>CastButton}} {{>PipButton}}
          {{>FullscreenButton}}
        </media-control-bar>
      </template>
    </template>

    <template if="audio">
      <template if="streamtype == 'on-demand'">
        <template if="title">
          <media-control-bar part="control-bar top">{{>TitleDisplay}}</media-control-bar>
        </template>
        <media-control-bar part="control-bar bottom">
          {{>PlayButton}}
          <template if="breakpointsm"> {{>SeekBackwardButton}} {{>SeekForwardButton}} </template>
          {{>MuteButton}}
          <template if="breakpointsm">{{>VolumeRange}}</template>
          {{>TimeDisplay}} {{>TimeRange}}
          <template if="breakpointsm">{{>PlaybackRateMenu}}</template>
          {{>AirplayButton}} {{>CastButton}}
        </media-control-bar>
      </template>

      <template if="streamtype == 'live'">
        <template if="title">
          <media-control-bar part="control-bar top">{{>TitleDisplay}}</media-control-bar>
        </template>
        <media-control-bar part="control-bar bottom">
          {{>PlayButton}} {{>LiveButton section="bottom"}} {{>MuteButton}}
          <template if="breakpointsm">
            {{>VolumeRange}}
            <template if="targetlivewindow > 0"> {{>SeekBackwardButton}} {{>SeekForwardButton}} </template>
          </template>
          <template if="targetlivewindow > 0"> {{>TimeDisplay}} {{>TimeRange}} </template>
          <template if="!targetlivewindow"><div class="spacer"></div></template>
          {{>AirplayButton}} {{>CastButton}}
        </media-control-bar>
      </template>
    </template>

    <slot></slot>
  </media-controller>
</template>
`;
var xe$1 = Y.createElement("template");
"innerHTML" in xe$1 && (xe$1.innerHTML = Et);
var At, Ct, me$1 = class extends MediaThemeElement {};
me$1.template = (Ct = (At = xe$1.content) == null ? void 0 : At.children) == null ? void 0 : Ct[0];
k.customElements.get("media-theme-gerwig") || k.customElements.define("media-theme-gerwig", me$1);
var va = "gerwig", M$1 = {
	SRC: "src",
	POSTER: "poster"
}, o$1 = {
	STYLE: "style",
	DEFAULT_HIDDEN_CAPTIONS: "default-hidden-captions",
	PRIMARY_COLOR: "primary-color",
	SECONDARY_COLOR: "secondary-color",
	ACCENT_COLOR: "accent-color",
	FORWARD_SEEK_OFFSET: "forward-seek-offset",
	BACKWARD_SEEK_OFFSET: "backward-seek-offset",
	PLAYBACK_TOKEN: "playback-token",
	THUMBNAIL_TOKEN: "thumbnail-token",
	STORYBOARD_TOKEN: "storyboard-token",
	DRM_TOKEN: "drm-token",
	STORYBOARD_SRC: "storyboard-src",
	THUMBNAIL_TIME: "thumbnail-time",
	AUDIO: "audio",
	NOHOTKEYS: "nohotkeys",
	HOTKEYS: "hotkeys",
	PLAYBACK_RATES: "playbackrates",
	DEFAULT_SHOW_REMAINING_TIME: "default-show-remaining-time",
	DEFAULT_DURATION: "default-duration",
	TITLE: "title",
	VIDEO_TITLE: "video-title",
	PLACEHOLDER: "placeholder",
	THEME: "theme",
	DEFAULT_STREAM_TYPE: "default-stream-type",
	TARGET_LIVE_WINDOW: "target-live-window",
	EXTRA_SOURCE_PARAMS: "extra-source-params",
	NO_VOLUME_PREF: "no-volume-pref",
	CAST_RECEIVER: "cast-receiver",
	NO_TOOLTIPS: "no-tooltips",
	PROUDLY_DISPLAY_MUX_BADGE: "proudly-display-mux-badge",
	DISABLE_PSEUDO_ENDED: "disable-pseudo-ended"
}, Se = [
	"audio",
	"backwardseekoffset",
	"defaultduration",
	"defaultshowremainingtime",
	"defaultsubtitles",
	"noautoseektolive",
	"disabled",
	"exportparts",
	"forwardseekoffset",
	"hideduration",
	"hotkeys",
	"nohotkeys",
	"playbackrates",
	"defaultstreamtype",
	"streamtype",
	"style",
	"targetlivewindow",
	"template",
	"title",
	"videotitle",
	"novolumepref",
	"proudlydisplaymuxbadge"
];
function Ta(t$1, a$2) {
	var i$1, r$3;
	return {
		src: !t$1.playbackId && t$1.src,
		playbackId: t$1.playbackId,
		hasSrc: !!t$1.playbackId || !!t$1.src || !!t$1.currentSrc,
		poster: t$1.poster,
		storyboard: t$1.storyboard,
		storyboardSrc: t$1.getAttribute(o$1.STORYBOARD_SRC),
		placeholder: t$1.getAttribute("placeholder"),
		themeTemplate: Aa(t$1),
		thumbnailTime: !t$1.tokens.thumbnail && t$1.thumbnailTime,
		autoplay: t$1.autoplay,
		crossOrigin: t$1.crossOrigin,
		loop: t$1.loop,
		noHotKeys: t$1.hasAttribute(o$1.NOHOTKEYS),
		hotKeys: t$1.getAttribute(o$1.HOTKEYS),
		muted: t$1.muted,
		paused: t$1.paused,
		preload: t$1.preload,
		envKey: t$1.envKey,
		preferCmcd: t$1.preferCmcd,
		debug: t$1.debug,
		disableTracking: t$1.disableTracking,
		disableCookies: t$1.disableCookies,
		tokens: t$1.tokens,
		beaconCollectionDomain: t$1.beaconCollectionDomain,
		maxResolution: t$1.maxResolution,
		minResolution: t$1.minResolution,
		programStartTime: t$1.programStartTime,
		programEndTime: t$1.programEndTime,
		assetStartTime: t$1.assetStartTime,
		assetEndTime: t$1.assetEndTime,
		renditionOrder: t$1.renditionOrder,
		metadata: t$1.metadata,
		playerInitTime: t$1.playerInitTime,
		playerSoftwareName: t$1.playerSoftwareName,
		playerSoftwareVersion: t$1.playerSoftwareVersion,
		startTime: t$1.startTime,
		preferPlayback: t$1.preferPlayback,
		audio: t$1.audio,
		defaultStreamType: t$1.defaultStreamType,
		targetLiveWindow: t$1.getAttribute(e.TARGET_LIVE_WINDOW),
		streamType: z(t$1.getAttribute(e.STREAM_TYPE)),
		primaryColor: t$1.getAttribute(o$1.PRIMARY_COLOR),
		secondaryColor: t$1.getAttribute(o$1.SECONDARY_COLOR),
		accentColor: t$1.getAttribute(o$1.ACCENT_COLOR),
		forwardSeekOffset: t$1.forwardSeekOffset,
		backwardSeekOffset: t$1.backwardSeekOffset,
		defaultHiddenCaptions: t$1.defaultHiddenCaptions,
		defaultDuration: t$1.defaultDuration,
		defaultShowRemainingTime: t$1.defaultShowRemainingTime,
		hideDuration: Ca(t$1),
		playbackRates: t$1.getAttribute(o$1.PLAYBACK_RATES),
		customDomain: (i$1 = t$1.getAttribute(e.CUSTOM_DOMAIN)) != null ? i$1 : void 0,
		title: t$1.getAttribute(o$1.TITLE),
		videoTitle: (r$3 = t$1.getAttribute(o$1.VIDEO_TITLE)) != null ? r$3 : t$1.getAttribute(o$1.TITLE),
		novolumepref: t$1.hasAttribute(o$1.NO_VOLUME_PREF),
		proudlyDisplayMuxBadge: t$1.hasAttribute(o$1.PROUDLY_DISPLAY_MUX_BADGE),
		castReceiver: t$1.castReceiver,
		disablePseudoEnded: t$1.hasAttribute(o$1.DISABLE_PSEUDO_ENDED),
		...a$2,
		extraSourceParams: t$1.extraSourceParams
	};
}
var Ea = media_error_dialog_default.formatErrorMessage;
media_error_dialog_default.formatErrorMessage = (t$1) => {
	var a$2, e$1;
	if (t$1 instanceof f) {
		let i$1 = Tt(t$1, !1);
		return `
      ${i$1 != null && i$1.title ? `<h3>${i$1.title}</h3>` : ""}
      ${i$1 != null && i$1.message || i$1 != null && i$1.linkUrl ? `<p>
        ${i$1 == null ? void 0 : i$1.message}
        ${i$1 != null && i$1.linkUrl ? `<a
              href="${i$1.linkUrl}"
              target="_blank"
              rel="external noopener"
              aria-label="${(a$2 = i$1.linkText) != null ? a$2 : ""} ${x$1("(opens in a new window)")}"
              >${(e$1 = i$1.linkText) != null ? e$1 : i$1.linkUrl}</a
            >` : ""}
      </p>` : ""}
    `;
	}
	return Ea(t$1);
};
function Aa(t$1) {
	var e$1, i$1;
	let a$2 = t$1.theme;
	if (a$2) {
		let r$3 = (i$1 = (e$1 = t$1.getRootNode()) == null ? void 0 : e$1.getElementById) == null ? void 0 : i$1.call(e$1, a$2);
		if (r$3 && r$3 instanceof HTMLTemplateElement) return r$3;
		a$2.startsWith("media-theme-") || (a$2 = `media-theme-${a$2}`);
		let n$2 = k.customElements.get(a$2);
		if (n$2 != null && n$2.template) return n$2.template;
	}
}
function Ca(t$1) {
	var e$1;
	let a$2 = (e$1 = t$1.mediaController) == null ? void 0 : e$1.querySelector("media-time-display");
	return a$2 && getComputedStyle(a$2).getPropertyValue("--media-duration-display-display").trim() === "none";
}
function xt(t$1) {
	let a$2 = t$1.videoTitle ? { video_title: t$1.videoTitle } : {};
	return t$1.getAttributeNames().filter((e$1) => e$1.startsWith("metadata-")).reduce((e$1, i$1) => {
		let r$3 = t$1.getAttribute(i$1);
		return r$3 !== null && (e$1[i$1.replace(/^metadata-/, "").replace(/-/g, "_")] = r$3), e$1;
	}, a$2);
}
var ka = Object.values(e), _a = Object.values(M$1), Ra = Object.values(o$1), Ot = se$2(), Lt = "mux-player", Mt = { isDialogOpen: !1 }, xa = { redundant_streams: !0 }, J, ee$2, te$1, I, ae$1, H, m$2, w, Nt, we, B$1, wt, It, Pt, Dt, Ne = class extends Ce {
	constructor() {
		super();
		T(this, m$2);
		T(this, J);
		T(this, ee$2, !1);
		T(this, te$1, {});
		T(this, I, !0);
		T(this, ae$1, new ne$2(this, "hotkeys"));
		T(this, H, {
			...Mt,
			onCloseErrorDialog: (e$1) => {
				var r$3;
				((r$3 = e$1.composedPath()[0]) == null ? void 0 : r$3.localName) === "media-error-dialog" && p$2(this, m$2, we).call(this, { isDialogOpen: !1 });
			},
			onFocusInErrorDialog: (e$1) => {
				var n$2;
				if (((n$2 = e$1.composedPath()[0]) == null ? void 0 : n$2.localName) !== "media-error-dialog") return;
				ve(this, Y.activeElement) || e$1.preventDefault();
			}
		});
		C$1(this, J, Wr()), this.attachShadow({ mode: "open" }), p$2(this, m$2, Nt).call(this), this.isConnected && p$2(this, m$2, w).call(this);
	}
	static get NAME() {
		return Lt;
	}
	static get VERSION() {
		return Ot;
	}
	static get observedAttributes() {
		var e$1;
		return [
			...(e$1 = Ce.observedAttributes) != null ? e$1 : [],
			..._a,
			...ka,
			...Ra
		];
	}
	get mediaTheme() {
		var e$1;
		return (e$1 = this.shadowRoot) == null ? void 0 : e$1.querySelector("media-theme");
	}
	get mediaController() {
		var e$1, i$1;
		return (i$1 = (e$1 = this.mediaTheme) == null ? void 0 : e$1.shadowRoot) == null ? void 0 : i$1.querySelector("media-controller");
	}
	connectedCallback() {
		let e$1 = this.media;
		e$1 && (e$1.metadata = xt(this));
	}
	attributeChangedCallback(e$1, i$1, r$3) {
		switch (p$2(this, m$2, w).call(this), super.attributeChangedCallback(e$1, i$1, r$3), e$1) {
			case o$1.HOTKEYS:
				u$1(this, ae$1).value = r$3;
				break;
			case o$1.THUMBNAIL_TIME:
				r$3 != null && this.tokens.thumbnail && x$2(x$1("Use of thumbnail-time with thumbnail-token is currently unsupported. Ignore thumbnail-time.").toString());
				break;
			case o$1.THUMBNAIL_TOKEN:
				if (r$3) {
					let d$2 = ee$1(r$3);
					if (d$2) {
						let { aud: l$3 } = d$2, b$4 = se$1.THUMBNAIL;
						l$3 !== b$4 && x$2(x$1("The {tokenNamePrefix}-token has an incorrect aud value: {aud}. aud value should be {expectedAud}.").format({
							aud: l$3,
							expectedAud: b$4,
							tokenNamePrefix: "thumbnail"
						}));
					}
				}
				break;
			case o$1.STORYBOARD_TOKEN:
				if (r$3) {
					let d$2 = ee$1(r$3);
					if (d$2) {
						let { aud: l$3 } = d$2, b$4 = se$1.STORYBOARD;
						l$3 !== b$4 && x$2(x$1("The {tokenNamePrefix}-token has an incorrect aud value: {aud}. aud value should be {expectedAud}.").format({
							aud: l$3,
							expectedAud: b$4,
							tokenNamePrefix: "storyboard"
						}));
					}
				}
				break;
			case o$1.DRM_TOKEN:
				if (r$3) {
					let d$2 = ee$1(r$3);
					if (d$2) {
						let { aud: l$3 } = d$2, b$4 = se$1.DRM;
						l$3 !== b$4 && x$2(x$1("The {tokenNamePrefix}-token has an incorrect aud value: {aud}. aud value should be {expectedAud}.").format({
							aud: l$3,
							expectedAud: b$4,
							tokenNamePrefix: "drm"
						}));
					}
				}
				break;
			case e.PLAYBACK_ID:
				r$3 != null && r$3.includes("?token") && E$2(x$1("The specificed playback ID {playbackId} contains a token which must be provided via the playback-token attribute.").format({ playbackId: r$3 }));
				break;
			case e.STREAM_TYPE: r$3 && ![
				_.LIVE,
				_.ON_DEMAND,
				_.UNKNOWN
			].includes(r$3) ? [
				"ll-live",
				"live:dvr",
				"ll-live:dvr"
			].includes(this.streamType) ? this.targetLiveWindow = r$3.includes("dvr") ? Number.POSITIVE_INFINITY : 0 : Ee$1({
				file: "invalid-stream-type.md",
				message: x$1("Invalid stream-type value supplied: `{streamType}`. Please provide stream-type as either: `on-demand` or `live`").format({ streamType: this.streamType })
			}) : r$3 === _.LIVE ? this.getAttribute(o$1.TARGET_LIVE_WINDOW) ?? (this.targetLiveWindow = 0) : this.targetLiveWindow = NaN;
		}
		[
			e.PLAYBACK_ID,
			M$1.SRC,
			o$1.PLAYBACK_TOKEN
		].includes(e$1) && i$1 !== r$3 && C$1(this, H, {
			...u$1(this, H),
			...Mt
		}), p$2(this, m$2, B$1).call(this, { [st$1(e$1)]: r$3 });
	}
	async requestFullscreen(e$1) {
		var i$1;
		if (!(!this.mediaController || this.mediaController.hasAttribute(MediaUIAttributes.MEDIA_IS_FULLSCREEN))) return (i$1 = this.mediaController) == null || i$1.dispatchEvent(new k.CustomEvent(MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST, {
			composed: !0,
			bubbles: !0
		})), new Promise((r$3, n$2) => {
			var d$2;
			(d$2 = this.mediaController) == null || d$2.addEventListener(MediaStateChangeEvents.MEDIA_IS_FULLSCREEN, () => r$3(), { once: !0 });
		});
	}
	async exitFullscreen() {
		var e$1;
		if (!(!this.mediaController || !this.mediaController.hasAttribute(MediaUIAttributes.MEDIA_IS_FULLSCREEN))) return (e$1 = this.mediaController) == null || e$1.dispatchEvent(new k.CustomEvent(MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST, {
			composed: !0,
			bubbles: !0
		})), new Promise((i$1, r$3) => {
			var n$2;
			(n$2 = this.mediaController) == null || n$2.addEventListener(MediaStateChangeEvents.MEDIA_IS_FULLSCREEN, () => i$1(), { once: !0 });
		});
	}
	get preferCmcd() {
		var e$1;
		return (e$1 = this.getAttribute(e.PREFER_CMCD)) != null ? e$1 : void 0;
	}
	set preferCmcd(e$1) {
		e$1 !== this.preferCmcd && (e$1 ? jt.includes(e$1) ? this.setAttribute(e.PREFER_CMCD, e$1) : x$2(`Invalid value for preferCmcd. Must be one of ${jt.join()}`) : this.removeAttribute(e.PREFER_CMCD));
	}
	get hasPlayed() {
		var e$1, i$1;
		return (i$1 = (e$1 = this.mediaController) == null ? void 0 : e$1.hasAttribute(MediaUIAttributes.MEDIA_HAS_PLAYED)) != null ? i$1 : !1;
	}
	get inLiveWindow() {
		var e$1;
		return (e$1 = this.mediaController) == null ? void 0 : e$1.hasAttribute(MediaUIAttributes.MEDIA_TIME_IS_LIVE);
	}
	get _hls() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1._hls;
	}
	get mux() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1.mux;
	}
	get theme() {
		var e$1;
		return (e$1 = this.getAttribute(o$1.THEME)) != null ? e$1 : va;
	}
	set theme(e$1) {
		this.setAttribute(o$1.THEME, `${e$1}`);
	}
	get themeProps() {
		let e$1 = this.mediaTheme;
		if (!e$1) return;
		let i$1 = {};
		for (let r$3 of e$1.getAttributeNames()) {
			if (Se.includes(r$3)) continue;
			let n$2 = e$1.getAttribute(r$3);
			i$1[oe$1(r$3)] = n$2 === "" ? !0 : n$2;
		}
		return i$1;
	}
	set themeProps(e$1) {
		var r$3, n$2;
		p$2(this, m$2, w).call(this);
		let i$1 = {
			...this.themeProps,
			...e$1
		};
		for (let d$2 in i$1) {
			if (Se.includes(d$2)) continue;
			let l$3 = e$1 == null ? void 0 : e$1[d$2];
			typeof l$3 == "boolean" || l$3 == null ? (r$3 = this.mediaTheme) == null || r$3.toggleAttribute(re$1(d$2), !!l$3) : (n$2 = this.mediaTheme) == null || n$2.setAttribute(re$1(d$2), l$3);
		}
	}
	get playbackId() {
		var e$1;
		return (e$1 = this.getAttribute(e.PLAYBACK_ID)) != null ? e$1 : void 0;
	}
	set playbackId(e$1) {
		e$1 ? this.setAttribute(e.PLAYBACK_ID, e$1) : this.removeAttribute(e.PLAYBACK_ID);
	}
	get src() {
		var e$1, i$1;
		return this.playbackId ? (e$1 = U(this, M$1.SRC)) != null ? e$1 : void 0 : (i$1 = this.getAttribute(M$1.SRC)) != null ? i$1 : void 0;
	}
	set src(e$1) {
		e$1 ? this.setAttribute(M$1.SRC, e$1) : this.removeAttribute(M$1.SRC);
	}
	get poster() {
		var r$3;
		let e$1 = this.getAttribute(M$1.POSTER);
		if (e$1 != null) return e$1;
		let { tokens: i$1 } = this;
		if (i$1.playback && !i$1.thumbnail) {
			x$2("Missing expected thumbnail token. No poster image will be shown");
			return;
		}
		if (this.playbackId && !this.audio) return ot(this.playbackId, {
			customDomain: this.customDomain,
			thumbnailTime: (r$3 = this.thumbnailTime) != null ? r$3 : this.startTime,
			programTime: this.programStartTime,
			token: i$1.thumbnail
		});
	}
	set poster(e$1) {
		e$1 || e$1 === "" ? this.setAttribute(M$1.POSTER, e$1) : this.removeAttribute(M$1.POSTER);
	}
	get storyboardSrc() {
		var e$1;
		return (e$1 = this.getAttribute(o$1.STORYBOARD_SRC)) != null ? e$1 : void 0;
	}
	set storyboardSrc(e$1) {
		e$1 ? this.setAttribute(o$1.STORYBOARD_SRC, e$1) : this.removeAttribute(o$1.STORYBOARD_SRC);
	}
	get storyboard() {
		let { tokens: e$1 } = this;
		if (this.storyboardSrc && !e$1.storyboard) return this.storyboardSrc;
		if (!(this.audio || !this.playbackId || !this.streamType || [_.LIVE, _.UNKNOWN].includes(this.streamType) || e$1.playback && !e$1.storyboard)) return nt(this.playbackId, {
			customDomain: this.customDomain,
			token: e$1.storyboard,
			programStartTime: this.programStartTime,
			programEndTime: this.programEndTime
		});
	}
	get audio() {
		return this.hasAttribute(o$1.AUDIO);
	}
	set audio(e$1) {
		if (!e$1) {
			this.removeAttribute(o$1.AUDIO);
			return;
		}
		this.setAttribute(o$1.AUDIO, "");
	}
	get hotkeys() {
		return u$1(this, ae$1);
	}
	get nohotkeys() {
		return this.hasAttribute(o$1.NOHOTKEYS);
	}
	set nohotkeys(e$1) {
		if (!e$1) {
			this.removeAttribute(o$1.NOHOTKEYS);
			return;
		}
		this.setAttribute(o$1.NOHOTKEYS, "");
	}
	get thumbnailTime() {
		return y$1(this.getAttribute(o$1.THUMBNAIL_TIME));
	}
	set thumbnailTime(e$1) {
		this.setAttribute(o$1.THUMBNAIL_TIME, `${e$1}`);
	}
	get videoTitle() {
		var e$1, i$1;
		return (i$1 = (e$1 = this.getAttribute(o$1.VIDEO_TITLE)) != null ? e$1 : this.getAttribute(o$1.TITLE)) != null ? i$1 : "";
	}
	set videoTitle(e$1) {
		e$1 !== this.videoTitle && (e$1 ? this.setAttribute(o$1.VIDEO_TITLE, e$1) : this.removeAttribute(o$1.VIDEO_TITLE));
	}
	get placeholder() {
		var e$1;
		return (e$1 = U(this, o$1.PLACEHOLDER)) != null ? e$1 : "";
	}
	set placeholder(e$1) {
		this.setAttribute(o$1.PLACEHOLDER, `${e$1}`);
	}
	get primaryColor() {
		var i$1, r$3;
		let e$1 = this.getAttribute(o$1.PRIMARY_COLOR);
		if (e$1 != null || this.mediaTheme && (e$1 = (r$3 = (i$1 = k.getComputedStyle(this.mediaTheme)) == null ? void 0 : i$1.getPropertyValue("--_primary-color")) == null ? void 0 : r$3.trim(), e$1)) return e$1;
	}
	set primaryColor(e$1) {
		this.setAttribute(o$1.PRIMARY_COLOR, `${e$1}`);
	}
	get secondaryColor() {
		var i$1, r$3;
		let e$1 = this.getAttribute(o$1.SECONDARY_COLOR);
		if (e$1 != null || this.mediaTheme && (e$1 = (r$3 = (i$1 = k.getComputedStyle(this.mediaTheme)) == null ? void 0 : i$1.getPropertyValue("--_secondary-color")) == null ? void 0 : r$3.trim(), e$1)) return e$1;
	}
	set secondaryColor(e$1) {
		this.setAttribute(o$1.SECONDARY_COLOR, `${e$1}`);
	}
	get accentColor() {
		var i$1, r$3;
		let e$1 = this.getAttribute(o$1.ACCENT_COLOR);
		if (e$1 != null || this.mediaTheme && (e$1 = (r$3 = (i$1 = k.getComputedStyle(this.mediaTheme)) == null ? void 0 : i$1.getPropertyValue("--_accent-color")) == null ? void 0 : r$3.trim(), e$1)) return e$1;
	}
	set accentColor(e$1) {
		this.setAttribute(o$1.ACCENT_COLOR, `${e$1}`);
	}
	get defaultShowRemainingTime() {
		return this.hasAttribute(o$1.DEFAULT_SHOW_REMAINING_TIME);
	}
	set defaultShowRemainingTime(e$1) {
		e$1 ? this.setAttribute(o$1.DEFAULT_SHOW_REMAINING_TIME, "") : this.removeAttribute(o$1.DEFAULT_SHOW_REMAINING_TIME);
	}
	get playbackRates() {
		if (this.hasAttribute(o$1.PLAYBACK_RATES)) return this.getAttribute(o$1.PLAYBACK_RATES).trim().split(/\s*,?\s+/).map((e$1) => Number(e$1)).filter((e$1) => !Number.isNaN(e$1)).sort((e$1, i$1) => e$1 - i$1);
	}
	set playbackRates(e$1) {
		if (!e$1) {
			this.removeAttribute(o$1.PLAYBACK_RATES);
			return;
		}
		this.setAttribute(o$1.PLAYBACK_RATES, e$1.join(" "));
	}
	get forwardSeekOffset() {
		var e$1;
		return (e$1 = y$1(this.getAttribute(o$1.FORWARD_SEEK_OFFSET))) != null ? e$1 : 10;
	}
	set forwardSeekOffset(e$1) {
		this.setAttribute(o$1.FORWARD_SEEK_OFFSET, `${e$1}`);
	}
	get backwardSeekOffset() {
		var e$1;
		return (e$1 = y$1(this.getAttribute(o$1.BACKWARD_SEEK_OFFSET))) != null ? e$1 : 10;
	}
	set backwardSeekOffset(e$1) {
		this.setAttribute(o$1.BACKWARD_SEEK_OFFSET, `${e$1}`);
	}
	get defaultHiddenCaptions() {
		return this.hasAttribute(o$1.DEFAULT_HIDDEN_CAPTIONS);
	}
	set defaultHiddenCaptions(e$1) {
		e$1 ? this.setAttribute(o$1.DEFAULT_HIDDEN_CAPTIONS, "") : this.removeAttribute(o$1.DEFAULT_HIDDEN_CAPTIONS);
	}
	get defaultDuration() {
		return y$1(this.getAttribute(o$1.DEFAULT_DURATION));
	}
	set defaultDuration(e$1) {
		e$1 == null ? this.removeAttribute(o$1.DEFAULT_DURATION) : this.setAttribute(o$1.DEFAULT_DURATION, `${e$1}`);
	}
	get playerInitTime() {
		return this.hasAttribute(e.PLAYER_INIT_TIME) ? y$1(this.getAttribute(e.PLAYER_INIT_TIME)) : u$1(this, J);
	}
	set playerInitTime(e$1) {
		e$1 != this.playerInitTime && (e$1 == null ? this.removeAttribute(e.PLAYER_INIT_TIME) : this.setAttribute(e.PLAYER_INIT_TIME, `${+e$1}`));
	}
	get playerSoftwareName() {
		var e$1;
		return (e$1 = this.getAttribute(e.PLAYER_SOFTWARE_NAME)) != null ? e$1 : Lt;
	}
	get playerSoftwareVersion() {
		var e$1;
		return (e$1 = this.getAttribute(e.PLAYER_SOFTWARE_VERSION)) != null ? e$1 : Ot;
	}
	get beaconCollectionDomain() {
		var e$1;
		return (e$1 = this.getAttribute(e.BEACON_COLLECTION_DOMAIN)) != null ? e$1 : void 0;
	}
	set beaconCollectionDomain(e$1) {
		e$1 !== this.beaconCollectionDomain && (e$1 ? this.setAttribute(e.BEACON_COLLECTION_DOMAIN, e$1) : this.removeAttribute(e.BEACON_COLLECTION_DOMAIN));
	}
	get maxResolution() {
		var e$1;
		return (e$1 = this.getAttribute(e.MAX_RESOLUTION)) != null ? e$1 : void 0;
	}
	set maxResolution(e$1) {
		e$1 !== this.maxResolution && (e$1 ? this.setAttribute(e.MAX_RESOLUTION, e$1) : this.removeAttribute(e.MAX_RESOLUTION));
	}
	get minResolution() {
		var e$1;
		return (e$1 = this.getAttribute(e.MIN_RESOLUTION)) != null ? e$1 : void 0;
	}
	set minResolution(e$1) {
		e$1 !== this.minResolution && (e$1 ? this.setAttribute(e.MIN_RESOLUTION, e$1) : this.removeAttribute(e.MIN_RESOLUTION));
	}
	get renditionOrder() {
		var e$1;
		return (e$1 = this.getAttribute(e.RENDITION_ORDER)) != null ? e$1 : void 0;
	}
	set renditionOrder(e$1) {
		e$1 !== this.renditionOrder && (e$1 ? this.setAttribute(e.RENDITION_ORDER, e$1) : this.removeAttribute(e.RENDITION_ORDER));
	}
	get programStartTime() {
		return y$1(this.getAttribute(e.PROGRAM_START_TIME));
	}
	set programStartTime(e$1) {
		e$1 == null ? this.removeAttribute(e.PROGRAM_START_TIME) : this.setAttribute(e.PROGRAM_START_TIME, `${e$1}`);
	}
	get programEndTime() {
		return y$1(this.getAttribute(e.PROGRAM_END_TIME));
	}
	set programEndTime(e$1) {
		e$1 == null ? this.removeAttribute(e.PROGRAM_END_TIME) : this.setAttribute(e.PROGRAM_END_TIME, `${e$1}`);
	}
	get assetStartTime() {
		return y$1(this.getAttribute(e.ASSET_START_TIME));
	}
	set assetStartTime(e$1) {
		e$1 == null ? this.removeAttribute(e.ASSET_START_TIME) : this.setAttribute(e.ASSET_START_TIME, `${e$1}`);
	}
	get assetEndTime() {
		return y$1(this.getAttribute(e.ASSET_END_TIME));
	}
	set assetEndTime(e$1) {
		e$1 == null ? this.removeAttribute(e.ASSET_END_TIME) : this.setAttribute(e.ASSET_END_TIME, `${e$1}`);
	}
	get extraSourceParams() {
		return this.hasAttribute(o$1.EXTRA_SOURCE_PARAMS) ? [...new URLSearchParams(this.getAttribute(o$1.EXTRA_SOURCE_PARAMS)).entries()].reduce((e$1, [i$1, r$3]) => (e$1[i$1] = r$3, e$1), {}) : xa;
	}
	set extraSourceParams(e$1) {
		e$1 == null ? this.removeAttribute(o$1.EXTRA_SOURCE_PARAMS) : this.setAttribute(o$1.EXTRA_SOURCE_PARAMS, new URLSearchParams(e$1).toString());
	}
	get customDomain() {
		var e$1;
		return (e$1 = this.getAttribute(e.CUSTOM_DOMAIN)) != null ? e$1 : void 0;
	}
	set customDomain(e$1) {
		e$1 !== this.customDomain && (e$1 ? this.setAttribute(e.CUSTOM_DOMAIN, e$1) : this.removeAttribute(e.CUSTOM_DOMAIN));
	}
	get envKey() {
		var e$1;
		return (e$1 = U(this, e.ENV_KEY)) != null ? e$1 : void 0;
	}
	set envKey(e$1) {
		this.setAttribute(e.ENV_KEY, `${e$1}`);
	}
	get noVolumePref() {
		return this.hasAttribute(o$1.NO_VOLUME_PREF);
	}
	set noVolumePref(e$1) {
		e$1 ? this.setAttribute(o$1.NO_VOLUME_PREF, "") : this.removeAttribute(o$1.NO_VOLUME_PREF);
	}
	get debug() {
		return U(this, e.DEBUG) != null;
	}
	set debug(e$1) {
		e$1 ? this.setAttribute(e.DEBUG, "") : this.removeAttribute(e.DEBUG);
	}
	get disableTracking() {
		return U(this, e.DISABLE_TRACKING) != null;
	}
	set disableTracking(e$1) {
		this.toggleAttribute(e.DISABLE_TRACKING, !!e$1);
	}
	get disableCookies() {
		return U(this, e.DISABLE_COOKIES) != null;
	}
	set disableCookies(e$1) {
		e$1 ? this.setAttribute(e.DISABLE_COOKIES, "") : this.removeAttribute(e.DISABLE_COOKIES);
	}
	get streamType() {
		var e$1, i$1, r$3;
		return (r$3 = (i$1 = this.getAttribute(e.STREAM_TYPE)) != null ? i$1 : (e$1 = this.media) == null ? void 0 : e$1.streamType) != null ? r$3 : _.UNKNOWN;
	}
	set streamType(e$1) {
		this.setAttribute(e.STREAM_TYPE, `${e$1}`);
	}
	get defaultStreamType() {
		var e$1, i$1, r$3;
		return (r$3 = (i$1 = this.getAttribute(o$1.DEFAULT_STREAM_TYPE)) != null ? i$1 : (e$1 = this.mediaController) == null ? void 0 : e$1.getAttribute(o$1.DEFAULT_STREAM_TYPE)) != null ? r$3 : _.ON_DEMAND;
	}
	set defaultStreamType(e$1) {
		e$1 ? this.setAttribute(o$1.DEFAULT_STREAM_TYPE, e$1) : this.removeAttribute(o$1.DEFAULT_STREAM_TYPE);
	}
	get targetLiveWindow() {
		var e$1, i$1;
		return this.hasAttribute(o$1.TARGET_LIVE_WINDOW) ? +this.getAttribute(o$1.TARGET_LIVE_WINDOW) : (i$1 = (e$1 = this.media) == null ? void 0 : e$1.targetLiveWindow) != null ? i$1 : NaN;
	}
	set targetLiveWindow(e$1) {
		e$1 == this.targetLiveWindow || Number.isNaN(e$1) && Number.isNaN(this.targetLiveWindow) || (e$1 == null ? this.removeAttribute(o$1.TARGET_LIVE_WINDOW) : this.setAttribute(o$1.TARGET_LIVE_WINDOW, `${+e$1}`));
	}
	get liveEdgeStart() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1.liveEdgeStart;
	}
	get startTime() {
		return y$1(U(this, e.START_TIME));
	}
	set startTime(e$1) {
		this.setAttribute(e.START_TIME, `${e$1}`);
	}
	get preferPlayback() {
		let e$1 = this.getAttribute(e.PREFER_PLAYBACK);
		if (e$1 === X$1.MSE || e$1 === X$1.NATIVE) return e$1;
	}
	set preferPlayback(e$1) {
		e$1 !== this.preferPlayback && (e$1 === X$1.MSE || e$1 === X$1.NATIVE ? this.setAttribute(e.PREFER_PLAYBACK, e$1) : this.removeAttribute(e.PREFER_PLAYBACK));
	}
	get metadata() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1.metadata;
	}
	set metadata(e$1) {
		if (p$2(this, m$2, w).call(this), !this.media) {
			E$2("underlying media element missing when trying to set metadata. metadata will not be set.");
			return;
		}
		this.media.metadata = {
			...xt(this),
			...e$1
		};
	}
	get _hlsConfig() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1._hlsConfig;
	}
	set _hlsConfig(e$1) {
		if (p$2(this, m$2, w).call(this), !this.media) {
			E$2("underlying media element missing when trying to set _hlsConfig. _hlsConfig will not be set.");
			return;
		}
		this.media._hlsConfig = e$1;
	}
	async addCuePoints(e$1) {
		var i$1;
		if (p$2(this, m$2, w).call(this), !this.media) {
			E$2("underlying media element missing when trying to addCuePoints. cuePoints will not be added.");
			return;
		}
		return (i$1 = this.media) == null ? void 0 : i$1.addCuePoints(e$1);
	}
	get activeCuePoint() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1.activeCuePoint;
	}
	get cuePoints() {
		var e$1, i$1;
		return (i$1 = (e$1 = this.media) == null ? void 0 : e$1.cuePoints) != null ? i$1 : [];
	}
	addChapters(e$1) {
		var i$1;
		if (p$2(this, m$2, w).call(this), !this.media) {
			E$2("underlying media element missing when trying to addChapters. chapters will not be added.");
			return;
		}
		return (i$1 = this.media) == null ? void 0 : i$1.addChapters(e$1);
	}
	get activeChapter() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1.activeChapter;
	}
	get chapters() {
		var e$1, i$1;
		return (i$1 = (e$1 = this.media) == null ? void 0 : e$1.chapters) != null ? i$1 : [];
	}
	getStartDate() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1.getStartDate();
	}
	get currentPdt() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1.currentPdt;
	}
	get tokens() {
		let e$1 = this.getAttribute(o$1.PLAYBACK_TOKEN), i$1 = this.getAttribute(o$1.DRM_TOKEN), r$3 = this.getAttribute(o$1.THUMBNAIL_TOKEN), n$2 = this.getAttribute(o$1.STORYBOARD_TOKEN);
		return {
			...u$1(this, te$1),
			...e$1 != null ? { playback: e$1 } : {},
			...i$1 != null ? { drm: i$1 } : {},
			...r$3 != null ? { thumbnail: r$3 } : {},
			...n$2 != null ? { storyboard: n$2 } : {}
		};
	}
	set tokens(e$1) {
		C$1(this, te$1, e$1 != null ? e$1 : {});
	}
	get playbackToken() {
		var e$1;
		return (e$1 = this.getAttribute(o$1.PLAYBACK_TOKEN)) != null ? e$1 : void 0;
	}
	set playbackToken(e$1) {
		this.setAttribute(o$1.PLAYBACK_TOKEN, `${e$1}`);
	}
	get drmToken() {
		var e$1;
		return (e$1 = this.getAttribute(o$1.DRM_TOKEN)) != null ? e$1 : void 0;
	}
	set drmToken(e$1) {
		this.setAttribute(o$1.DRM_TOKEN, `${e$1}`);
	}
	get thumbnailToken() {
		var e$1;
		return (e$1 = this.getAttribute(o$1.THUMBNAIL_TOKEN)) != null ? e$1 : void 0;
	}
	set thumbnailToken(e$1) {
		this.setAttribute(o$1.THUMBNAIL_TOKEN, `${e$1}`);
	}
	get storyboardToken() {
		var e$1;
		return (e$1 = this.getAttribute(o$1.STORYBOARD_TOKEN)) != null ? e$1 : void 0;
	}
	set storyboardToken(e$1) {
		this.setAttribute(o$1.STORYBOARD_TOKEN, `${e$1}`);
	}
	addTextTrack(e$1, i$1, r$3, n$2) {
		var l$3;
		let d$2 = (l$3 = this.media) == null ? void 0 : l$3.nativeEl;
		if (d$2) return ne$1(d$2, e$1, i$1, r$3, n$2);
	}
	removeTextTrack(e$1) {
		var r$3;
		let i$1 = (r$3 = this.media) == null ? void 0 : r$3.nativeEl;
		if (i$1) return st(i$1, e$1);
	}
	get textTracks() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1.textTracks;
	}
	get castReceiver() {
		var e$1;
		return (e$1 = this.getAttribute(o$1.CAST_RECEIVER)) != null ? e$1 : void 0;
	}
	set castReceiver(e$1) {
		e$1 !== this.castReceiver && (e$1 ? this.setAttribute(o$1.CAST_RECEIVER, e$1) : this.removeAttribute(o$1.CAST_RECEIVER));
	}
	get castCustomData() {
		var e$1;
		return (e$1 = this.media) == null ? void 0 : e$1.castCustomData;
	}
	set castCustomData(e$1) {
		if (!this.media) {
			E$2("underlying media element missing when trying to set castCustomData. castCustomData will not be set.");
			return;
		}
		this.media.castCustomData = e$1;
	}
	get noTooltips() {
		return this.hasAttribute(o$1.NO_TOOLTIPS);
	}
	set noTooltips(e$1) {
		if (!e$1) {
			this.removeAttribute(o$1.NO_TOOLTIPS);
			return;
		}
		this.setAttribute(o$1.NO_TOOLTIPS, "");
	}
	get proudlyDisplayMuxBadge() {
		return this.hasAttribute(o$1.PROUDLY_DISPLAY_MUX_BADGE);
	}
	set proudlyDisplayMuxBadge(e$1) {
		e$1 ? this.setAttribute(o$1.PROUDLY_DISPLAY_MUX_BADGE, "") : this.removeAttribute(o$1.PROUDLY_DISPLAY_MUX_BADGE);
	}
};
J = /* @__PURE__ */ new WeakMap(), ee$2 = /* @__PURE__ */ new WeakMap(), te$1 = /* @__PURE__ */ new WeakMap(), I = /* @__PURE__ */ new WeakMap(), ae$1 = /* @__PURE__ */ new WeakMap(), H = /* @__PURE__ */ new WeakMap(), m$2 = /* @__PURE__ */ new WeakSet(), w = function() {
	var e$1, i$1, r$3, n$2;
	if (!u$1(this, ee$2)) {
		C$1(this, ee$2, !0), p$2(this, m$2, B$1).call(this);
		try {
			if (customElements.upgrade(this.mediaTheme), !(this.mediaTheme instanceof k.HTMLElement)) throw "";
		} catch {
			E$2("<media-theme> failed to upgrade!");
		}
		try {
			customElements.upgrade(this.media);
		} catch {
			E$2("underlying media element failed to upgrade!");
		}
		try {
			if (customElements.upgrade(this.mediaController), !(this.mediaController instanceof media_controller_default)) throw "";
		} catch {
			E$2("<media-controller> failed to upgrade!");
		}
		p$2(this, m$2, wt).call(this), p$2(this, m$2, It).call(this), p$2(this, m$2, Pt).call(this), C$1(this, I, (i$1 = (e$1 = this.mediaController) == null ? void 0 : e$1.hasAttribute(Attributes.USER_INACTIVE)) != null ? i$1 : !0), p$2(this, m$2, Dt).call(this), (r$3 = this.media) == null || r$3.addEventListener("streamtypechange", () => p$2(this, m$2, B$1).call(this)), (n$2 = this.media) == null || n$2.addEventListener("loadstart", () => p$2(this, m$2, B$1).call(this));
	}
}, Nt = function() {
	var e$1, i$1;
	try {
		(e$1 = window == null ? void 0 : window.CSS) == null || e$1.registerProperty({
			name: "--media-primary-color",
			syntax: "<color>",
			inherits: !0
		}), (i$1 = window == null ? void 0 : window.CSS) == null || i$1.registerProperty({
			name: "--media-secondary-color",
			syntax: "<color>",
			inherits: !0
		});
	} catch {}
}, we = function(e$1) {
	Object.assign(u$1(this, H), e$1), p$2(this, m$2, B$1).call(this);
}, B$1 = function(e$1 = {}) {
	bt(gt(Ta(this, {
		...u$1(this, H),
		...e$1
	})), this.shadowRoot);
}, wt = function() {
	let e$1 = (r$3) => {
		var l$3, b$4;
		if (!(r$3 != null && r$3.startsWith("theme-"))) return;
		let n$2 = r$3.replace(/^theme-/, "");
		if (Se.includes(n$2)) return;
		let d$2 = this.getAttribute(r$3);
		d$2 != null ? (l$3 = this.mediaTheme) == null || l$3.setAttribute(n$2, d$2) : (b$4 = this.mediaTheme) == null || b$4.removeAttribute(n$2);
	};
	new MutationObserver((r$3) => {
		for (let { attributeName: n$2 } of r$3) e$1(n$2);
	}).observe(this, { attributes: !0 }), this.getAttributeNames().forEach(e$1);
}, It = function() {
	let e$1 = (i$1) => {
		var d$2;
		let r$3 = (d$2 = this.media) == null ? void 0 : d$2.error;
		if (!(r$3 instanceof f)) {
			let { message: l$3, code: b$4 } = r$3 != null ? r$3 : {};
			r$3 = new f(l$3, b$4);
		}
		if (!(r$3 != null && r$3.fatal)) {
			x$2(r$3), r$3.data && x$2(`${r$3.name} data:`, r$3.data);
			return;
		}
		let n$2 = Re(r$3, !1);
		n$2.message && Ee$1(n$2), E$2(r$3), r$3.data && E$2(`${r$3.name} data:`, r$3.data), p$2(this, m$2, we).call(this, { isDialogOpen: !0 });
	};
	this.addEventListener("error", e$1), this.media && (this.media.errorTranslator = (i$1 = {}) => {
		var n$2, d$2, l$3;
		if (!(((n$2 = this.media) == null ? void 0 : n$2.error) instanceof f)) return i$1;
		let r$3 = Re((d$2 = this.media) == null ? void 0 : d$2.error, !1);
		return {
			player_error_code: (l$3 = this.media) == null ? void 0 : l$3.error.code,
			player_error_message: r$3.message ? String(r$3.message) : i$1.player_error_message,
			player_error_context: r$3.context ? String(r$3.context) : i$1.player_error_context
		};
	});
}, Pt = function() {
	var i$1, r$3, n$2, d$2;
	let e$1 = () => p$2(this, m$2, B$1).call(this);
	(r$3 = (i$1 = this.media) == null ? void 0 : i$1.textTracks) == null || r$3.addEventListener("addtrack", e$1), (d$2 = (n$2 = this.media) == null ? void 0 : n$2.textTracks) == null || d$2.addEventListener("removetrack", e$1);
}, Dt = function() {
	var S$1, F$2;
	if (!/Firefox/i.test(navigator.userAgent)) return;
	let i$1, r$3 = /* @__PURE__ */ new WeakMap(), n$2 = () => this.streamType === _.LIVE && !this.secondaryColor && this.offsetWidth >= 800, d$2 = (_$2, A$3, R = !1) => {
		if (n$2()) return;
		Array.from(_$2 && _$2.activeCues || []).forEach((h$2) => {
			if (!(!h$2.snapToLines || h$2.line < -5 || h$2.line >= 0 && h$2.line < 10)) if (!A$3 || this.paused) {
				let ie$2 = h$2.text.split(`
`).length, W$2 = -3;
				this.streamType === _.LIVE && (W$2 = -2);
				let Z$1 = W$2 - ie$2;
				if (h$2.line === Z$1 && !R) return;
				r$3.has(h$2) || r$3.set(h$2, h$2.line), h$2.line = Z$1;
			} else setTimeout(() => {
				h$2.line = r$3.get(h$2) || "auto";
			}, 500);
		});
	}, l$3 = () => {
		var _$2, A$3;
		d$2(i$1, (A$3 = (_$2 = this.mediaController) == null ? void 0 : _$2.hasAttribute(Attributes.USER_INACTIVE)) != null ? A$3 : !1);
	}, b$4 = () => {
		var R, K$2;
		let A$3 = Array.from(((K$2 = (R = this.mediaController) == null ? void 0 : R.media) == null ? void 0 : K$2.textTracks) || []).filter((h$2) => ["subtitles", "captions"].includes(h$2.kind) && h$2.mode === "showing")[0];
		A$3 !== i$1 && i$1?.removeEventListener("cuechange", l$3), i$1 = A$3, i$1?.addEventListener("cuechange", l$3), d$2(i$1, u$1(this, I));
	};
	b$4(), (S$1 = this.textTracks) == null || S$1.addEventListener("change", b$4), (F$2 = this.textTracks) == null || F$2.addEventListener("addtrack", b$4), this.addEventListener("userinactivechange", () => {
		var A$3, R;
		let _$2 = (R = (A$3 = this.mediaController) == null ? void 0 : A$3.hasAttribute(Attributes.USER_INACTIVE)) != null ? R : !0;
		u$1(this, I) !== _$2 && (C$1(this, I, _$2), d$2(i$1, u$1(this, I)));
	});
};
function U(t$1, a$2) {
	return t$1.media ? t$1.media.getAttribute(a$2) : t$1.getAttribute(a$2);
}
var Ci = Ne;

//#endregion
//#region node_modules/@mux/mux-player/dist/index.mjs
var c = (e$1) => {
	throw TypeError(e$1);
};
var d = (e$1, t$1, n$2) => t$1.has(e$1) || c("Cannot " + n$2);
var g$1 = (e$1, t$1, n$2) => (d(e$1, t$1, "read from private field"), n$2 ? n$2.call(e$1) : t$1.get(e$1)), p$1 = (e$1, t$1, n$2) => t$1.has(e$1) ? c("Cannot add the same private member more than once") : t$1 instanceof WeakSet ? t$1.add(e$1) : t$1.set(e$1, n$2), f$2 = (e$1, t$1, n$2, i$1) => (d(e$1, t$1, "write to private field"), i$1 ? i$1.call(e$1, n$2) : t$1.set(e$1, n$2), n$2);
var o = class {
	addEventListener() {}
	removeEventListener() {}
	dispatchEvent(t$1) {
		return !0;
	}
};
if (typeof DocumentFragment == "undefined") {
	class e$1 extends o {}
	globalThis.DocumentFragment = e$1;
}
var s = class extends o {}, a = class extends o {}, b = {
	get(e$1) {},
	define(e$1, t$1, n$2) {},
	getName(e$1) {
		return null;
	},
	upgrade(e$1) {},
	whenDefined(e$1) {
		return Promise.resolve(s);
	}
}, r$1, m$1 = class {
	constructor(t$1, n$2 = {}) {
		p$1(this, r$1);
		f$2(this, r$1, n$2 == null ? void 0 : n$2.detail);
	}
	get detail() {
		return g$1(this, r$1);
	}
	initCustomEvent() {}
};
r$1 = /* @__PURE__ */ new WeakMap();
function y(e$1, t$1) {
	return new s();
}
var h = {
	document: { createElement: y },
	DocumentFragment,
	customElements: b,
	CustomEvent: m$1,
	EventTarget: o,
	HTMLElement: s,
	HTMLVideoElement: a
}, E$1 = typeof window == "undefined" || typeof globalThis.customElements == "undefined", l = E$1 ? h : globalThis;
E$1 ? h.document : globalThis.document;
l.customElements.get("mux-player") || (l.customElements.define("mux-player", Ci), l.MuxPlayerElement = Ci);

//#endregion
//#region node_modules/@mux/mux-player-react/dist/index.mjs
var M = parseInt(import_react.version) >= 19, E = {
	className: "class",
	classname: "class",
	htmlFor: "for",
	crossOrigin: "crossorigin",
	viewBox: "viewBox",
	playsInline: "playsinline",
	autoPlay: "autoplay",
	playbackRate: "playbackrate"
}, B = (e$1) => e$1 == null, ee = (e$1, t$1) => B(t$1) ? !1 : e$1 in t$1, te = (e$1) => e$1.replace(/[A-Z]/g, (t$1) => `-${t$1.toLowerCase()}`), ne = (e$1, t$1) => {
	if (!(!M && typeof t$1 == "boolean" && !t$1)) {
		if (ee(e$1, E)) return E[e$1];
		if (typeof t$1 != "undefined") return /[A-Z]/.test(e$1) ? te(e$1) : e$1;
	}
};
var ae = (e$1, t$1) => !M && typeof e$1 == "boolean" ? "" : e$1, P = (e$1 = {}) => {
	let { ref: t$1,...n$2 } = e$1;
	return Object.entries(n$2).reduce((o$3, [a$2, l$3]) => {
		let i$1 = ne(a$2, l$3);
		if (!i$1) return o$3;
		return o$3[i$1] = ae(l$3, a$2), o$3;
	}, {});
};
function x(e$1, t$1) {
	if (typeof e$1 == "function") return e$1(t$1);
	e$1 != null && (e$1.current = t$1);
}
function re(...e$1) {
	return (t$1) => {
		let n$2 = !1, o$3 = e$1.map((a$2) => {
			let l$3 = x(a$2, t$1);
			return !n$2 && typeof l$3 == "function" && (n$2 = !0), l$3;
		});
		if (n$2) return () => {
			for (let a$2 = 0; a$2 < o$3.length; a$2++) {
				let l$3 = o$3[a$2];
				typeof l$3 == "function" ? l$3() : x(e$1[a$2], null);
			}
		};
	};
}
function f$1(...e$1) {
	return import_react.useCallback(re(...e$1), e$1);
}
var oe = Object.prototype.hasOwnProperty, ue = (e$1, t$1) => {
	if (Object.is(e$1, t$1)) return !0;
	if (typeof e$1 != "object" || e$1 === null || typeof t$1 != "object" || t$1 === null) return !1;
	if (Array.isArray(e$1)) return !Array.isArray(t$1) || e$1.length !== t$1.length ? !1 : e$1.some((a$2, l$3) => t$1[l$3] === a$2);
	let n$2 = Object.keys(e$1), o$3 = Object.keys(t$1);
	if (n$2.length !== o$3.length) return !1;
	for (let a$2 = 0; a$2 < n$2.length; a$2++) if (!oe.call(t$1, n$2[a$2]) || !Object.is(e$1[n$2[a$2]], t$1[n$2[a$2]])) return !1;
	return !0;
}, p = (e$1, t$1, n$2) => !ue(t$1, e$1[n$2]), se = (e$1, t$1, n$2) => {
	e$1[n$2] = t$1;
}, ie = (e$1, t$1, n$2, o$3 = se, a$2 = p) => (0, import_react.useEffect)(() => {
	let l$3 = n$2 == null ? void 0 : n$2.current;
	l$3 && a$2(l$3, t$1, e$1) && o$3(l$3, t$1, e$1);
}, [n$2 == null ? void 0 : n$2.current, t$1]), u = ie;
var ye = () => {
	try {
		return "3.6.1";
	} catch {}
	return "UNKNOWN";
}, me = ye(), g = () => me;
var r = (e$1, t$1, n$2) => (0, import_react.useEffect)(() => {
	let o$3 = t$1 == null ? void 0 : t$1.current;
	if (!o$3 || !n$2) return;
	let a$2 = e$1, l$3 = n$2;
	return o$3.addEventListener(a$2, l$3), () => {
		o$3.removeEventListener(a$2, l$3);
	};
}, [
	t$1 == null ? void 0 : t$1.current,
	n$2,
	e$1
]);
var Pe = import_react.forwardRef(({ children: e$1,...t$1 }, n$2) => import_react.createElement("mux-player", {
	suppressHydrationWarning: !0,
	...P(t$1),
	ref: n$2
}, e$1)), xe = (e$1, t$1) => {
	let { onAbort: n$2, onCanPlay: o$3, onCanPlayThrough: a$2, onEmptied: l$3, onLoadStart: i$1, onLoadedData: c$3, onLoadedMetadata: v$3, onProgress: R, onDurationChange: T$2, onVolumeChange: h$2, onRateChange: b$4, onResize: C$5, onWaiting: k$1, onPlay: O$3, onPlaying: S$1, onTimeUpdate: w$2, onPause: N$3, onSeeking: L$2, onSeeked: A$3, onStalled: I$3, onSuspend: _$2, onEnded: K$2, onError: H$3, onCuePointChange: D$3, onChapterChange: V$2, metadata: W$2, tokens: U$3, paused: z$2, playbackId: F$2, playbackRates: G$2, currentTime: Z$1, themeProps: j$2, extraSourceParams: q$3, castCustomData: J$3, _hlsConfig: Y$4,...$$3 } = t$1;
	return u("tokens", U$3, e$1), u("playbackId", F$2, e$1), u("playbackRates", G$2, e$1), u("metadata", W$2, e$1), u("extraSourceParams", q$3, e$1), u("_hlsConfig", Y$4, e$1), u("themeProps", j$2, e$1), u("castCustomData", J$3, e$1), u("paused", z$2, e$1, (s$2, y$4) => {
		y$4 != null && (y$4 ? s$2.pause() : s$2.play());
	}, (s$2, y$4, Q$3) => s$2.hasAttribute("autoplay") && !s$2.hasPlayed ? !1 : p(s$2, y$4, Q$3)), u("currentTime", Z$1, e$1, (s$2, y$4) => {
		y$4 != null && (s$2.currentTime = y$4);
	}), r("abort", e$1, n$2), r("canplay", e$1, o$3), r("canplaythrough", e$1, a$2), r("emptied", e$1, l$3), r("loadstart", e$1, i$1), r("loadeddata", e$1, c$3), r("loadedmetadata", e$1, v$3), r("progress", e$1, R), r("durationchange", e$1, T$2), r("volumechange", e$1, h$2), r("ratechange", e$1, b$4), r("resize", e$1, C$5), r("waiting", e$1, k$1), r("play", e$1, O$3), r("playing", e$1, S$1), r("timeupdate", e$1, w$2), r("pause", e$1, N$3), r("seeking", e$1, L$2), r("seeked", e$1, A$3), r("stalled", e$1, I$3), r("suspend", e$1, _$2), r("ended", e$1, K$2), r("error", e$1, H$3), r("cuepointchange", e$1, D$3), r("chapterchange", e$1, V$2), [$$3];
}, de = g(), fe = "mux-player-react", ze = import_react.forwardRef((e$1, t$1) => {
	var i$1;
	let n$2 = (0, import_react.useRef)(null), o$3 = f$1(n$2, t$1), [a$2] = xe(n$2, e$1), [l$3] = (0, import_react.useState)((i$1 = e$1.playerInitTime) != null ? i$1 : Wr());
	return import_react.createElement(Pe, {
		ref: o$3,
		defaultHiddenCaptions: e$1.defaultHiddenCaptions,
		playerSoftwareName: fe,
		playerSoftwareVersion: de,
		playerInitTime: l$3,
		...a$2
	});
});

//#endregion
export { Gt as MaxResolution, f as MediaError, Xt as MinResolution, zt as RenditionOrder, ze as default, Wr as generatePlayerInitTime, fe as playerSoftwareName, de as playerSoftwareVersion };
//# sourceMappingURL=dist-BzN3Lejy.js.map