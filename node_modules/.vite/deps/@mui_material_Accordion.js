import { __commonJS, __toESM, require_react } from "./react-BaqBjuxQ.js";
import { alpha, duration, generateUtilityClass, getOverlayAlpha, styled_default, useTheme } from "./zero-styled-n2GRcgfb.js";
import { require_prop_types } from "./prop-types-ClXjdD0r.js";
import { clsx_default } from "./clsx-B3Mh1aDB.js";
import { composeClasses, generateUtilityClasses, memoTheme_default, useDefaultProps } from "./DefaultPropsProvider-CDDLgTZJ.js";
import "./emotion-react.browser.development.esm-C9cTS4XX.js";
import { require_jsx_runtime } from "./jsx-runtime-2WNxXIKR.js";
import { chainPropTypes, useForkRef_default } from "./TransitionGroupContext-CJ4Ozc7E.js";
import "./setPrototypeOf-BBAscv4N.js";
import "./react-dom-BFa_OxSM.js";
import { Transition_default, getTransitionProps } from "./utils-TFqavO_4.js";
import { AccordionContext_default, elementTypeAcceptingRef_default, useSlot, useTimeout } from "./useSlot-C3GYFsQV.js";

//#region node_modules/@mui/utils/esm/useControlled/useControlled.js
var import_react = /* @__PURE__ */ __toESM(require_react(), 1);
function useControlled(props) {
	const { controlled, default: defaultProp, name, state = "value" } = props;
	const { current: isControlled } = import_react.useRef(controlled !== void 0);
	const [valueState, setValue] = import_react.useState(defaultProp);
	const value = isControlled ? controlled : valueState;
	{
		import_react.useEffect(() => {
			if (isControlled !== (controlled !== void 0)) console.error([
				`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`,
				"Elements should not switch from uncontrolled to controlled (or vice versa).",
				`Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`,
				"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.",
				"More info: https://fb.me/react-controlled-components"
			].join("\n"));
		}, [
			state,
			name,
			controlled
		]);
		const { current: defaultValue } = import_react.useRef(defaultProp);
		import_react.useEffect(() => {
			if (!isControlled && JSON.stringify(defaultProp) !== JSON.stringify(defaultValue)) console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
		}, [JSON.stringify(defaultProp)]);
	}
	const setValueIfUncontrolled = import_react.useCallback((newValue) => {
		if (!isControlled) setValue(newValue);
	}, []);
	return [value, setValueIfUncontrolled];
}

//#endregion
//#region node_modules/@mui/material/esm/utils/useControlled.js
var import_prop_types$2 = /* @__PURE__ */ __toESM(require_prop_types(), 1);
var useControlled_default = useControlled;

//#endregion
//#region node_modules/@mui/material/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = /* @__PURE__ */ __commonJS({ "node_modules/@mui/material/node_modules/react-is/cjs/react-is.development.js": ((exports) => {
	(function() {
		function typeOf(object) {
			if ("object" === typeof object && null !== object) {
				var $$typeof = object.$$typeof;
				switch ($$typeof) {
					case REACT_ELEMENT_TYPE: switch (object = object.type, object) {
						case REACT_FRAGMENT_TYPE:
						case REACT_PROFILER_TYPE:
						case REACT_STRICT_MODE_TYPE:
						case REACT_SUSPENSE_TYPE:
						case REACT_SUSPENSE_LIST_TYPE:
						case REACT_VIEW_TRANSITION_TYPE: return object;
						default: switch (object = object && object.$$typeof, object) {
							case REACT_CONTEXT_TYPE:
							case REACT_FORWARD_REF_TYPE:
							case REACT_LAZY_TYPE:
							case REACT_MEMO_TYPE: return object;
							case REACT_CONSUMER_TYPE: return object;
							default: return $$typeof;
						}
					}
					case REACT_PORTAL_TYPE: return $$typeof;
				}
			}
		}
		var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_VIEW_TRANSITION_TYPE = Symbol.for("react.view_transition"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
		exports.ContextConsumer = REACT_CONSUMER_TYPE;
		exports.ContextProvider = REACT_CONTEXT_TYPE;
		exports.Element = REACT_ELEMENT_TYPE;
		exports.ForwardRef = REACT_FORWARD_REF_TYPE;
		exports.Fragment = REACT_FRAGMENT_TYPE;
		exports.Lazy = REACT_LAZY_TYPE;
		exports.Memo = REACT_MEMO_TYPE;
		exports.Portal = REACT_PORTAL_TYPE;
		exports.Profiler = REACT_PROFILER_TYPE;
		exports.StrictMode = REACT_STRICT_MODE_TYPE;
		exports.Suspense = REACT_SUSPENSE_TYPE;
		exports.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
		exports.isContextConsumer = function(object) {
			return typeOf(object) === REACT_CONSUMER_TYPE;
		};
		exports.isContextProvider = function(object) {
			return typeOf(object) === REACT_CONTEXT_TYPE;
		};
		exports.isElement = function(object) {
			return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
		};
		exports.isForwardRef = function(object) {
			return typeOf(object) === REACT_FORWARD_REF_TYPE;
		};
		exports.isFragment = function(object) {
			return typeOf(object) === REACT_FRAGMENT_TYPE;
		};
		exports.isLazy = function(object) {
			return typeOf(object) === REACT_LAZY_TYPE;
		};
		exports.isMemo = function(object) {
			return typeOf(object) === REACT_MEMO_TYPE;
		};
		exports.isPortal = function(object) {
			return typeOf(object) === REACT_PORTAL_TYPE;
		};
		exports.isProfiler = function(object) {
			return typeOf(object) === REACT_PROFILER_TYPE;
		};
		exports.isStrictMode = function(object) {
			return typeOf(object) === REACT_STRICT_MODE_TYPE;
		};
		exports.isSuspense = function(object) {
			return typeOf(object) === REACT_SUSPENSE_TYPE;
		};
		exports.isSuspenseList = function(object) {
			return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
		};
		exports.isValidElementType = function(type) {
			return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? !0 : !1;
		};
		exports.typeOf = typeOf;
	})();
}) });

//#endregion
//#region node_modules/@mui/material/node_modules/react-is/index.js
var require_react_is = /* @__PURE__ */ __commonJS({ "node_modules/@mui/material/node_modules/react-is/index.js": ((exports, module) => {
	module.exports = require_react_is_development();
}) });

//#endregion
//#region node_modules/@mui/material/esm/Collapse/collapseClasses.js
function getCollapseUtilityClass(slot) {
	return generateUtilityClass("MuiCollapse", slot);
}
var collapseClasses = generateUtilityClasses("MuiCollapse", [
	"root",
	"horizontal",
	"vertical",
	"entered",
	"hidden",
	"wrapper",
	"wrapperInner"
]);

//#endregion
//#region node_modules/@mui/material/esm/Collapse/Collapse.js
var import_jsx_runtime = /* @__PURE__ */ __toESM(require_jsx_runtime(), 1);
var useUtilityClasses$2 = (ownerState) => {
	const { orientation, classes } = ownerState;
	const slots = {
		root: ["root", `${orientation}`],
		entered: ["entered"],
		hidden: ["hidden"],
		wrapper: ["wrapper", `${orientation}`],
		wrapperInner: ["wrapperInner", `${orientation}`]
	};
	return composeClasses(slots, getCollapseUtilityClass, classes);
};
var CollapseRoot = styled_default("div", {
	name: "MuiCollapse",
	slot: "Root",
	overridesResolver: (props, styles) => {
		const { ownerState } = props;
		return [
			styles.root,
			styles[ownerState.orientation],
			ownerState.state === "entered" && styles.entered,
			ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && styles.hidden
		];
	}
})(memoTheme_default(({ theme }) => ({
	height: 0,
	overflow: "hidden",
	transition: theme.transitions.create("height"),
	variants: [
		{
			props: { orientation: "horizontal" },
			style: {
				height: "auto",
				width: 0,
				transition: theme.transitions.create("width")
			}
		},
		{
			props: { state: "entered" },
			style: {
				height: "auto",
				overflow: "visible"
			}
		},
		{
			props: {
				state: "entered",
				orientation: "horizontal"
			},
			style: { width: "auto" }
		},
		{
			props: ({ ownerState }) => ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px",
			style: { visibility: "hidden" }
		}
	]
})));
var CollapseWrapper = styled_default("div", {
	name: "MuiCollapse",
	slot: "Wrapper"
})({
	display: "flex",
	width: "100%",
	variants: [{
		props: { orientation: "horizontal" },
		style: {
			width: "auto",
			height: "100%"
		}
	}]
});
var CollapseWrapperInner = styled_default("div", {
	name: "MuiCollapse",
	slot: "WrapperInner"
})({
	width: "100%",
	variants: [{
		props: { orientation: "horizontal" },
		style: {
			width: "auto",
			height: "100%"
		}
	}]
});
/**
* The Collapse transition is used by the
* [Vertical Stepper](/material-ui/react-stepper/#vertical-stepper) StepContent component.
* It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
*/
var Collapse = /* @__PURE__ */ import_react.forwardRef(function Collapse$1(inProps, ref) {
	const props = useDefaultProps({
		props: inProps,
		name: "MuiCollapse"
	});
	const { addEndListener, children, className, collapsedSize: collapsedSizeProp = "0px", component, easing, in: inProp, onEnter, onEntered, onEntering, onExit, onExited, onExiting, orientation = "vertical", style, timeout = duration.standard, TransitionComponent = Transition_default,...other } = props;
	const ownerState = {
		...props,
		orientation,
		collapsedSize: collapsedSizeProp
	};
	const classes = useUtilityClasses$2(ownerState);
	const theme = useTheme();
	const timer = useTimeout();
	const wrapperRef = import_react.useRef(null);
	const autoTransitionDuration = import_react.useRef();
	const collapsedSize = typeof collapsedSizeProp === "number" ? `${collapsedSizeProp}px` : collapsedSizeProp;
	const isHorizontal = orientation === "horizontal";
	const size = isHorizontal ? "width" : "height";
	const nodeRef = import_react.useRef(null);
	const handleRef = useForkRef_default(ref, nodeRef);
	const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
		if (callback) {
			const node = nodeRef.current;
			if (maybeIsAppearing === void 0) callback(node);
			else callback(node, maybeIsAppearing);
		}
	};
	const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal ? "clientWidth" : "clientHeight"] : 0;
	const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
		if (wrapperRef.current && isHorizontal) wrapperRef.current.style.position = "absolute";
		node.style[size] = collapsedSize;
		if (onEnter) onEnter(node, isAppearing);
	});
	const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
		const wrapperSize = getWrapperSize();
		if (wrapperRef.current && isHorizontal) wrapperRef.current.style.position = "";
		const { duration: transitionDuration, easing: transitionTimingFunction } = getTransitionProps({
			style,
			timeout,
			easing
		}, { mode: "enter" });
		if (timeout === "auto") {
			const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
			node.style.transitionDuration = `${duration2}ms`;
			autoTransitionDuration.current = duration2;
		} else node.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
		node.style[size] = `${wrapperSize}px`;
		node.style.transitionTimingFunction = transitionTimingFunction;
		if (onEntering) onEntering(node, isAppearing);
	});
	const handleEntered = normalizedTransitionCallback((node, isAppearing) => {
		node.style[size] = "auto";
		if (onEntered) onEntered(node, isAppearing);
	});
	const handleExit = normalizedTransitionCallback((node) => {
		node.style[size] = `${getWrapperSize()}px`;
		if (onExit) onExit(node);
	});
	const handleExited = normalizedTransitionCallback(onExited);
	const handleExiting = normalizedTransitionCallback((node) => {
		const wrapperSize = getWrapperSize();
		const { duration: transitionDuration, easing: transitionTimingFunction } = getTransitionProps({
			style,
			timeout,
			easing
		}, { mode: "exit" });
		if (timeout === "auto") {
			const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
			node.style.transitionDuration = `${duration2}ms`;
			autoTransitionDuration.current = duration2;
		} else node.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
		node.style[size] = collapsedSize;
		node.style.transitionTimingFunction = transitionTimingFunction;
		if (onExiting) onExiting(node);
	});
	const handleAddEndListener = (next) => {
		if (timeout === "auto") timer.start(autoTransitionDuration.current || 0, next);
		if (addEndListener) addEndListener(nodeRef.current, next);
	};
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TransitionComponent, {
		in: inProp,
		onEnter: handleEnter,
		onEntered: handleEntered,
		onEntering: handleEntering,
		onExit: handleExit,
		onExited: handleExited,
		onExiting: handleExiting,
		addEndListener: handleAddEndListener,
		nodeRef,
		timeout: timeout === "auto" ? null : timeout,
		...other,
		children: (state, { ownerState: incomingOwnerState,...restChildProps }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CollapseRoot, {
			as: component,
			className: clsx_default(classes.root, className, {
				"entered": classes.entered,
				"exited": !inProp && collapsedSize === "0px" && classes.hidden
			}[state]),
			style: {
				[isHorizontal ? "minWidth" : "minHeight"]: collapsedSize,
				...style
			},
			ref: handleRef,
			ownerState: {
				...ownerState,
				state
			},
			...restChildProps,
			children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CollapseWrapper, {
				ownerState: {
					...ownerState,
					state
				},
				className: classes.wrapper,
				ref: wrapperRef,
				children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CollapseWrapperInner, {
					ownerState: {
						...ownerState,
						state
					},
					className: classes.wrapperInner,
					children
				})
			})
		})
	});
});
Collapse.propTypes = {
	addEndListener: import_prop_types$2.default.func,
	children: import_prop_types$2.default.node,
	classes: import_prop_types$2.default.object,
	className: import_prop_types$2.default.string,
	collapsedSize: import_prop_types$2.default.oneOfType([import_prop_types$2.default.number, import_prop_types$2.default.string]),
	component: elementTypeAcceptingRef_default,
	easing: import_prop_types$2.default.oneOfType([import_prop_types$2.default.shape({
		enter: import_prop_types$2.default.string,
		exit: import_prop_types$2.default.string
	}), import_prop_types$2.default.string]),
	in: import_prop_types$2.default.bool,
	onEnter: import_prop_types$2.default.func,
	onEntered: import_prop_types$2.default.func,
	onEntering: import_prop_types$2.default.func,
	onExit: import_prop_types$2.default.func,
	onExited: import_prop_types$2.default.func,
	onExiting: import_prop_types$2.default.func,
	orientation: import_prop_types$2.default.oneOf(["horizontal", "vertical"]),
	style: import_prop_types$2.default.object,
	sx: import_prop_types$2.default.oneOfType([
		import_prop_types$2.default.arrayOf(import_prop_types$2.default.oneOfType([
			import_prop_types$2.default.func,
			import_prop_types$2.default.object,
			import_prop_types$2.default.bool
		])),
		import_prop_types$2.default.func,
		import_prop_types$2.default.object
	]),
	timeout: import_prop_types$2.default.oneOfType([
		import_prop_types$2.default.oneOf(["auto"]),
		import_prop_types$2.default.number,
		import_prop_types$2.default.shape({
			appear: import_prop_types$2.default.number,
			enter: import_prop_types$2.default.number,
			exit: import_prop_types$2.default.number
		})
	])
};
if (Collapse) Collapse.muiSupportAuto = true;
var Collapse_default = Collapse;

//#endregion
//#region node_modules/@mui/utils/esm/integerPropType/integerPropType.js
function getTypeByValue(value) {
	const valueType = typeof value;
	switch (valueType) {
		case "number":
			if (Number.isNaN(value)) return "NaN";
			if (!Number.isFinite(value)) return "Infinity";
			if (value !== Math.floor(value)) return "float";
			return "number";
		case "object":
			if (value === null) return "null";
			return value.constructor.name;
		default: return valueType;
	}
}
function requiredInteger(props, propName, componentName, location) {
	const propValue = props[propName];
	if (propValue == null || !Number.isInteger(propValue)) {
		const propType = getTypeByValue(propValue);
		return /* @__PURE__ */ new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
	}
	return null;
}
function validator(props, propName, componentName, location) {
	if (props[propName] === void 0) return null;
	return requiredInteger(props, propName, componentName, location);
}
function validatorNoop() {
	return null;
}
validator.isRequired = requiredInteger;
validatorNoop.isRequired = validatorNoop;
var integerPropType = validator;
var integerPropType_default = integerPropType;

//#endregion
//#region node_modules/@mui/material/esm/Paper/paperClasses.js
function getPaperUtilityClass(slot) {
	return generateUtilityClass("MuiPaper", slot);
}
var paperClasses = generateUtilityClasses("MuiPaper", [
	"root",
	"rounded",
	"outlined",
	"elevation",
	"elevation0",
	"elevation1",
	"elevation2",
	"elevation3",
	"elevation4",
	"elevation5",
	"elevation6",
	"elevation7",
	"elevation8",
	"elevation9",
	"elevation10",
	"elevation11",
	"elevation12",
	"elevation13",
	"elevation14",
	"elevation15",
	"elevation16",
	"elevation17",
	"elevation18",
	"elevation19",
	"elevation20",
	"elevation21",
	"elevation22",
	"elevation23",
	"elevation24"
]);

//#endregion
//#region node_modules/@mui/material/esm/Paper/Paper.js
var import_prop_types$1 = /* @__PURE__ */ __toESM(require_prop_types(), 1);
var useUtilityClasses$1 = (ownerState) => {
	const { square, elevation, variant, classes } = ownerState;
	const slots = { root: [
		"root",
		variant,
		!square && "rounded",
		variant === "elevation" && `elevation${elevation}`
	] };
	return composeClasses(slots, getPaperUtilityClass, classes);
};
var PaperRoot = styled_default("div", {
	name: "MuiPaper",
	slot: "Root",
	overridesResolver: (props, styles) => {
		const { ownerState } = props;
		return [
			styles.root,
			styles[ownerState.variant],
			!ownerState.square && styles.rounded,
			ownerState.variant === "elevation" && styles[`elevation${ownerState.elevation}`]
		];
	}
})(memoTheme_default(({ theme }) => ({
	backgroundColor: (theme.vars || theme).palette.background.paper,
	color: (theme.vars || theme).palette.text.primary,
	transition: theme.transitions.create("box-shadow"),
	variants: [
		{
			props: ({ ownerState }) => !ownerState.square,
			style: { borderRadius: theme.shape.borderRadius }
		},
		{
			props: { variant: "outlined" },
			style: { border: `1px solid ${(theme.vars || theme).palette.divider}` }
		},
		{
			props: { variant: "elevation" },
			style: {
				boxShadow: "var(--Paper-shadow)",
				backgroundImage: "var(--Paper-overlay)"
			}
		}
	]
})));
var Paper = /* @__PURE__ */ import_react.forwardRef(function Paper$1(inProps, ref) {
	const props = useDefaultProps({
		props: inProps,
		name: "MuiPaper"
	});
	const theme = useTheme();
	const { className, component = "div", elevation = 1, square = false, variant = "elevation",...other } = props;
	const ownerState = {
		...props,
		component,
		elevation,
		square,
		variant
	};
	const classes = useUtilityClasses$1(ownerState);
	if (theme.shadows[elevation] === void 0) console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PaperRoot, {
		as: component,
		ownerState,
		className: clsx_default(classes.root, className),
		ref,
		...other,
		style: {
			...variant === "elevation" && {
				"--Paper-shadow": (theme.vars || theme).shadows[elevation],
				...theme.vars && { "--Paper-overlay": theme.vars.overlays?.[elevation] },
				...!theme.vars && theme.palette.mode === "dark" && { "--Paper-overlay": `linear-gradient(${alpha("#fff", getOverlayAlpha(elevation))}, ${alpha("#fff", getOverlayAlpha(elevation))})` }
			},
			...other.style
		}
	});
});
Paper.propTypes = {
	children: import_prop_types$1.default.node,
	classes: import_prop_types$1.default.object,
	className: import_prop_types$1.default.string,
	component: import_prop_types$1.default.elementType,
	elevation: chainPropTypes(integerPropType_default, (props) => {
		const { elevation, variant } = props;
		if (elevation > 0 && variant === "outlined") return /* @__PURE__ */ new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
		return null;
	}),
	square: import_prop_types$1.default.bool,
	style: import_prop_types$1.default.object,
	sx: import_prop_types$1.default.oneOfType([
		import_prop_types$1.default.arrayOf(import_prop_types$1.default.oneOfType([
			import_prop_types$1.default.func,
			import_prop_types$1.default.object,
			import_prop_types$1.default.bool
		])),
		import_prop_types$1.default.func,
		import_prop_types$1.default.object
	]),
	variant: import_prop_types$1.default.oneOfType([import_prop_types$1.default.oneOf(["elevation", "outlined"]), import_prop_types$1.default.string])
};
var Paper_default = Paper;

//#endregion
//#region node_modules/@mui/material/esm/Accordion/accordionClasses.js
var import_react_is = /* @__PURE__ */ __toESM(require_react_is(), 1);
function getAccordionUtilityClass(slot) {
	return generateUtilityClass("MuiAccordion", slot);
}
var accordionClasses = generateUtilityClasses("MuiAccordion", [
	"root",
	"heading",
	"rounded",
	"expanded",
	"disabled",
	"gutters",
	"region"
]);
var accordionClasses_default = accordionClasses;

//#endregion
//#region node_modules/@mui/material/esm/Accordion/Accordion.js
var import_prop_types = /* @__PURE__ */ __toESM(require_prop_types(), 1);
var useUtilityClasses = (ownerState) => {
	const { classes, square, expanded, disabled, disableGutters } = ownerState;
	return composeClasses({
		root: [
			"root",
			!square && "rounded",
			expanded && "expanded",
			disabled && "disabled",
			!disableGutters && "gutters"
		],
		heading: ["heading"],
		region: ["region"]
	}, getAccordionUtilityClass, classes);
};
var AccordionRoot = styled_default(Paper_default, {
	name: "MuiAccordion",
	slot: "Root",
	overridesResolver: (props, styles) => {
		const { ownerState } = props;
		return [
			{ [`& .${accordionClasses_default.region}`]: styles.region },
			styles.root,
			!ownerState.square && styles.rounded,
			!ownerState.disableGutters && styles.gutters
		];
	}
})(memoTheme_default(({ theme }) => {
	const transition = { duration: theme.transitions.duration.shortest };
	return {
		position: "relative",
		transition: theme.transitions.create(["margin"], transition),
		overflowAnchor: "none",
		"&::before": {
			position: "absolute",
			left: 0,
			top: -1,
			right: 0,
			height: 1,
			content: "\"\"",
			opacity: 1,
			backgroundColor: (theme.vars || theme).palette.divider,
			transition: theme.transitions.create(["opacity", "background-color"], transition)
		},
		"&:first-of-type": { "&::before": { display: "none" } },
		[`&.${accordionClasses_default.expanded}`]: {
			"&::before": { opacity: 0 },
			"&:first-of-type": { marginTop: 0 },
			"&:last-of-type": { marginBottom: 0 },
			"& + &": { "&::before": { display: "none" } }
		},
		[`&.${accordionClasses_default.disabled}`]: { backgroundColor: (theme.vars || theme).palette.action.disabledBackground }
	};
}), memoTheme_default(({ theme }) => ({ variants: [{
	props: (props) => !props.square,
	style: {
		borderRadius: 0,
		"&:first-of-type": {
			borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
			borderTopRightRadius: (theme.vars || theme).shape.borderRadius
		},
		"&:last-of-type": {
			borderBottomLeftRadius: (theme.vars || theme).shape.borderRadius,
			borderBottomRightRadius: (theme.vars || theme).shape.borderRadius,
			"@supports (-ms-ime-align: auto)": {
				borderBottomLeftRadius: 0,
				borderBottomRightRadius: 0
			}
		}
	}
}, {
	props: (props) => !props.disableGutters,
	style: { [`&.${accordionClasses_default.expanded}`]: { margin: "16px 0" } }
}] })));
var AccordionHeading = styled_default("h3", {
	name: "MuiAccordion",
	slot: "Heading"
})({ all: "unset" });
var AccordionRegion = styled_default("div", {
	name: "MuiAccordion",
	slot: "Region"
})({});
var Accordion = /* @__PURE__ */ import_react.forwardRef(function Accordion$1(inProps, ref) {
	const props = useDefaultProps({
		props: inProps,
		name: "MuiAccordion"
	});
	const { children: childrenProp, className, defaultExpanded = false, disabled = false, disableGutters = false, expanded: expandedProp, onChange, square = false, slots = {}, slotProps = {}, TransitionComponent: TransitionComponentProp, TransitionProps: TransitionPropsProp,...other } = props;
	const [expanded, setExpandedState] = useControlled_default({
		controlled: expandedProp,
		default: defaultExpanded,
		name: "Accordion",
		state: "expanded"
	});
	const handleChange = import_react.useCallback((event) => {
		setExpandedState(!expanded);
		if (onChange) onChange(event, !expanded);
	}, [
		expanded,
		onChange,
		setExpandedState
	]);
	const [summary, ...children] = import_react.Children.toArray(childrenProp);
	const contextValue = import_react.useMemo(() => ({
		expanded,
		disabled,
		disableGutters,
		toggle: handleChange
	}), [
		expanded,
		disabled,
		disableGutters,
		handleChange
	]);
	const ownerState = {
		...props,
		square,
		disabled,
		disableGutters,
		expanded
	};
	const classes = useUtilityClasses(ownerState);
	const backwardCompatibleSlots = {
		transition: TransitionComponentProp,
		...slots
	};
	const backwardCompatibleSlotProps = {
		transition: TransitionPropsProp,
		...slotProps
	};
	const externalForwardedProps = {
		slots: backwardCompatibleSlots,
		slotProps: backwardCompatibleSlotProps
	};
	const [RootSlot, rootProps] = useSlot("root", {
		elementType: AccordionRoot,
		externalForwardedProps: {
			...externalForwardedProps,
			...other
		},
		className: clsx_default(classes.root, className),
		shouldForwardComponentProp: true,
		ownerState,
		ref,
		additionalProps: { square }
	});
	const [AccordionHeadingSlot, accordionProps] = useSlot("heading", {
		elementType: AccordionHeading,
		externalForwardedProps,
		className: classes.heading,
		ownerState
	});
	const [TransitionSlot, transitionProps] = useSlot("transition", {
		elementType: Collapse_default,
		externalForwardedProps,
		ownerState
	});
	const [AccordionRegionSlot, accordionRegionProps] = useSlot("region", {
		elementType: AccordionRegion,
		externalForwardedProps,
		ownerState,
		className: classes.region,
		additionalProps: {
			"aria-labelledby": summary.props.id,
			id: summary.props["aria-controls"],
			role: "region"
		}
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(RootSlot, {
		...rootProps,
		children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionHeadingSlot, {
			...accordionProps,
			children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionContext_default.Provider, {
				value: contextValue,
				children: summary
			})
		}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TransitionSlot, {
			in: expanded,
			timeout: "auto",
			...transitionProps,
			children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionRegionSlot, {
				...accordionRegionProps,
				children
			})
		})]
	});
});
Accordion.propTypes = {
	children: chainPropTypes(import_prop_types.default.node.isRequired, (props) => {
		const summary = import_react.Children.toArray(props.children)[0];
		if ((0, import_react_is.isFragment)(summary)) return /* @__PURE__ */ new Error("MUI: The Accordion doesn't accept a Fragment as a child. Consider providing an array instead.");
		if (!/* @__PURE__ */ import_react.isValidElement(summary)) return /* @__PURE__ */ new Error("MUI: Expected the first child of Accordion to be a valid element.");
		return null;
	}),
	classes: import_prop_types.default.object,
	className: import_prop_types.default.string,
	defaultExpanded: import_prop_types.default.bool,
	disabled: import_prop_types.default.bool,
	disableGutters: import_prop_types.default.bool,
	expanded: import_prop_types.default.bool,
	onChange: import_prop_types.default.func,
	slotProps: import_prop_types.default.shape({
		heading: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
		region: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
		root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
		transition: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
	}),
	slots: import_prop_types.default.shape({
		heading: import_prop_types.default.elementType,
		region: import_prop_types.default.elementType,
		root: import_prop_types.default.elementType,
		transition: import_prop_types.default.elementType
	}),
	square: import_prop_types.default.bool,
	sx: import_prop_types.default.oneOfType([
		import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([
			import_prop_types.default.func,
			import_prop_types.default.object,
			import_prop_types.default.bool
		])),
		import_prop_types.default.func,
		import_prop_types.default.object
	]),
	TransitionComponent: import_prop_types.default.elementType,
	TransitionProps: import_prop_types.default.object
};
var Accordion_default = Accordion;

//#endregion
export { accordionClasses_default as accordionClasses, Accordion_default as default, getAccordionUtilityClass };
//# sourceMappingURL=@mui_material_Accordion.js.map