//#region node_modules/media-chrome/dist/constants.js
var MediaUIEvents = {
	MEDIA_PLAY_REQUEST: "mediaplayrequest",
	MEDIA_PAUSE_REQUEST: "mediapauserequest",
	MEDIA_MUTE_REQUEST: "mediamuterequest",
	MEDIA_UNMUTE_REQUEST: "mediaunmuterequest",
	MEDIA_VOLUME_REQUEST: "mediavolumerequest",
	MEDIA_SEEK_REQUEST: "mediaseekrequest",
	MEDIA_AIRPLAY_REQUEST: "mediaairplayrequest",
	MEDIA_ENTER_FULLSCREEN_REQUEST: "mediaenterfullscreenrequest",
	MEDIA_EXIT_FULLSCREEN_REQUEST: "mediaexitfullscreenrequest",
	MEDIA_PREVIEW_REQUEST: "mediapreviewrequest",
	MEDIA_ENTER_PIP_REQUEST: "mediaenterpiprequest",
	MEDIA_EXIT_PIP_REQUEST: "mediaexitpiprequest",
	MEDIA_ENTER_CAST_REQUEST: "mediaentercastrequest",
	MEDIA_EXIT_CAST_REQUEST: "mediaexitcastrequest",
	MEDIA_SHOW_TEXT_TRACKS_REQUEST: "mediashowtexttracksrequest",
	MEDIA_HIDE_TEXT_TRACKS_REQUEST: "mediahidetexttracksrequest",
	MEDIA_SHOW_SUBTITLES_REQUEST: "mediashowsubtitlesrequest",
	MEDIA_DISABLE_SUBTITLES_REQUEST: "mediadisablesubtitlesrequest",
	MEDIA_TOGGLE_SUBTITLES_REQUEST: "mediatogglesubtitlesrequest",
	MEDIA_PLAYBACK_RATE_REQUEST: "mediaplaybackraterequest",
	MEDIA_RENDITION_REQUEST: "mediarenditionrequest",
	MEDIA_AUDIO_TRACK_REQUEST: "mediaaudiotrackrequest",
	MEDIA_SEEK_TO_LIVE_REQUEST: "mediaseektoliverequest",
	REGISTER_MEDIA_STATE_RECEIVER: "registermediastatereceiver",
	UNREGISTER_MEDIA_STATE_RECEIVER: "unregistermediastatereceiver"
};
var MediaStateReceiverAttributes = {
	MEDIA_CHROME_ATTRIBUTES: "mediachromeattributes",
	MEDIA_CONTROLLER: "mediacontroller"
};
var MediaUIProps = {
	MEDIA_AIRPLAY_UNAVAILABLE: "mediaAirplayUnavailable",
	MEDIA_AUDIO_TRACK_ENABLED: "mediaAudioTrackEnabled",
	MEDIA_AUDIO_TRACK_LIST: "mediaAudioTrackList",
	MEDIA_AUDIO_TRACK_UNAVAILABLE: "mediaAudioTrackUnavailable",
	MEDIA_BUFFERED: "mediaBuffered",
	MEDIA_CAST_UNAVAILABLE: "mediaCastUnavailable",
	MEDIA_CHAPTERS_CUES: "mediaChaptersCues",
	MEDIA_CURRENT_TIME: "mediaCurrentTime",
	MEDIA_DURATION: "mediaDuration",
	MEDIA_ENDED: "mediaEnded",
	MEDIA_ERROR: "mediaError",
	MEDIA_ERROR_CODE: "mediaErrorCode",
	MEDIA_ERROR_MESSAGE: "mediaErrorMessage",
	MEDIA_FULLSCREEN_UNAVAILABLE: "mediaFullscreenUnavailable",
	MEDIA_HAS_PLAYED: "mediaHasPlayed",
	MEDIA_HEIGHT: "mediaHeight",
	MEDIA_IS_AIRPLAYING: "mediaIsAirplaying",
	MEDIA_IS_CASTING: "mediaIsCasting",
	MEDIA_IS_FULLSCREEN: "mediaIsFullscreen",
	MEDIA_IS_PIP: "mediaIsPip",
	MEDIA_LOADING: "mediaLoading",
	MEDIA_MUTED: "mediaMuted",
	MEDIA_PAUSED: "mediaPaused",
	MEDIA_PIP_UNAVAILABLE: "mediaPipUnavailable",
	MEDIA_PLAYBACK_RATE: "mediaPlaybackRate",
	MEDIA_PREVIEW_CHAPTER: "mediaPreviewChapter",
	MEDIA_PREVIEW_COORDS: "mediaPreviewCoords",
	MEDIA_PREVIEW_IMAGE: "mediaPreviewImage",
	MEDIA_PREVIEW_TIME: "mediaPreviewTime",
	MEDIA_RENDITION_LIST: "mediaRenditionList",
	MEDIA_RENDITION_SELECTED: "mediaRenditionSelected",
	MEDIA_RENDITION_UNAVAILABLE: "mediaRenditionUnavailable",
	MEDIA_SEEKABLE: "mediaSeekable",
	MEDIA_STREAM_TYPE: "mediaStreamType",
	MEDIA_SUBTITLES_LIST: "mediaSubtitlesList",
	MEDIA_SUBTITLES_SHOWING: "mediaSubtitlesShowing",
	MEDIA_TARGET_LIVE_WINDOW: "mediaTargetLiveWindow",
	MEDIA_TIME_IS_LIVE: "mediaTimeIsLive",
	MEDIA_VOLUME: "mediaVolume",
	MEDIA_VOLUME_LEVEL: "mediaVolumeLevel",
	MEDIA_VOLUME_UNAVAILABLE: "mediaVolumeUnavailable",
	MEDIA_LANG: "mediaLang",
	MEDIA_WIDTH: "mediaWidth"
};
var MediaUIPropsEntries = Object.entries(MediaUIProps);
var MediaUIAttributes = MediaUIPropsEntries.reduce((dictObj, [key, propName]) => {
	dictObj[key] = propName.toLowerCase();
	return dictObj;
}, {});
var MediaStateChangeEvents = MediaUIPropsEntries.reduce((dictObj, [key, propName]) => {
	dictObj[key] = propName.toLowerCase();
	return dictObj;
}, {
	USER_INACTIVE_CHANGE: "userinactivechange",
	BREAKPOINTS_CHANGE: "breakpointchange",
	BREAKPOINTS_COMPUTED: "breakpointscomputed"
});
var StateChangeEventToAttributeMap = Object.entries(MediaStateChangeEvents).reduce((mapObj, [key, eventType]) => {
	const attrName = MediaUIAttributes[key];
	if (attrName) mapObj[eventType] = attrName;
	return mapObj;
}, { userinactivechange: "userinactive" });
var AttributeToStateChangeEventMap = Object.entries(MediaUIAttributes).reduce((mapObj, [key, attrName]) => {
	const evtType = MediaStateChangeEvents[key];
	if (evtType) mapObj[attrName] = evtType;
	return mapObj;
}, { userinactive: "userinactivechange" });
var TextTrackKinds = {
	SUBTITLES: "subtitles",
	CAPTIONS: "captions",
	DESCRIPTIONS: "descriptions",
	CHAPTERS: "chapters",
	METADATA: "metadata"
};
var TextTrackModes = {
	DISABLED: "disabled",
	HIDDEN: "hidden",
	SHOWING: "showing"
};
var PointerTypes = {
	MOUSE: "mouse",
	PEN: "pen",
	TOUCH: "touch"
};
var AvailabilityStates = {
	UNAVAILABLE: "unavailable",
	UNSUPPORTED: "unsupported"
};
var StreamTypes = {
	LIVE: "live",
	ON_DEMAND: "on-demand",
	UNKNOWN: "unknown"
};
var WebkitPresentationModes = {
	INLINE: "inline",
	FULLSCREEN: "fullscreen",
	PICTURE_IN_PICTURE: "picture-in-picture"
};

//#endregion
//#region node_modules/media-chrome/dist/utils/utils.js
function stringifyRenditionList(renditions) {
	return renditions == null ? void 0 : renditions.map(stringifyRendition).join(" ");
}
function parseRenditionList(renditions) {
	return renditions == null ? void 0 : renditions.split(/\s+/).map(parseRendition);
}
function stringifyRendition(rendition) {
	if (rendition) {
		const { id, width, height } = rendition;
		return [
			id,
			width,
			height
		].filter((a) => a != null).join(":");
	}
}
function parseRendition(rendition) {
	if (rendition) {
		const [id, width, height] = rendition.split(":");
		return {
			id,
			width: +width,
			height: +height
		};
	}
}
function stringifyAudioTrackList(audioTracks) {
	return audioTracks == null ? void 0 : audioTracks.map(stringifyAudioTrack).join(" ");
}
function parseAudioTrackList(audioTracks) {
	return audioTracks == null ? void 0 : audioTracks.split(/\s+/).map(parseAudioTrack);
}
function stringifyAudioTrack(audioTrack) {
	if (audioTrack) {
		const { id, kind, language, label } = audioTrack;
		return [
			id,
			kind,
			language,
			label
		].filter((a) => a != null).join(":");
	}
}
function parseAudioTrack(audioTrack) {
	if (audioTrack) {
		const [id, kind, language, label] = audioTrack.split(":");
		return {
			id,
			kind,
			language,
			label
		};
	}
}
function camelCase(name) {
	return name.replace(/[-_]([a-z])/g, ($0, $1) => $1.toUpperCase());
}
function isValidNumber(x) {
	return typeof x === "number" && !Number.isNaN(x) && Number.isFinite(x);
}
function isNumericString(str) {
	if (typeof str != "string") return false;
	return !isNaN(str) && !isNaN(parseFloat(str));
}
var delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

//#endregion
//#region node_modules/media-chrome/dist/utils/time.js
var UnitLabels = [
	{
		singular: "hour",
		plural: "hours"
	},
	{
		singular: "minute",
		plural: "minutes"
	},
	{
		singular: "second",
		plural: "seconds"
	}
];
var toTimeUnitPhrase = (timeUnitValue, unitIndex) => {
	const unitLabel = timeUnitValue === 1 ? UnitLabels[unitIndex].singular : UnitLabels[unitIndex].plural;
	return `${timeUnitValue} ${unitLabel}`;
};
var formatAsTimePhrase = (seconds) => {
	if (!isValidNumber(seconds)) return "";
	const positiveSeconds = Math.abs(seconds);
	const negative = positiveSeconds !== seconds;
	const secondsDateTime = new Date(0, 0, 0, 0, 0, positiveSeconds, 0);
	return `${[
		secondsDateTime.getHours(),
		secondsDateTime.getMinutes(),
		secondsDateTime.getSeconds()
	].map((timeUnitValue, index) => timeUnitValue && toTimeUnitPhrase(timeUnitValue, index)).filter((x) => x).join(", ")}${negative ? " remaining" : ""}`;
};
function formatTime(seconds, guide) {
	let negative = false;
	if (seconds < 0) {
		negative = true;
		seconds = 0 - seconds;
	}
	seconds = seconds < 0 ? 0 : seconds;
	let s = Math.floor(seconds % 60);
	let m = Math.floor(seconds / 60 % 60);
	let h = Math.floor(seconds / 3600);
	const gm = Math.floor(guide / 60 % 60);
	const gh = Math.floor(guide / 3600);
	if (isNaN(seconds) || seconds === Infinity) h = m = s = "0";
	h = h > 0 || gh > 0 ? h + ":" : "";
	m = ((h || gm >= 10) && m < 10 ? "0" + m : m) + ":";
	s = s < 10 ? "0" + s : s;
	return (negative ? "-" : "") + h + m + s;
}
var emptyTimeRanges = Object.freeze({
	length: 0,
	start(index) {
		const unsignedIdx = index >>> 0;
		if (unsignedIdx >= this.length) throw new DOMException(`Failed to execute 'start' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`);
		return 0;
	},
	end(index) {
		const unsignedIdx = index >>> 0;
		if (unsignedIdx >= this.length) throw new DOMException(`Failed to execute 'end' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`);
		return 0;
	}
});

//#endregion
//#region node_modules/media-chrome/dist/lang/en.js
var En = {
	"Start airplay": "Start airplay",
	"Stop airplay": "Stop airplay",
	Audio: "Audio",
	Captions: "Captions",
	"Enable captions": "Enable captions",
	"Disable captions": "Disable captions",
	"Start casting": "Start casting",
	"Stop casting": "Stop casting",
	"Enter fullscreen mode": "Enter fullscreen mode",
	"Exit fullscreen mode": "Exit fullscreen mode",
	Mute: "Mute",
	Unmute: "Unmute",
	"Enter picture in picture mode": "Enter picture in picture mode",
	"Exit picture in picture mode": "Exit picture in picture mode",
	Play: "Play",
	Pause: "Pause",
	"Playback rate": "Playback rate",
	"Playback rate {playbackRate}": "Playback rate {playbackRate}",
	Quality: "Quality",
	"Seek backward": "Seek backward",
	"Seek forward": "Seek forward",
	Settings: "Settings",
	Auto: "Auto",
	"audio player": "audio player",
	"video player": "video player",
	volume: "volume",
	seek: "seek",
	"closed captions": "closed captions",
	"current playback rate": "current playback rate",
	"playback time": "playback time",
	"media loading": "media loading",
	settings: "settings",
	"audio tracks": "audio tracks",
	quality: "quality",
	play: "play",
	pause: "pause",
	mute: "mute",
	unmute: "unmute",
	"chapter: {chapterName}": "chapter: {chapterName}",
	live: "live",
	Off: "Off",
	"start airplay": "start airplay",
	"stop airplay": "stop airplay",
	"start casting": "start casting",
	"stop casting": "stop casting",
	"enter fullscreen mode": "enter fullscreen mode",
	"exit fullscreen mode": "exit fullscreen mode",
	"enter picture in picture mode": "enter picture in picture mode",
	"exit picture in picture mode": "exit picture in picture mode",
	"seek to live": "seek to live",
	"playing live": "playing live",
	"seek back {seekOffset} seconds": "seek back {seekOffset} seconds",
	"seek forward {seekOffset} seconds": "seek forward {seekOffset} seconds",
	"Network Error": "Network Error",
	"Decode Error": "Decode Error",
	"Source Not Supported": "Source Not Supported",
	"Encryption Error": "Encryption Error",
	"A network error caused the media download to fail.": "A network error caused the media download to fail.",
	"A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.": "A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format.",
	"An unsupported error occurred. The server or network failed, or your browser does not support this format.": "An unsupported error occurred. The server or network failed, or your browser does not support this format.",
	"The media is encrypted and there are no keys to decrypt it.": "The media is encrypted and there are no keys to decrypt it."
};

//#endregion
//#region node_modules/media-chrome/dist/utils/i18n.js
var _a;
var translations = { en: En };
var currentLang = ((_a = globalThis.navigator) == null ? void 0 : _a.language) || "en";
var setLanguage = (langCode) => {
	currentLang = langCode;
};
var resolveTranslation = (key) => {
	var _a2, _b, _c;
	const [base] = currentLang.split("-");
	return ((_a2 = translations[currentLang]) == null ? void 0 : _a2[key]) || ((_b = translations[base]) == null ? void 0 : _b[key]) || ((_c = translations.en) == null ? void 0 : _c[key]) || key;
};
var t = (key, vars = {}) => resolveTranslation(key).replace(/\{(\w+)\}/g, (_, v) => v in vars ? String(vars[v]) : `{${v}}`);

//#endregion
//#region node_modules/media-chrome/dist/utils/server-safe-globals.js
var EventTarget = class {
	addEventListener() {}
	removeEventListener() {}
	dispatchEvent() {
		return true;
	}
};
var Node = class extends EventTarget {};
var Element = class extends Node {
	constructor() {
		super(...arguments);
		this.role = null;
	}
};
var ResizeObserver = class {
	observe() {}
	unobserve() {}
	disconnect() {}
};
var documentShim = {
	createElement: function() {
		return new globalThisShim.HTMLElement();
	},
	createElementNS: function() {
		return new globalThisShim.HTMLElement();
	},
	addEventListener() {},
	removeEventListener() {},
	dispatchEvent(_event) {
		return false;
	}
};
var globalThisShim = {
	ResizeObserver,
	document: documentShim,
	Node,
	Element,
	HTMLElement: class HTMLElement extends Element {
		constructor() {
			super(...arguments);
			this.innerHTML = "";
		}
		get content() {
			return new globalThisShim.DocumentFragment();
		}
	},
	DocumentFragment: class DocumentFragment extends EventTarget {},
	customElements: {
		get: function() {},
		define: function() {},
		whenDefined: function() {}
	},
	localStorage: {
		getItem(_key) {
			return null;
		},
		setItem(_key, _value) {},
		removeItem(_key) {}
	},
	CustomEvent: function CustomEvent$1() {},
	getComputedStyle: function() {},
	navigator: {
		languages: [],
		get userAgent() {
			return "";
		}
	},
	matchMedia(media) {
		return {
			matches: false,
			media
		};
	},
	DOMParser: class DOMParser {
		parseFromString(string, _contentType) {
			return { body: { textContent: string } };
		}
	}
};
var isServer = typeof window === "undefined" || typeof window.customElements === "undefined";
var isShimmed = Object.keys(globalThisShim).every((key) => key in globalThis);
var GlobalThis = isServer && !isShimmed ? globalThisShim : globalThis;
var Document$1 = isServer && !isShimmed ? documentShim : globalThis.document;

//#endregion
//#region node_modules/media-chrome/dist/utils/resize-observer.js
var callbacksMap = /* @__PURE__ */ new WeakMap();
var getCallbacks = (element) => {
	let callbacks = callbacksMap.get(element);
	if (!callbacks) callbacksMap.set(element, callbacks = /* @__PURE__ */ new Set());
	return callbacks;
};
var observer = new GlobalThis.ResizeObserver((entries) => {
	for (const entry of entries) for (const callback of getCallbacks(entry.target)) callback(entry);
});
function observeResize(element, callback) {
	getCallbacks(element).add(callback);
	observer.observe(element);
}
function unobserveResize(element, callback) {
	const callbacks = getCallbacks(element);
	callbacks.delete(callback);
	if (!callbacks.size) observer.unobserve(element);
}

//#endregion
//#region node_modules/media-chrome/dist/utils/element-utils.js
function namedNodeMapToObject(namedNodeMap) {
	const obj = {};
	for (const attr of namedNodeMap) obj[attr.name] = attr.value;
	return obj;
}
function getMediaController(host) {
	var _a$1;
	return (_a$1 = getAttributeMediaController(host)) != null ? _a$1 : closestComposedNode(host, "media-controller");
}
function getAttributeMediaController(host) {
	var _a$1;
	const { MEDIA_CONTROLLER } = MediaStateReceiverAttributes;
	const mediaControllerId = host.getAttribute(MEDIA_CONTROLLER);
	if (mediaControllerId) return (_a$1 = getDocumentOrShadowRoot(host)) == null ? void 0 : _a$1.getElementById(mediaControllerId);
}
var updateIconText = (svg, value, selector = ".value") => {
	const node = svg.querySelector(selector);
	if (!node) return;
	node.textContent = value;
};
var getAllSlotted = (el, name) => {
	const slotSelector = `slot[name="${name}"]`;
	const slot = el.shadowRoot.querySelector(slotSelector);
	if (!slot) return [];
	return slot.children;
};
var getSlotted = (el, name) => getAllSlotted(el, name)[0];
var containsComposedNode = (rootNode, childNode) => {
	if (!rootNode || !childNode) return false;
	if (rootNode == null ? void 0 : rootNode.contains(childNode)) return true;
	return containsComposedNode(rootNode, childNode.getRootNode().host);
};
var closestComposedNode = (childNode, selector) => {
	if (!childNode) return null;
	const closest = childNode.closest(selector);
	if (closest) return closest;
	return closestComposedNode(childNode.getRootNode().host, selector);
};
function getActiveElement(root = document) {
	var _a$1;
	const activeEl = root == null ? void 0 : root.activeElement;
	if (!activeEl) return null;
	return (_a$1 = getActiveElement(activeEl.shadowRoot)) != null ? _a$1 : activeEl;
}
function getDocumentOrShadowRoot(node) {
	var _a$1;
	const rootNode = (_a$1 = node == null ? void 0 : node.getRootNode) == null ? void 0 : _a$1.call(node);
	if (rootNode instanceof ShadowRoot || rootNode instanceof Document) return rootNode;
	return null;
}
function isElementVisible(element, { depth = 3, checkOpacity = true, checkVisibilityCSS = true } = {}) {
	if (element.checkVisibility) return element.checkVisibility({
		checkOpacity,
		checkVisibilityCSS
	});
	let el = element;
	while (el && depth > 0) {
		const style = getComputedStyle(el);
		if (checkOpacity && style.opacity === "0" || checkVisibilityCSS && style.visibility === "hidden" || style.display === "none") return false;
		el = el.parentElement;
		depth--;
	}
	return true;
}
function getPointProgressOnLine(x, y, p1, p2) {
	const dx = p2.x - p1.x;
	const dy = p2.y - p1.y;
	const lengthSquared = dx * dx + dy * dy;
	if (lengthSquared === 0) return 0;
	const projection = ((x - p1.x) * dx + (y - p1.y) * dy) / lengthSquared;
	return Math.max(0, Math.min(1, projection));
}
function getOrInsertCSSRule(styleParent, selectorText) {
	const cssRule = getCSSRule(styleParent, (st) => st === selectorText);
	if (cssRule) return cssRule;
	return insertCSSRule(styleParent, selectorText);
}
function getCSSRule(styleParent, predicate) {
	var _a$1, _b;
	let style;
	for (style of (_a$1 = styleParent.querySelectorAll("style:not([media])")) != null ? _a$1 : []) {
		let cssRules;
		try {
			cssRules = (_b = style.sheet) == null ? void 0 : _b.cssRules;
		} catch {
			continue;
		}
		for (const rule of cssRules != null ? cssRules : []) if (predicate(rule.selectorText)) return rule;
	}
}
function insertCSSRule(styleParent, selectorText) {
	var _a$1, _b;
	const styles = (_a$1 = styleParent.querySelectorAll("style:not([media])")) != null ? _a$1 : [];
	const style = styles == null ? void 0 : styles[styles.length - 1];
	if (!(style == null ? void 0 : style.sheet)) {
		console.warn("Media Chrome: No style sheet found on style tag of", styleParent);
		return { style: {
			setProperty: () => {},
			removeProperty: () => "",
			getPropertyValue: () => ""
		} };
	}
	style?.sheet.insertRule(`${selectorText}{}`, style.sheet.cssRules.length);
	return (_b = style.sheet.cssRules) == null ? void 0 : _b[style.sheet.cssRules.length - 1];
}
function getNumericAttr(el, attrName, defaultValue = NaN) {
	const attrVal = el.getAttribute(attrName);
	return attrVal != null ? +attrVal : defaultValue;
}
function setNumericAttr(el, attrName, value) {
	const nextNumericValue = +value;
	if (value == null || Number.isNaN(nextNumericValue)) {
		if (el.hasAttribute(attrName)) el.removeAttribute(attrName);
		return;
	}
	if (getNumericAttr(el, attrName, void 0) === nextNumericValue) return;
	el.setAttribute(attrName, `${nextNumericValue}`);
}
function getBooleanAttr(el, attrName) {
	return el.hasAttribute(attrName);
}
function setBooleanAttr(el, attrName, value) {
	if (value == null) {
		if (el.hasAttribute(attrName)) el.removeAttribute(attrName);
		return;
	}
	if (getBooleanAttr(el, attrName) == value) return;
	el.toggleAttribute(attrName, value);
}
function getStringAttr(el, attrName, defaultValue = null) {
	var _a$1;
	return (_a$1 = el.getAttribute(attrName)) != null ? _a$1 : defaultValue;
}
function setStringAttr(el, attrName, value) {
	if (value == null) {
		if (el.hasAttribute(attrName)) el.removeAttribute(attrName);
		return;
	}
	const nextValue = `${value}`;
	if (getStringAttr(el, attrName, void 0) === nextValue) return;
	el.setAttribute(attrName, nextValue);
}

//#endregion
//#region node_modules/media-chrome/dist/media-gesture-receiver.js
var __accessCheck$18 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$18 = (obj, member, getter) => {
	__accessCheck$18(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$18 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$17 = (obj, member, value, setter) => {
	__accessCheck$18(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController$6;
function getTemplateHTML$11(_attrs) {
	return `
    <style>
      :host {
        display: var(--media-control-display, var(--media-gesture-receiver-display, inline-block));
        box-sizing: border-box;
      }
    </style>
  `;
}
var MediaGestureReceiver = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$18(this, _mediaController$6, void 0);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [MediaStateReceiverAttributes.MEDIA_CONTROLLER, MediaUIAttributes.MEDIA_PAUSED];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$1, _b, _c, _d, _e;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$1 = __privateGet$18(this, _mediaController$6)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
				__privateSet$17(this, _mediaController$6, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$17(this, _mediaController$6, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e = (_d = __privateGet$18(this, _mediaController$6)) == null ? void 0 : _d.associateElement) == null || _e.call(_d, this);
			}
		}
	}
	connectedCallback() {
		var _a$1, _b, _c, _d;
		this.tabIndex = -1;
		this.setAttribute("aria-hidden", "true");
		__privateSet$17(this, _mediaController$6, getMediaControllerEl(this));
		if (this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER)) (_b = (_a$1 = __privateGet$18(this, _mediaController$6)) == null ? void 0 : _a$1.associateElement) == null || _b.call(_a$1, this);
		(_c = __privateGet$18(this, _mediaController$6)) == null || _c.addEventListener("pointerdown", this);
		(_d = __privateGet$18(this, _mediaController$6)) == null || _d.addEventListener("click", this);
	}
	disconnectedCallback() {
		var _a$1, _b, _c, _d;
		if (this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER)) (_b = (_a$1 = __privateGet$18(this, _mediaController$6)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
		(_c = __privateGet$18(this, _mediaController$6)) == null || _c.removeEventListener("pointerdown", this);
		(_d = __privateGet$18(this, _mediaController$6)) == null || _d.removeEventListener("click", this);
		__privateSet$17(this, _mediaController$6, null);
	}
	handleEvent(event) {
		var _a$1;
		const composedTarget = (_a$1 = event.composedPath()) == null ? void 0 : _a$1[0];
		if (!["video", "media-controller"].includes(composedTarget == null ? void 0 : composedTarget.localName)) return;
		if (event.type === "pointerdown") this._pointerType = event.pointerType;
		else if (event.type === "click") {
			const { clientX, clientY } = event;
			const { left, top, width, height } = this.getBoundingClientRect();
			const x = clientX - left;
			const y = clientY - top;
			if (x < 0 || y < 0 || x > width || y > height || width === 0 && height === 0) return;
			const pointerType = this._pointerType || "mouse";
			this._pointerType = void 0;
			if (pointerType === PointerTypes.TOUCH) {
				this.handleTap(event);
				return;
			} else if (pointerType === PointerTypes.MOUSE) {
				this.handleMouseClick(event);
				return;
			}
		}
	}
	/**
	* @type {boolean} Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	/**
	* @abstract
	* @argument {Event} e
	*/
	handleTap(e) {}
	handleMouseClick(e) {
		const eventName = this.mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
_mediaController$6 = /* @__PURE__ */ new WeakMap();
MediaGestureReceiver.shadowRootOptions = { mode: "open" };
MediaGestureReceiver.getTemplateHTML = getTemplateHTML$11;
function getMediaControllerEl(controlEl) {
	var _a$1;
	const mediaControllerId = controlEl.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
	if (mediaControllerId) return (_a$1 = controlEl.getRootNode()) == null ? void 0 : _a$1.getElementById(mediaControllerId);
	return closestComposedNode(controlEl, "media-controller");
}
if (!GlobalThis.customElements.get("media-gesture-receiver")) GlobalThis.customElements.define("media-gesture-receiver", MediaGestureReceiver);
var media_gesture_receiver_default = MediaGestureReceiver;

//#endregion
//#region node_modules/media-chrome/dist/media-container.js
var __accessCheck$17 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$17 = (obj, member, getter) => {
	__accessCheck$17(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$17 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$16 = (obj, member, value, setter) => {
	__accessCheck$17(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$5 = (obj, member, method) => {
	__accessCheck$17(obj, member, "access private method");
	return method;
};
var _pointerDownTimeStamp, _currentMedia, _inactiveTimeout, _autohide, _mutationObserver, _handleMutation, handleMutation_fn, _isResizePending, _handleResize, _handlePointerMove$2, handlePointerMove_fn$2, _handlePointerUp$1, handlePointerUp_fn$1, _setInactive, setInactive_fn, _setActive, setActive_fn, _scheduleInactive, scheduleInactive_fn;
var Attributes$10 = {
	AUDIO: "audio",
	AUTOHIDE: "autohide",
	BREAKPOINTS: "breakpoints",
	GESTURES_DISABLED: "gesturesdisabled",
	KEYBOARD_CONTROL: "keyboardcontrol",
	NO_AUTOHIDE: "noautohide",
	USER_INACTIVE: "userinactive",
	AUTOHIDE_OVER_CONTROLS: "autohideovercontrols"
};
function getTemplateHTML$10(_attrs) {
	return `
    <style>
      
      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) ::slotted([slot=media]) {
        outline: none;
      }

      :host {
        box-sizing: border-box;
        position: relative;
        display: inline-block;
        line-height: 0;
        background-color: var(--media-background-color, #000);
      }

      :host(:not([${Attributes$10.AUDIO}])) [part~=layer]:not([part~=media-layer]) {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        display: flex;
        flex-flow: column nowrap;
        align-items: start;
        pointer-events: none;
        background: none;
      }

      slot[name=media] {
        display: var(--media-slot-display, contents);
      }

      
      :host([${Attributes$10.AUDIO}]) slot[name=media] {
        display: var(--media-slot-display, none);
      }

      
      :host([${Attributes$10.AUDIO}]) [part~=layer][part~=gesture-layer] {
        height: 0;
        display: block;
      }

      
      :host(:not([${Attributes$10.AUDIO}])[${Attributes$10.GESTURES_DISABLED}]) ::slotted([slot=gestures-chrome]),
          :host(:not([${Attributes$10.AUDIO}])[${Attributes$10.GESTURES_DISABLED}]) media-gesture-receiver[slot=gestures-chrome] {
        display: none;
      }

      
      ::slotted(:not([slot=media]):not([slot=poster]):not(media-loading-indicator):not([role=dialog]):not([hidden])) {
        pointer-events: auto;
      }

      :host(:not([${Attributes$10.AUDIO}])) *[part~=layer][part~=centered-layer] {
        align-items: center;
        justify-content: center;
      }

      :host(:not([${Attributes$10.AUDIO}])) ::slotted(media-gesture-receiver[slot=gestures-chrome]),
      :host(:not([${Attributes$10.AUDIO}])) media-gesture-receiver[slot=gestures-chrome] {
        align-self: stretch;
        flex-grow: 1;
      }

      slot[name=middle-chrome] {
        display: inline;
        flex-grow: 1;
        pointer-events: none;
        background: none;
      }

      
      ::slotted([slot=media]),
      ::slotted([slot=poster]) {
        width: 100%;
        height: 100%;
      }

      
      :host(:not([${Attributes$10.AUDIO}])) .spacer {
        flex-grow: 1;
      }

      
      :host(:-webkit-full-screen) {
        
        width: 100% !important;
        height: 100% !important;
      }

      
      ::slotted(:not([slot=media]):not([slot=poster]):not([${Attributes$10.NO_AUTOHIDE}]):not([hidden]):not([role=dialog])) {
        opacity: 1;
        transition: var(--media-control-transition-in, opacity 0.25s);
      }

      
      :host([${Attributes$10.USER_INACTIVE}]:not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes$10.AUDIO}])) ::slotted(:not([slot=media]):not([slot=poster]):not([${Attributes$10.NO_AUTOHIDE}]):not([role=dialog])) {
        opacity: 0;
        transition: var(--media-control-transition-out, opacity 1s);
      }

      :host([${Attributes$10.USER_INACTIVE}]:not([${Attributes$10.NO_AUTOHIDE}]):not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes$10.AUDIO}])) ::slotted([slot=media]) {
        cursor: none;
      }

      :host([${Attributes$10.USER_INACTIVE}][${Attributes$10.AUTOHIDE_OVER_CONTROLS}]:not([${Attributes$10.NO_AUTOHIDE}]):not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes$10.AUDIO}])) * {
        --media-cursor: none;
        cursor: none;
      }


      ::slotted(media-control-bar)  {
        align-self: stretch;
      }

      
      :host(:not([${Attributes$10.AUDIO}])[${MediaUIAttributes.MEDIA_HAS_PLAYED}]) slot[name=poster] {
        display: none;
      }

      ::slotted([role=dialog]) {
        width: 100%;
        height: 100%;
        align-self: center;
      }

      ::slotted([role=menu]) {
        align-self: end;
      }
    </style>

    <slot name="media" part="layer media-layer"></slot>
    <slot name="poster" part="layer poster-layer"></slot>
    <slot name="gestures-chrome" part="layer gesture-layer">
      <media-gesture-receiver slot="gestures-chrome">
        <template shadowrootmode="${media_gesture_receiver_default.shadowRootOptions.mode}">
          ${media_gesture_receiver_default.getTemplateHTML({})}
        </template>
      </media-gesture-receiver>
    </slot>
    <span part="layer vertical-layer">
      <slot name="top-chrome" part="top chrome"></slot>
      <slot name="middle-chrome" part="middle chrome"></slot>
      <slot name="centered-chrome" part="layer centered-layer center centered chrome"></slot>
      
      <slot part="bottom chrome"></slot>
    </span>
    <slot name="dialog" part="layer dialog-layer"></slot>
  `;
}
var MEDIA_UI_ATTRIBUTE_NAMES$1 = Object.values(MediaUIAttributes);
var defaultBreakpoints = "sm:384 md:576 lg:768 xl:960";
function resizeCallback(entry) {
	setBreakpoints(entry.target, entry.contentRect.width);
}
function setBreakpoints(container, width) {
	var _a$1;
	if (!container.isConnected) return;
	const breakpoints = (_a$1 = container.getAttribute(Attributes$10.BREAKPOINTS)) != null ? _a$1 : defaultBreakpoints;
	const ranges = createBreakpointMap(breakpoints);
	const activeBreakpoints = getBreakpoints(ranges, width);
	let changed = false;
	Object.keys(ranges).forEach((name) => {
		if (activeBreakpoints.includes(name)) {
			if (!container.hasAttribute(`breakpoint${name}`)) {
				container.setAttribute(`breakpoint${name}`, "");
				changed = true;
			}
			return;
		}
		if (container.hasAttribute(`breakpoint${name}`)) {
			container.removeAttribute(`breakpoint${name}`);
			changed = true;
		}
	});
	if (changed) {
		const evt = new CustomEvent(MediaStateChangeEvents.BREAKPOINTS_CHANGE, { detail: activeBreakpoints });
		container.dispatchEvent(evt);
	}
	if (!container.breakpointsComputed) {
		container.breakpointsComputed = true;
		container.dispatchEvent(new CustomEvent(MediaStateChangeEvents.BREAKPOINTS_COMPUTED, {
			bubbles: true,
			composed: true
		}));
	}
}
function createBreakpointMap(breakpoints) {
	const pairs = breakpoints.split(/\s+/);
	return Object.fromEntries(pairs.map((pair) => pair.split(":")));
}
function getBreakpoints(breakpoints, width) {
	return Object.keys(breakpoints).filter((name) => {
		return width >= parseInt(breakpoints[name]);
	});
}
var MediaContainer = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$17(this, _handleMutation);
		__privateAdd$17(this, _handlePointerMove$2);
		__privateAdd$17(this, _handlePointerUp$1);
		__privateAdd$17(this, _setInactive);
		__privateAdd$17(this, _setActive);
		__privateAdd$17(this, _scheduleInactive);
		__privateAdd$17(this, _pointerDownTimeStamp, 0);
		__privateAdd$17(this, _currentMedia, null);
		__privateAdd$17(this, _inactiveTimeout, null);
		__privateAdd$17(this, _autohide, void 0);
		this.breakpointsComputed = false;
		__privateAdd$17(this, _mutationObserver, new MutationObserver(__privateMethod$5(this, _handleMutation, handleMutation_fn).bind(this)));
		__privateAdd$17(this, _isResizePending, false);
		__privateAdd$17(this, _handleResize, (entry) => {
			if (__privateGet$17(this, _isResizePending)) return;
			setTimeout(() => {
				resizeCallback(entry);
				__privateSet$16(this, _isResizePending, false);
			}, 0);
			__privateSet$16(this, _isResizePending, true);
		});
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			const html = this.constructor.getTemplateHTML(attrs);
			this.shadowRoot.setHTMLUnsafe ? this.shadowRoot.setHTMLUnsafe(html) : this.shadowRoot.innerHTML = html;
		}
		const chainedSlot = this.querySelector(":scope > slot[slot=media]");
		if (chainedSlot) chainedSlot.addEventListener("slotchange", () => {
			if (!chainedSlot.assignedElements({ flatten: true }).length) {
				if (__privateGet$17(this, _currentMedia)) this.mediaUnsetCallback(__privateGet$17(this, _currentMedia));
				return;
			}
			this.handleMediaUpdated(this.media);
		});
	}
	static get observedAttributes() {
		return [Attributes$10.AUTOHIDE, Attributes$10.GESTURES_DISABLED].concat(MEDIA_UI_ATTRIBUTE_NAMES$1).filter((name) => ![
			MediaUIAttributes.MEDIA_RENDITION_LIST,
			MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST,
			MediaUIAttributes.MEDIA_CHAPTERS_CUES,
			MediaUIAttributes.MEDIA_WIDTH,
			MediaUIAttributes.MEDIA_HEIGHT,
			MediaUIAttributes.MEDIA_ERROR,
			MediaUIAttributes.MEDIA_ERROR_MESSAGE
		].includes(name));
	}
	attributeChangedCallback(attrName, _oldValue, newValue) {
		if (attrName.toLowerCase() == Attributes$10.AUTOHIDE) this.autohide = newValue;
	}
	get media() {
		let media = this.querySelector(":scope > [slot=media]");
		if ((media == null ? void 0 : media.nodeName) == "SLOT") media = media.assignedElements({ flatten: true })[0];
		return media;
	}
	async handleMediaUpdated(media) {
		if (!media) return;
		__privateSet$16(this, _currentMedia, media);
		if (media.localName.includes("-")) await GlobalThis.customElements.whenDefined(media.localName);
		this.mediaSetCallback(media);
	}
	connectedCallback() {
		var _a$1;
		__privateGet$17(this, _mutationObserver).observe(this, {
			childList: true,
			subtree: true
		});
		observeResize(this, __privateGet$17(this, _handleResize));
		const label = this.getAttribute(Attributes$10.AUDIO) != null ? t("audio player") : t("video player");
		this.setAttribute("role", "region");
		this.setAttribute("aria-label", label);
		this.handleMediaUpdated(this.media);
		this.setAttribute(Attributes$10.USER_INACTIVE, "");
		setBreakpoints(this, this.getBoundingClientRect().width);
		this.addEventListener("pointerdown", this);
		this.addEventListener("pointermove", this);
		this.addEventListener("pointerup", this);
		this.addEventListener("mouseleave", this);
		this.addEventListener("keyup", this);
		(_a$1 = GlobalThis.window) == null || _a$1.addEventListener("mouseup", this);
	}
	disconnectedCallback() {
		var _a$1;
		__privateGet$17(this, _mutationObserver).disconnect();
		unobserveResize(this, __privateGet$17(this, _handleResize));
		if (this.media) this.mediaUnsetCallback(this.media);
		(_a$1 = GlobalThis.window) == null || _a$1.removeEventListener("mouseup", this);
	}
	/**
	* @abstract
	*/
	mediaSetCallback(_media) {}
	mediaUnsetCallback(_media) {
		__privateSet$16(this, _currentMedia, null);
	}
	handleEvent(event) {
		switch (event.type) {
			case "pointerdown":
				__privateSet$16(this, _pointerDownTimeStamp, event.timeStamp);
				break;
			case "pointermove":
				__privateMethod$5(this, _handlePointerMove$2, handlePointerMove_fn$2).call(this, event);
				break;
			case "pointerup":
				__privateMethod$5(this, _handlePointerUp$1, handlePointerUp_fn$1).call(this, event);
				break;
			case "mouseleave":
				__privateMethod$5(this, _setInactive, setInactive_fn).call(this);
				break;
			case "mouseup":
				this.removeAttribute(Attributes$10.KEYBOARD_CONTROL);
				break;
			case "keyup":
				__privateMethod$5(this, _scheduleInactive, scheduleInactive_fn).call(this);
				this.setAttribute(Attributes$10.KEYBOARD_CONTROL, "");
				break;
		}
	}
	set autohide(seconds) {
		const parsedSeconds = Number(seconds);
		__privateSet$16(this, _autohide, isNaN(parsedSeconds) ? 0 : parsedSeconds);
	}
	get autohide() {
		return (__privateGet$17(this, _autohide) === void 0 ? 2 : __privateGet$17(this, _autohide)).toString();
	}
	get breakpoints() {
		return getStringAttr(this, Attributes$10.BREAKPOINTS);
	}
	set breakpoints(value) {
		setStringAttr(this, Attributes$10.BREAKPOINTS, value);
	}
	get audio() {
		return getBooleanAttr(this, Attributes$10.AUDIO);
	}
	set audio(value) {
		setBooleanAttr(this, Attributes$10.AUDIO, value);
	}
	get gesturesDisabled() {
		return getBooleanAttr(this, Attributes$10.GESTURES_DISABLED);
	}
	set gesturesDisabled(value) {
		setBooleanAttr(this, Attributes$10.GESTURES_DISABLED, value);
	}
	get keyboardControl() {
		return getBooleanAttr(this, Attributes$10.KEYBOARD_CONTROL);
	}
	set keyboardControl(value) {
		setBooleanAttr(this, Attributes$10.KEYBOARD_CONTROL, value);
	}
	get noAutohide() {
		return getBooleanAttr(this, Attributes$10.NO_AUTOHIDE);
	}
	set noAutohide(value) {
		setBooleanAttr(this, Attributes$10.NO_AUTOHIDE, value);
	}
	get autohideOverControls() {
		return getBooleanAttr(this, Attributes$10.AUTOHIDE_OVER_CONTROLS);
	}
	set autohideOverControls(value) {
		setBooleanAttr(this, Attributes$10.AUTOHIDE_OVER_CONTROLS, value);
	}
	get userInteractive() {
		return getBooleanAttr(this, Attributes$10.USER_INACTIVE);
	}
	set userInteractive(value) {
		setBooleanAttr(this, Attributes$10.USER_INACTIVE, value);
	}
};
_pointerDownTimeStamp = /* @__PURE__ */ new WeakMap();
_currentMedia = /* @__PURE__ */ new WeakMap();
_inactiveTimeout = /* @__PURE__ */ new WeakMap();
_autohide = /* @__PURE__ */ new WeakMap();
_mutationObserver = /* @__PURE__ */ new WeakMap();
_handleMutation = /* @__PURE__ */ new WeakSet();
handleMutation_fn = function(mutationsList) {
	const media = this.media;
	for (const mutation of mutationsList) {
		if (mutation.type !== "childList") continue;
		const removedNodes = mutation.removedNodes;
		for (const node of removedNodes) {
			if (node.slot != "media" || mutation.target != this) continue;
			let previousSibling = mutation.previousSibling && mutation.previousSibling.previousElementSibling;
			if (!previousSibling || !media) this.mediaUnsetCallback(node);
			else {
				let wasFirst = previousSibling.slot !== "media";
				while ((previousSibling = previousSibling.previousSibling) !== null) if (previousSibling.slot == "media") wasFirst = false;
				if (wasFirst) this.mediaUnsetCallback(node);
			}
		}
		if (media) {
			for (const node of mutation.addedNodes) if (node === media) this.handleMediaUpdated(media);
		}
	}
};
_isResizePending = /* @__PURE__ */ new WeakMap();
_handleResize = /* @__PURE__ */ new WeakMap();
_handlePointerMove$2 = /* @__PURE__ */ new WeakSet();
handlePointerMove_fn$2 = function(event) {
	if (event.pointerType !== "mouse") {
		if (event.timeStamp - __privateGet$17(this, _pointerDownTimeStamp) < 250) return;
	}
	__privateMethod$5(this, _setActive, setActive_fn).call(this);
	clearTimeout(__privateGet$17(this, _inactiveTimeout));
	const autohideOverControls = this.hasAttribute(Attributes$10.AUTOHIDE_OVER_CONTROLS);
	if ([this, this.media].includes(event.target) || autohideOverControls) __privateMethod$5(this, _scheduleInactive, scheduleInactive_fn).call(this);
};
_handlePointerUp$1 = /* @__PURE__ */ new WeakSet();
handlePointerUp_fn$1 = function(event) {
	if (event.pointerType === "touch") {
		const controlsVisible = !this.hasAttribute(Attributes$10.USER_INACTIVE);
		if ([this, this.media].includes(event.target) && controlsVisible) __privateMethod$5(this, _setInactive, setInactive_fn).call(this);
		else __privateMethod$5(this, _scheduleInactive, scheduleInactive_fn).call(this);
	} else if (event.composedPath().some((el) => ["media-play-button", "media-fullscreen-button"].includes(el == null ? void 0 : el.localName))) __privateMethod$5(this, _scheduleInactive, scheduleInactive_fn).call(this);
};
_setInactive = /* @__PURE__ */ new WeakSet();
setInactive_fn = function() {
	if (__privateGet$17(this, _autohide) < 0) return;
	if (this.hasAttribute(Attributes$10.USER_INACTIVE)) return;
	this.setAttribute(Attributes$10.USER_INACTIVE, "");
	const evt = new GlobalThis.CustomEvent(MediaStateChangeEvents.USER_INACTIVE_CHANGE, {
		composed: true,
		bubbles: true,
		detail: true
	});
	this.dispatchEvent(evt);
};
_setActive = /* @__PURE__ */ new WeakSet();
setActive_fn = function() {
	if (!this.hasAttribute(Attributes$10.USER_INACTIVE)) return;
	this.removeAttribute(Attributes$10.USER_INACTIVE);
	const evt = new GlobalThis.CustomEvent(MediaStateChangeEvents.USER_INACTIVE_CHANGE, {
		composed: true,
		bubbles: true,
		detail: false
	});
	this.dispatchEvent(evt);
};
_scheduleInactive = /* @__PURE__ */ new WeakSet();
scheduleInactive_fn = function() {
	__privateMethod$5(this, _setActive, setActive_fn).call(this);
	clearTimeout(__privateGet$17(this, _inactiveTimeout));
	const autohide = parseInt(this.autohide);
	if (autohide < 0) return;
	__privateSet$16(this, _inactiveTimeout, setTimeout(() => {
		__privateMethod$5(this, _setInactive, setInactive_fn).call(this);
	}, autohide * 1e3));
};
MediaContainer.shadowRootOptions = { mode: "open" };
MediaContainer.getTemplateHTML = getTemplateHTML$10;
if (!GlobalThis.customElements.get("media-container")) GlobalThis.customElements.define("media-container", MediaContainer);
var media_container_default = MediaContainer;

//#endregion
//#region node_modules/media-chrome/dist/utils/attribute-token-list.js
var __accessCheck$16 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$16 = (obj, member, getter) => {
	__accessCheck$16(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$16 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$15 = (obj, member, value, setter) => {
	__accessCheck$16(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _el, _attr, _defaultSet, _tokenSet, _tokens, tokens_get;
var AttributeTokenList = class {
	constructor(el, attr, { defaultValue } = { defaultValue: void 0 }) {
		__privateAdd$16(this, _tokens);
		__privateAdd$16(this, _el, void 0);
		__privateAdd$16(this, _attr, void 0);
		__privateAdd$16(this, _defaultSet, void 0);
		__privateAdd$16(this, _tokenSet, /* @__PURE__ */ new Set());
		__privateSet$15(this, _el, el);
		__privateSet$15(this, _attr, attr);
		__privateSet$15(this, _defaultSet, new Set(defaultValue));
	}
	[Symbol.iterator]() {
		return __privateGet$16(this, _tokens, tokens_get).values();
	}
	get length() {
		return __privateGet$16(this, _tokens, tokens_get).size;
	}
	get value() {
		var _a$1;
		return (_a$1 = [...__privateGet$16(this, _tokens, tokens_get)].join(" ")) != null ? _a$1 : "";
	}
	set value(val) {
		var _a$1;
		if (val === this.value) return;
		__privateSet$15(this, _tokenSet, /* @__PURE__ */ new Set());
		this.add(...(_a$1 = val == null ? void 0 : val.split(" ")) != null ? _a$1 : []);
	}
	toString() {
		return this.value;
	}
	item(index) {
		return [...__privateGet$16(this, _tokens, tokens_get)][index];
	}
	values() {
		return __privateGet$16(this, _tokens, tokens_get).values();
	}
	forEach(callback, thisArg) {
		__privateGet$16(this, _tokens, tokens_get).forEach(callback, thisArg);
	}
	add(...tokens) {
		var _a$1, _b;
		tokens.forEach((t$1) => __privateGet$16(this, _tokenSet).add(t$1));
		if (this.value === "" && !((_a$1 = __privateGet$16(this, _el)) == null ? void 0 : _a$1.hasAttribute(`${__privateGet$16(this, _attr)}`))) return;
		(_b = __privateGet$16(this, _el)) == null || _b.setAttribute(`${__privateGet$16(this, _attr)}`, `${this.value}`);
	}
	remove(...tokens) {
		var _a$1;
		tokens.forEach((t$1) => __privateGet$16(this, _tokenSet).delete(t$1));
		(_a$1 = __privateGet$16(this, _el)) == null || _a$1.setAttribute(`${__privateGet$16(this, _attr)}`, `${this.value}`);
	}
	contains(token) {
		return __privateGet$16(this, _tokens, tokens_get).has(token);
	}
	toggle(token, force) {
		if (typeof force !== "undefined") if (force) {
			this.add(token);
			return true;
		} else {
			this.remove(token);
			return false;
		}
		if (this.contains(token)) {
			this.remove(token);
			return false;
		}
		this.add(token);
		return true;
	}
	replace(oldToken, newToken) {
		this.remove(oldToken);
		this.add(newToken);
		return oldToken === newToken;
	}
};
_el = /* @__PURE__ */ new WeakMap();
_attr = /* @__PURE__ */ new WeakMap();
_defaultSet = /* @__PURE__ */ new WeakMap();
_tokenSet = /* @__PURE__ */ new WeakMap();
_tokens = /* @__PURE__ */ new WeakSet();
tokens_get = function() {
	return __privateGet$16(this, _tokenSet).size ? __privateGet$16(this, _tokenSet) : __privateGet$16(this, _defaultSet);
};

//#endregion
//#region node_modules/media-chrome/dist/utils/captions.js
var splitTextTracksStr = (textTracksStr = "") => textTracksStr.split(/\s+/);
var parseTextTrackStr = (textTrackStr = "") => {
	const [kind, language, encodedLabel] = textTrackStr.split(":");
	const label = encodedLabel ? decodeURIComponent(encodedLabel) : void 0;
	return {
		kind: kind === "cc" ? TextTrackKinds.CAPTIONS : TextTrackKinds.SUBTITLES,
		language,
		label
	};
};
var parseTextTracksStr = (textTracksStr = "", textTrackLikeObj = {}) => {
	return splitTextTracksStr(textTracksStr).map((textTrackStr) => {
		const textTrackObj = parseTextTrackStr(textTrackStr);
		return {
			...textTrackLikeObj,
			...textTrackObj
		};
	});
};
var parseTracks = (trackOrTracks) => {
	if (!trackOrTracks) return [];
	if (Array.isArray(trackOrTracks)) return trackOrTracks.map((trackObjOrStr) => {
		if (typeof trackObjOrStr === "string") return parseTextTrackStr(trackObjOrStr);
		return trackObjOrStr;
	});
	if (typeof trackOrTracks === "string") return parseTextTracksStr(trackOrTracks);
	return [trackOrTracks];
};
var formatTextTrackObj = ({ kind, label, language } = { kind: "subtitles" }) => {
	if (!label) return language;
	return `${kind === "captions" ? "cc" : "sb"}:${language}:${encodeURIComponent(label)}`;
};
var stringifyTextTrackList = (textTracks = []) => {
	return Array.prototype.map.call(textTracks, formatTextTrackObj).join(" ");
};
var isMatchingPropOf = (key, value) => (obj) => obj[key] === value;
var textTrackObjAsPred = (filterObj) => {
	const preds = Object.entries(filterObj).map(([key, value]) => {
		return isMatchingPropOf(key, value);
	});
	return (textTrack) => preds.every((pred) => pred(textTrack));
};
var updateTracksModeTo = (mode, tracks = [], tracksToUpdate = []) => {
	const preds = parseTracks(tracksToUpdate).map(textTrackObjAsPred);
	const isTrackToUpdate = (textTrack) => {
		return preds.some((pred) => pred(textTrack));
	};
	Array.from(tracks).filter(isTrackToUpdate).forEach((textTrack) => {
		textTrack.mode = mode;
	});
};
var getTextTracksList = (media, filterPredOrObj = () => true) => {
	if (!(media == null ? void 0 : media.textTracks)) return [];
	const filterPred = typeof filterPredOrObj === "function" ? filterPredOrObj : textTrackObjAsPred(filterPredOrObj);
	return Array.from(media.textTracks).filter(filterPred);
};
var areSubsOn = (el) => {
	var _a$1;
	return !!((_a$1 = el.mediaSubtitlesShowing) == null ? void 0 : _a$1.length) || el.hasAttribute(MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);
};

//#endregion
//#region node_modules/media-chrome/dist/utils/fullscreen-api.js
var enterFullscreen = (stateOwners) => {
	var _a$1;
	const { media, fullscreenElement } = stateOwners;
	try {
		const enterFullscreenKey = fullscreenElement && "requestFullscreen" in fullscreenElement ? "requestFullscreen" : fullscreenElement && "webkitRequestFullScreen" in fullscreenElement ? "webkitRequestFullScreen" : void 0;
		if (enterFullscreenKey) {
			const maybePromise = (_a$1 = fullscreenElement[enterFullscreenKey]) == null ? void 0 : _a$1.call(fullscreenElement);
			if (maybePromise instanceof Promise) return maybePromise.catch(() => {});
		} else if (media == null ? void 0 : media.webkitEnterFullscreen) media.webkitEnterFullscreen();
		else if (media == null ? void 0 : media.requestFullscreen) media.requestFullscreen();
	} catch (e) {
		console.error(e);
	}
};
var exitFullscreenKey = "exitFullscreen" in Document$1 ? "exitFullscreen" : "webkitExitFullscreen" in Document$1 ? "webkitExitFullscreen" : "webkitCancelFullScreen" in Document$1 ? "webkitCancelFullScreen" : void 0;
var exitFullscreen = (stateOwners) => {
	var _a$1;
	const { documentElement } = stateOwners;
	if (exitFullscreenKey) {
		const maybePromise = (_a$1 = documentElement == null ? void 0 : documentElement[exitFullscreenKey]) == null ? void 0 : _a$1.call(documentElement);
		if (maybePromise instanceof Promise) return maybePromise.catch(() => {});
	}
};
var fullscreenElementKey = "fullscreenElement" in Document$1 ? "fullscreenElement" : "webkitFullscreenElement" in Document$1 ? "webkitFullscreenElement" : void 0;
var getFullscreenElement = (stateOwners) => {
	const { documentElement, media } = stateOwners;
	const docFullscreenElement = documentElement == null ? void 0 : documentElement[fullscreenElementKey];
	if (!docFullscreenElement && "webkitDisplayingFullscreen" in media && "webkitPresentationMode" in media && media.webkitDisplayingFullscreen && media.webkitPresentationMode === WebkitPresentationModes.FULLSCREEN) return media;
	return docFullscreenElement;
};
var isFullscreen = (stateOwners) => {
	var _a$1;
	const { media, documentElement, fullscreenElement = media } = stateOwners;
	if (!media || !documentElement) return false;
	const currentFullscreenElement = getFullscreenElement(stateOwners);
	if (!currentFullscreenElement) return false;
	if (currentFullscreenElement === fullscreenElement || currentFullscreenElement === media) return true;
	if (currentFullscreenElement.localName.includes("-")) {
		let currentRoot = currentFullscreenElement.shadowRoot;
		if (!(fullscreenElementKey in currentRoot)) return containsComposedNode(
			currentFullscreenElement,
			/** @TODO clean up type assumptions (e.g. Node) (CJP) */
			fullscreenElement
		);
		while (currentRoot == null ? void 0 : currentRoot[fullscreenElementKey]) {
			if (currentRoot[fullscreenElementKey] === fullscreenElement) return true;
			currentRoot = (_a$1 = currentRoot[fullscreenElementKey]) == null ? void 0 : _a$1.shadowRoot;
		}
	}
	return false;
};
var fullscreenEnabledKey = "fullscreenEnabled" in Document$1 ? "fullscreenEnabled" : "webkitFullscreenEnabled" in Document$1 ? "webkitFullscreenEnabled" : void 0;
var isFullscreenEnabled = (stateOwners) => {
	const { documentElement, media } = stateOwners;
	return !!(documentElement == null ? void 0 : documentElement[fullscreenEnabledKey]) || media && "webkitSupportsFullscreen" in media;
};

//#endregion
//#region node_modules/media-chrome/dist/utils/platform-tests.js
var testMediaEl;
var getTestMediaEl = () => {
	var _a$1, _b;
	if (testMediaEl) return testMediaEl;
	testMediaEl = (_b = (_a$1 = Document$1) == null ? void 0 : _a$1.createElement) == null ? void 0 : _b.call(_a$1, "video");
	return testMediaEl;
};
var hasVolumeSupportAsync = async (mediaEl = getTestMediaEl()) => {
	if (!mediaEl) return false;
	const prevVolume = mediaEl.volume;
	mediaEl.volume = prevVolume / 2 + .1;
	const abortController = new AbortController();
	const volumeSupported$1 = await Promise.race([dispatchedVolumeChange(mediaEl, abortController.signal), volumeChanged(mediaEl, prevVolume)]);
	abortController.abort();
	return volumeSupported$1;
};
var dispatchedVolumeChange = (mediaEl, signal) => {
	return new Promise((resolve) => {
		mediaEl.addEventListener("volumechange", () => resolve(true), { signal });
	});
};
var volumeChanged = async (mediaEl, prevVolume) => {
	for (let i = 0; i < 10; i++) {
		if (mediaEl.volume === prevVolume) return false;
		await delay(10);
	}
	return mediaEl.volume !== prevVolume;
};
var isSafari = /.*Version\/.*Safari\/.*/.test(GlobalThis.navigator.userAgent);
var hasPipSupport = (mediaEl = getTestMediaEl()) => {
	if (GlobalThis.matchMedia("(display-mode: standalone)").matches && isSafari) return false;
	return typeof (mediaEl == null ? void 0 : mediaEl.requestPictureInPicture) === "function";
};
var hasFullscreenSupport = (mediaEl = getTestMediaEl()) => {
	return isFullscreenEnabled({
		documentElement: Document$1,
		media: mediaEl
	});
};
var fullscreenSupported = hasFullscreenSupport();
var pipSupported = hasPipSupport();
var airplaySupported = !!GlobalThis.WebKitPlaybackTargetAvailabilityEvent;
var castSupported = !!GlobalThis.chrome;

//#endregion
//#region node_modules/media-chrome/dist/media-store/util.js
var getSubtitleTracks = (stateOwners) => {
	return getTextTracksList(stateOwners.media, (textTrack) => {
		return [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(textTrack.kind);
	}).sort((a, b) => a.kind >= b.kind ? 1 : -1);
};
var getShowingSubtitleTracks = (stateOwners) => {
	return getTextTracksList(stateOwners.media, (textTrack) => {
		return textTrack.mode === TextTrackModes.SHOWING && [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(textTrack.kind);
	});
};
var toggleSubtitleTracks = (stateOwners, force) => {
	const tracks = getSubtitleTracks(stateOwners);
	const showingSubitleTracks = getShowingSubtitleTracks(stateOwners);
	const subtitlesShowing = !!showingSubitleTracks.length;
	if (!tracks.length) return;
	if (force === false || subtitlesShowing && force !== true) updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);
	else if (force === true || !subtitlesShowing && force !== false) {
		let subTrack = tracks[0];
		const { options } = stateOwners;
		if (!(options == null ? void 0 : options.noSubtitlesLangPref)) {
			const subtitlesPref = globalThis.localStorage.getItem("media-chrome-pref-subtitles-lang");
			const userLangPrefs = subtitlesPref ? [subtitlesPref, ...globalThis.navigator.languages] : globalThis.navigator.languages;
			const preferredAvailableSubs = tracks.filter((textTrack) => {
				return userLangPrefs.some((lang) => textTrack.language.toLowerCase().startsWith(lang.split("-")[0]));
			}).sort((textTrackA, textTrackB) => {
				const idxA = userLangPrefs.findIndex((lang) => textTrackA.language.toLowerCase().startsWith(lang.split("-")[0]));
				const idxB = userLangPrefs.findIndex((lang) => textTrackB.language.toLowerCase().startsWith(lang.split("-")[0]));
				return idxA - idxB;
			});
			if (preferredAvailableSubs[0]) subTrack = preferredAvailableSubs[0];
		}
		const { language, label, kind } = subTrack;
		updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);
		updateTracksModeTo(TextTrackModes.SHOWING, tracks, [{
			language,
			label,
			kind
		}]);
	}
};
var areValuesEq = (x, y) => {
	if (x === y) return true;
	if (x == null || y == null) return false;
	if (typeof x !== typeof y) return false;
	if (typeof x === "number" && Number.isNaN(x) && Number.isNaN(y)) return true;
	if (typeof x !== "object") return false;
	if (Array.isArray(x)) return areArraysEq(x, y);
	return Object.entries(x).every(([key, value]) => key in y && areValuesEq(value, y[key]));
};
var areArraysEq = (xs, ys) => {
	const xIsArray = Array.isArray(xs);
	const yIsArray = Array.isArray(ys);
	if (xIsArray !== yIsArray) return false;
	if (!(xIsArray || yIsArray)) return true;
	if (xs.length !== ys.length) return false;
	return xs.every((x, i) => areValuesEq(x, ys[i]));
};

//#endregion
//#region node_modules/media-chrome/dist/media-store/state-mediator.js
var StreamTypeValues = Object.values(StreamTypes);
var volumeSupported;
var volumeSupportPromise = hasVolumeSupportAsync().then((supported) => {
	volumeSupported = supported;
	return volumeSupported;
});
var prepareStateOwners = async (...stateOwners) => {
	await Promise.all(stateOwners.filter((x) => x).map(async (stateOwner) => {
		if (!("localName" in stateOwner && stateOwner instanceof GlobalThis.HTMLElement)) return;
		const name = stateOwner.localName;
		if (!name.includes("-")) return;
		const classDef = GlobalThis.customElements.get(name);
		if (classDef && stateOwner instanceof classDef) return;
		await GlobalThis.customElements.whenDefined(name);
		GlobalThis.customElements.upgrade(stateOwner);
	}));
};
var domParser = new GlobalThis.DOMParser();
var parseHtmlToText = (text) => text ? domParser.parseFromString(text, "text/html").body.textContent || text : text;
var stateMediator = {
	mediaError: {
		get(stateOwners, event) {
			const { media } = stateOwners;
			if ((event == null ? void 0 : event.type) === "playing") return;
			return media == null ? void 0 : media.error;
		},
		mediaEvents: [
			"emptied",
			"error",
			"playing"
		]
	},
	mediaErrorCode: {
		get(stateOwners, event) {
			var _a$1;
			const { media } = stateOwners;
			if ((event == null ? void 0 : event.type) === "playing") return;
			return (_a$1 = media == null ? void 0 : media.error) == null ? void 0 : _a$1.code;
		},
		mediaEvents: [
			"emptied",
			"error",
			"playing"
		]
	},
	mediaErrorMessage: {
		get(stateOwners, event) {
			var _a$1, _b;
			const { media } = stateOwners;
			if ((event == null ? void 0 : event.type) === "playing") return;
			return (_b = (_a$1 = media == null ? void 0 : media.error) == null ? void 0 : _a$1.message) != null ? _b : "";
		},
		mediaEvents: [
			"emptied",
			"error",
			"playing"
		]
	},
	mediaWidth: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return (_a$1 = media == null ? void 0 : media.videoWidth) != null ? _a$1 : 0;
		},
		mediaEvents: ["resize"]
	},
	mediaHeight: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return (_a$1 = media == null ? void 0 : media.videoHeight) != null ? _a$1 : 0;
		},
		mediaEvents: ["resize"]
	},
	mediaPaused: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return (_a$1 = media == null ? void 0 : media.paused) != null ? _a$1 : true;
		},
		set(value, stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			if (!media) return;
			if (value) media.pause();
			else (_a$1 = media.play()) == null || _a$1.catch(() => {});
		},
		mediaEvents: [
			"play",
			"playing",
			"pause",
			"emptied"
		]
	},
	mediaHasPlayed: {
		get(stateOwners, event) {
			const { media } = stateOwners;
			if (!media) return false;
			if (!event) return !media.paused;
			return event.type === "playing";
		},
		mediaEvents: ["playing", "emptied"]
	},
	mediaEnded: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return (_a$1 = media == null ? void 0 : media.ended) != null ? _a$1 : false;
		},
		mediaEvents: [
			"seeked",
			"ended",
			"emptied"
		]
	},
	mediaPlaybackRate: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return (_a$1 = media == null ? void 0 : media.playbackRate) != null ? _a$1 : 1;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!media) return;
			if (!Number.isFinite(+value)) return;
			media.playbackRate = +value;
		},
		mediaEvents: ["ratechange", "loadstart"]
	},
	mediaMuted: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return (_a$1 = media == null ? void 0 : media.muted) != null ? _a$1 : false;
		},
		set(value, stateOwners) {
			const { media, options: { noMutedPref } = {} } = stateOwners;
			if (!media) return;
			if (!media.hasAttribute("muted") && !noMutedPref) try {
				GlobalThis.localStorage.setItem("media-chrome-pref-muted", value ? "true" : "false");
			} catch (e) {
				console.debug("Error setting muted pref", e);
			}
			media.muted = value;
		},
		mediaEvents: ["volumechange"],
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			const { options: { noMutedPref } } = stateOwners;
			const { media } = stateOwners;
			if (!media || media.muted || noMutedPref) return;
			try {
				const mutedPref = GlobalThis.localStorage.getItem("media-chrome-pref-muted") === "true";
				stateMediator.mediaMuted.set(mutedPref, stateOwners);
				handler(mutedPref);
			} catch (e) {
				console.debug("Error getting muted pref", e);
			}
		}]
	},
	mediaVolume: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return (_a$1 = media == null ? void 0 : media.volume) != null ? _a$1 : 1;
		},
		set(value, stateOwners) {
			const { media, options: { noVolumePref } = {} } = stateOwners;
			if (!media) return;
			try {
				if (value == null) GlobalThis.localStorage.removeItem("media-chrome-pref-volume");
				else if (!media.hasAttribute("muted") && !noVolumePref) GlobalThis.localStorage.setItem("media-chrome-pref-volume", value.toString());
			} catch (e) {
				console.debug("Error setting volume pref", e);
			}
			if (!Number.isFinite(+value)) return;
			media.volume = +value;
		},
		mediaEvents: ["volumechange"],
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			const { options: { noVolumePref } } = stateOwners;
			if (noVolumePref) return;
			try {
				const { media } = stateOwners;
				if (!media) return;
				const volumePref = GlobalThis.localStorage.getItem("media-chrome-pref-volume");
				if (volumePref == null) return;
				stateMediator.mediaVolume.set(+volumePref, stateOwners);
				handler(+volumePref);
			} catch (e) {
				console.debug("Error getting volume pref", e);
			}
		}]
	},
	mediaVolumeLevel: {
		get(stateOwners) {
			const { media } = stateOwners;
			if (typeof (media == null ? void 0 : media.volume) == "undefined") return "high";
			if (media.muted || media.volume === 0) return "off";
			if (media.volume < .5) return "low";
			if (media.volume < .75) return "medium";
			return "high";
		},
		mediaEvents: ["volumechange"]
	},
	mediaCurrentTime: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return (_a$1 = media == null ? void 0 : media.currentTime) != null ? _a$1 : 0;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!media || !isValidNumber(value)) return;
			media.currentTime = value;
		},
		mediaEvents: ["timeupdate", "loadedmetadata"]
	},
	mediaDuration: {
		get(stateOwners) {
			const { media, options: { defaultDuration } = {} } = stateOwners;
			if (defaultDuration && (!media || !media.duration || Number.isNaN(media.duration) || !Number.isFinite(media.duration))) return defaultDuration;
			return Number.isFinite(media == null ? void 0 : media.duration) ? media.duration : NaN;
		},
		mediaEvents: [
			"durationchange",
			"loadedmetadata",
			"emptied"
		]
	},
	mediaLoading: {
		get(stateOwners) {
			const { media } = stateOwners;
			return (media == null ? void 0 : media.readyState) < 3;
		},
		mediaEvents: [
			"waiting",
			"playing",
			"emptied"
		]
	},
	mediaSeekable: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			if (!((_a$1 = media == null ? void 0 : media.seekable) == null ? void 0 : _a$1.length)) return void 0;
			const start = media.seekable.start(0);
			const end = media.seekable.end(media.seekable.length - 1);
			if (!start && !end) return void 0;
			return [Number(start.toFixed(3)), Number(end.toFixed(3))];
		},
		mediaEvents: [
			"loadedmetadata",
			"emptied",
			"progress",
			"seekablechange"
		]
	},
	mediaBuffered: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			const timeRanges = (_a$1 = media == null ? void 0 : media.buffered) != null ? _a$1 : [];
			return Array.from(timeRanges).map((_, i) => [Number(timeRanges.start(i).toFixed(3)), Number(timeRanges.end(i).toFixed(3))]);
		},
		mediaEvents: ["progress", "emptied"]
	},
	mediaStreamType: {
		get(stateOwners) {
			const { media, options: { defaultStreamType } = {} } = stateOwners;
			const usedDefaultStreamType = [StreamTypes.LIVE, StreamTypes.ON_DEMAND].includes(defaultStreamType) ? defaultStreamType : void 0;
			if (!media) return usedDefaultStreamType;
			const { streamType } = media;
			if (StreamTypeValues.includes(streamType)) {
				if (streamType === StreamTypes.UNKNOWN) return usedDefaultStreamType;
				return streamType;
			}
			const duration = media.duration;
			if (duration === Infinity) return StreamTypes.LIVE;
			else if (Number.isFinite(duration)) return StreamTypes.ON_DEMAND;
			return usedDefaultStreamType;
		},
		mediaEvents: [
			"emptied",
			"durationchange",
			"loadedmetadata",
			"streamtypechange"
		]
	},
	mediaTargetLiveWindow: {
		get(stateOwners) {
			const { media } = stateOwners;
			if (!media) return NaN;
			const { targetLiveWindow } = media;
			const streamType = stateMediator.mediaStreamType.get(stateOwners);
			if ((targetLiveWindow == null || Number.isNaN(targetLiveWindow)) && streamType === StreamTypes.LIVE) return 0;
			return targetLiveWindow;
		},
		mediaEvents: [
			"emptied",
			"durationchange",
			"loadedmetadata",
			"streamtypechange",
			"targetlivewindowchange"
		]
	},
	mediaTimeIsLive: {
		get(stateOwners) {
			const { media, options: { liveEdgeOffset = 10 } = {} } = stateOwners;
			if (!media) return false;
			if (typeof media.liveEdgeStart === "number") {
				if (Number.isNaN(media.liveEdgeStart)) return false;
				return media.currentTime >= media.liveEdgeStart;
			}
			if (!(stateMediator.mediaStreamType.get(stateOwners) === StreamTypes.LIVE)) return false;
			const seekable = media.seekable;
			if (!seekable) return true;
			if (!seekable.length) return false;
			const liveEdgeStart = seekable.end(seekable.length - 1) - liveEdgeOffset;
			return media.currentTime >= liveEdgeStart;
		},
		mediaEvents: [
			"playing",
			"timeupdate",
			"progress",
			"waiting",
			"emptied"
		]
	},
	mediaSubtitlesList: {
		get(stateOwners) {
			return getSubtitleTracks(stateOwners).map(({ kind, label, language }) => ({
				kind,
				label,
				language
			}));
		},
		mediaEvents: ["loadstart"],
		textTracksEvents: ["addtrack", "removetrack"]
	},
	mediaSubtitlesShowing: {
		get(stateOwners) {
			return getShowingSubtitleTracks(stateOwners).map(({ kind, label, language }) => ({
				kind,
				label,
				language
			}));
		},
		mediaEvents: ["loadstart"],
		textTracksEvents: [
			"addtrack",
			"removetrack",
			"change"
		],
		stateOwnersUpdateHandlers: [(_handler, stateOwners) => {
			var _a$1, _b;
			const { media, options } = stateOwners;
			if (!media) return;
			const updateDefaultSubtitlesCallback = (event) => {
				var _a2;
				if (!options.defaultSubtitles) return;
				if (event && ![TextTrackKinds.CAPTIONS, TextTrackKinds.SUBTITLES].includes((_a2 = event == null ? void 0 : event.track) == null ? void 0 : _a2.kind)) return;
				toggleSubtitleTracks(stateOwners, true);
			};
			media.addEventListener("loadstart", updateDefaultSubtitlesCallback);
			(_a$1 = media.textTracks) == null || _a$1.addEventListener("addtrack", updateDefaultSubtitlesCallback);
			(_b = media.textTracks) == null || _b.addEventListener("removetrack", updateDefaultSubtitlesCallback);
			return () => {
				var _a2, _b2;
				media.removeEventListener("loadstart", updateDefaultSubtitlesCallback);
				(_a2 = media.textTracks) == null || _a2.removeEventListener("addtrack", updateDefaultSubtitlesCallback);
				(_b2 = media.textTracks) == null || _b2.removeEventListener("removetrack", updateDefaultSubtitlesCallback);
			};
		}]
	},
	mediaChaptersCues: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			if (!media) return [];
			const [chaptersTrack] = getTextTracksList(media, { kind: TextTrackKinds.CHAPTERS });
			return Array.from((_a$1 = chaptersTrack == null ? void 0 : chaptersTrack.cues) != null ? _a$1 : []).map(({ text, startTime, endTime }) => ({
				text: parseHtmlToText(text),
				startTime,
				endTime
			}));
		},
		mediaEvents: ["loadstart", "loadedmetadata"],
		textTracksEvents: [
			"addtrack",
			"removetrack",
			"change"
		],
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			var _a$1;
			const { media } = stateOwners;
			if (!media) return;
			const chaptersTrack = media.querySelector("track[kind=\"chapters\"][default][src]");
			const shadowChaptersTrack = (_a$1 = media.shadowRoot) == null ? void 0 : _a$1.querySelector(":is(video,audio) > track[kind=\"chapters\"][default][src]");
			chaptersTrack?.addEventListener("load", handler);
			shadowChaptersTrack?.addEventListener("load", handler);
			return () => {
				chaptersTrack?.removeEventListener("load", handler);
				shadowChaptersTrack?.removeEventListener("load", handler);
			};
		}]
	},
	mediaIsPip: {
		get(stateOwners) {
			var _a$1, _b;
			const { media, documentElement } = stateOwners;
			if (!media || !documentElement) return false;
			if (!documentElement.pictureInPictureElement) return false;
			if (documentElement.pictureInPictureElement === media) return true;
			if (documentElement.pictureInPictureElement instanceof HTMLMediaElement) {
				if (!((_a$1 = media.localName) == null ? void 0 : _a$1.includes("-"))) return false;
				return containsComposedNode(media, documentElement.pictureInPictureElement);
			}
			if (documentElement.pictureInPictureElement.localName.includes("-")) {
				let currentRoot = documentElement.pictureInPictureElement.shadowRoot;
				while (currentRoot == null ? void 0 : currentRoot.pictureInPictureElement) {
					if (currentRoot.pictureInPictureElement === media) return true;
					currentRoot = (_b = currentRoot.pictureInPictureElement) == null ? void 0 : _b.shadowRoot;
				}
			}
			return false;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!media) return;
			if (value) {
				if (!Document$1.pictureInPictureEnabled) {
					console.warn("MediaChrome: Picture-in-picture is not enabled");
					return;
				}
				if (!media.requestPictureInPicture) {
					console.warn("MediaChrome: The current media does not support picture-in-picture");
					return;
				}
				const warnNotReady = () => {
					console.warn("MediaChrome: The media is not ready for picture-in-picture. It must have a readyState > 0.");
				};
				media.requestPictureInPicture().catch((err) => {
					if (err.code === 11) {
						if (!media.src) {
							console.warn("MediaChrome: The media is not ready for picture-in-picture. It must have a src set.");
							return;
						}
						if (media.readyState === 0 && media.preload === "none") {
							const cleanup = () => {
								media.removeEventListener("loadedmetadata", tryPip);
								media.preload = "none";
							};
							const tryPip = () => {
								media.requestPictureInPicture().catch(warnNotReady);
								cleanup();
							};
							media.addEventListener("loadedmetadata", tryPip);
							media.preload = "metadata";
							setTimeout(() => {
								if (media.readyState === 0) warnNotReady();
								cleanup();
							}, 1e3);
						} else throw err;
					} else throw err;
				});
			} else if (Document$1.pictureInPictureElement) Document$1.exitPictureInPicture();
		},
		mediaEvents: ["enterpictureinpicture", "leavepictureinpicture"]
	},
	mediaRenditionList: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return [...(_a$1 = media == null ? void 0 : media.videoRenditions) != null ? _a$1 : []].map((videoRendition) => ({ ...videoRendition }));
		},
		mediaEvents: ["emptied", "loadstart"],
		videoRenditionsEvents: ["addrendition", "removerendition"]
	},
	mediaRenditionSelected: {
		get(stateOwners) {
			var _a$1, _b, _c;
			const { media } = stateOwners;
			return (_c = (_b = media == null ? void 0 : media.videoRenditions) == null ? void 0 : _b[(_a$1 = media.videoRenditions) == null ? void 0 : _a$1.selectedIndex]) == null ? void 0 : _c.id;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.videoRenditions)) {
				console.warn("MediaController: Rendition selection not supported by this media.");
				return;
			}
			const renditionId = value;
			const index = Array.prototype.findIndex.call(media.videoRenditions, (r) => r.id == renditionId);
			if (media.videoRenditions.selectedIndex != index) media.videoRenditions.selectedIndex = index;
		},
		mediaEvents: ["emptied"],
		videoRenditionsEvents: [
			"addrendition",
			"removerendition",
			"change"
		]
	},
	mediaAudioTrackList: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			return [...(_a$1 = media == null ? void 0 : media.audioTracks) != null ? _a$1 : []];
		},
		mediaEvents: ["emptied", "loadstart"],
		audioTracksEvents: ["addtrack", "removetrack"]
	},
	mediaAudioTrackEnabled: {
		get(stateOwners) {
			var _a$1, _b;
			const { media } = stateOwners;
			return (_b = [...(_a$1 = media == null ? void 0 : media.audioTracks) != null ? _a$1 : []].find((audioTrack) => audioTrack.enabled)) == null ? void 0 : _b.id;
		},
		set(value, stateOwners) {
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.audioTracks)) {
				console.warn("MediaChrome: Audio track selection not supported by this media.");
				return;
			}
			const audioTrackId = value;
			for (const track of media.audioTracks) track.enabled = audioTrackId == track.id;
		},
		mediaEvents: ["emptied"],
		audioTracksEvents: [
			"addtrack",
			"removetrack",
			"change"
		]
	},
	mediaIsFullscreen: {
		get(stateOwners) {
			return isFullscreen(stateOwners);
		},
		set(value, stateOwners) {
			if (!value) exitFullscreen(stateOwners);
			else enterFullscreen(stateOwners);
		},
		rootEvents: ["fullscreenchange", "webkitfullscreenchange"],
		mediaEvents: [
			"webkitbeginfullscreen",
			"webkitendfullscreen",
			"webkitpresentationmodechanged"
		]
	},
	mediaIsCasting: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.remote) || ((_a$1 = media.remote) == null ? void 0 : _a$1.state) === "disconnected") return false;
			return !!media.remote.state;
		},
		set(value, stateOwners) {
			var _a$1, _b;
			const { media } = stateOwners;
			if (!media) return;
			if (value && ((_a$1 = media.remote) == null ? void 0 : _a$1.state) !== "disconnected") return;
			if (!value && ((_b = media.remote) == null ? void 0 : _b.state) !== "connected") return;
			if (typeof media.remote.prompt !== "function") {
				console.warn("MediaChrome: Casting is not supported in this environment");
				return;
			}
			media.remote.prompt().catch(() => {});
		},
		remoteEvents: [
			"connect",
			"connecting",
			"disconnect"
		]
	},
	mediaIsAirplaying: {
		get() {
			return false;
		},
		set(_value, stateOwners) {
			const { media } = stateOwners;
			if (!media) return;
			if (!(media.webkitShowPlaybackTargetPicker && GlobalThis.WebKitPlaybackTargetAvailabilityEvent)) {
				console.error("MediaChrome: received a request to select AirPlay but AirPlay is not supported in this environment");
				return;
			}
			media.webkitShowPlaybackTargetPicker();
		},
		mediaEvents: ["webkitcurrentplaybacktargetiswirelesschanged"]
	},
	mediaFullscreenUnavailable: { get(stateOwners) {
		const { media } = stateOwners;
		if (!fullscreenSupported || !hasFullscreenSupport(media)) return AvailabilityStates.UNSUPPORTED;
	} },
	mediaPipUnavailable: { get(stateOwners) {
		const { media } = stateOwners;
		if (!pipSupported || !hasPipSupport(media)) return AvailabilityStates.UNSUPPORTED;
		else if (media == null ? void 0 : media.disablePictureInPicture) return AvailabilityStates.UNAVAILABLE;
	} },
	mediaVolumeUnavailable: {
		get(stateOwners) {
			const { media } = stateOwners;
			if (volumeSupported === false || (media == null ? void 0 : media.volume) == void 0) return AvailabilityStates.UNSUPPORTED;
		},
		stateOwnersUpdateHandlers: [(handler) => {
			if (volumeSupported == null) volumeSupportPromise.then((supported) => handler(supported ? void 0 : AvailabilityStates.UNSUPPORTED));
		}]
	},
	mediaCastUnavailable: {
		get(stateOwners, { availability = "not-available" } = {}) {
			var _a$1;
			const { media } = stateOwners;
			if (!castSupported || !((_a$1 = media == null ? void 0 : media.remote) == null ? void 0 : _a$1.state)) return AvailabilityStates.UNSUPPORTED;
			if (availability == null || availability === "available") return void 0;
			return AvailabilityStates.UNAVAILABLE;
		},
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			var _a$1;
			const { media } = stateOwners;
			if (!media) return;
			if (!(media.disableRemotePlayback || media.hasAttribute("disableremoteplayback"))) (_a$1 = media == null ? void 0 : media.remote) == null || _a$1.watchAvailability((availabilityBool) => {
				handler({ availability: availabilityBool ? "available" : "not-available" });
			}).catch((error) => {
				if (error.name === "NotSupportedError") handler({ availability: null });
				else handler({ availability: "not-available" });
			});
			return () => {
				var _a2;
				(_a2 = media == null ? void 0 : media.remote) == null || _a2.cancelWatchAvailability().catch(() => {});
			};
		}]
	},
	mediaAirplayUnavailable: {
		get(_stateOwners, event) {
			if (!airplaySupported) return AvailabilityStates.UNSUPPORTED;
			if ((event == null ? void 0 : event.availability) === "not-available") return AvailabilityStates.UNAVAILABLE;
		},
		mediaEvents: ["webkitplaybacktargetavailabilitychanged"],
		stateOwnersUpdateHandlers: [(handler, stateOwners) => {
			var _a$1;
			const { media } = stateOwners;
			if (!media) return;
			if (!(media.disableRemotePlayback || media.hasAttribute("disableremoteplayback"))) (_a$1 = media == null ? void 0 : media.remote) == null || _a$1.watchAvailability((availabilityBool) => {
				handler({ availability: availabilityBool ? "available" : "not-available" });
			}).catch((error) => {
				if (error.name === "NotSupportedError") handler({ availability: null });
				else handler({ availability: "not-available" });
			});
			return () => {
				var _a2;
				(_a2 = media == null ? void 0 : media.remote) == null || _a2.cancelWatchAvailability().catch(() => {});
			};
		}]
	},
	mediaRenditionUnavailable: {
		get(stateOwners) {
			var _a$1;
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.videoRenditions)) return AvailabilityStates.UNSUPPORTED;
			if (!((_a$1 = media.videoRenditions) == null ? void 0 : _a$1.length)) return AvailabilityStates.UNAVAILABLE;
		},
		mediaEvents: ["emptied", "loadstart"],
		videoRenditionsEvents: ["addrendition", "removerendition"]
	},
	mediaAudioTrackUnavailable: {
		get(stateOwners) {
			var _a$1, _b;
			const { media } = stateOwners;
			if (!(media == null ? void 0 : media.audioTracks)) return AvailabilityStates.UNSUPPORTED;
			if (((_b = (_a$1 = media.audioTracks) == null ? void 0 : _a$1.length) != null ? _b : 0) <= 1) return AvailabilityStates.UNAVAILABLE;
		},
		mediaEvents: ["emptied", "loadstart"],
		audioTracksEvents: ["addtrack", "removetrack"]
	},
	mediaLang: { get(stateOwners) {
		const { options: { mediaLang } = {} } = stateOwners;
		return mediaLang != null ? mediaLang : "en";
	} }
};

//#endregion
//#region node_modules/media-chrome/dist/media-store/request-map.js
var requestMap = {
	[MediaUIEvents.MEDIA_PREVIEW_REQUEST](stateMediator$1, stateOwners, { detail }) {
		var _a$1, _b, _c;
		const { media } = stateOwners;
		const mediaPreviewTime = detail != null ? detail : void 0;
		let mediaPreviewImage = void 0;
		let mediaPreviewCoords = void 0;
		if (media && mediaPreviewTime != null) {
			const [track] = getTextTracksList(media, {
				kind: TextTrackKinds.METADATA,
				label: "thumbnails"
			});
			const cue = Array.prototype.find.call((_a$1 = track == null ? void 0 : track.cues) != null ? _a$1 : [], (c, i, cs) => {
				if (i === 0) return c.endTime > mediaPreviewTime;
				if (i === cs.length - 1) return c.startTime <= mediaPreviewTime;
				return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;
			});
			if (cue) {
				const base = !/'^(?:[a-z]+:)?\/\//i.test(cue.text) ? (_b = media == null ? void 0 : media.querySelector("track[label=\"thumbnails\"]")) == null ? void 0 : _b.src : void 0;
				const url = new URL(cue.text, base);
				mediaPreviewCoords = new URLSearchParams(url.hash).get("#xywh").split(",").map((numStr) => +numStr);
				mediaPreviewImage = url.href;
			}
		}
		const mediaDuration = stateMediator$1.mediaDuration.get(stateOwners);
		let mediaPreviewChapter = (_c = stateMediator$1.mediaChaptersCues.get(stateOwners).find((c, i, cs) => {
			if (i === cs.length - 1 && mediaDuration === c.endTime) return c.startTime <= mediaPreviewTime && c.endTime >= mediaPreviewTime;
			return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;
		})) == null ? void 0 : _c.text;
		if (detail != null && mediaPreviewChapter == null) mediaPreviewChapter = "";
		return {
			mediaPreviewTime,
			mediaPreviewImage,
			mediaPreviewCoords,
			mediaPreviewChapter
		};
	},
	[MediaUIEvents.MEDIA_PAUSE_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaPaused"].set(true, stateOwners);
	},
	[MediaUIEvents.MEDIA_PLAY_REQUEST](stateMediator$1, stateOwners) {
		var _a$1, _b, _c, _d;
		const key = "mediaPaused";
		const value = false;
		const isLive = stateMediator$1.mediaStreamType.get(stateOwners) === StreamTypes.LIVE;
		const canAutoSeekToLive = !((_a$1 = stateOwners.options) == null ? void 0 : _a$1.noAutoSeekToLive);
		const isDVR = stateMediator$1.mediaTargetLiveWindow.get(stateOwners) > 0;
		if (isLive && canAutoSeekToLive && !isDVR) {
			const seekableEnd = (_b = stateMediator$1.mediaSeekable.get(stateOwners)) == null ? void 0 : _b[1];
			if (seekableEnd) {
				const seekToLiveOffset = (_d = (_c = stateOwners.options) == null ? void 0 : _c.seekToLiveOffset) != null ? _d : 0;
				const liveEdgeTime = seekableEnd - seekToLiveOffset;
				stateMediator$1.mediaCurrentTime.set(liveEdgeTime, stateOwners);
			}
		}
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaPlaybackRate";
		const value = detail;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_MUTE_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaMuted"].set(true, stateOwners);
	},
	[MediaUIEvents.MEDIA_UNMUTE_REQUEST](stateMediator$1, stateOwners) {
		const key = "mediaMuted";
		const value = false;
		if (!stateMediator$1.mediaVolume.get(stateOwners)) stateMediator$1.mediaVolume.set(.25, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_VOLUME_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaVolume";
		const value = detail;
		if (value && stateMediator$1.mediaMuted.get(stateOwners)) stateMediator$1.mediaMuted.set(false, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_SEEK_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaCurrentTime";
		const value = detail;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_SEEK_TO_LIVE_REQUEST](stateMediator$1, stateOwners) {
		var _a$1, _b, _c;
		const key = "mediaCurrentTime";
		const seekableEnd = (_a$1 = stateMediator$1.mediaSeekable.get(stateOwners)) == null ? void 0 : _a$1[1];
		if (Number.isNaN(Number(seekableEnd))) return;
		const seekToLiveOffset = (_c = (_b = stateOwners.options) == null ? void 0 : _b.seekToLiveOffset) != null ? _c : 0;
		const value = seekableEnd - seekToLiveOffset;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {
		var _a$1;
		const { options } = stateOwners;
		const tracks = getSubtitleTracks(stateOwners);
		const tracksToUpdate = parseTracks(detail);
		const preferredLanguage = (_a$1 = tracksToUpdate[0]) == null ? void 0 : _a$1.language;
		if (preferredLanguage && !options.noSubtitlesLangPref) GlobalThis.localStorage.setItem("media-chrome-pref-subtitles-lang", preferredLanguage);
		updateTracksModeTo(TextTrackModes.SHOWING, tracks, tracksToUpdate);
	},
	[MediaUIEvents.MEDIA_DISABLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {
		const tracks = getSubtitleTracks(stateOwners);
		const tracksToUpdate = detail != null ? detail : [];
		updateTracksModeTo(TextTrackModes.DISABLED, tracks, tracksToUpdate);
	},
	[MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {
		toggleSubtitleTracks(stateOwners, detail);
	},
	[MediaUIEvents.MEDIA_RENDITION_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaRenditionSelected";
		const value = detail;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_AUDIO_TRACK_REQUEST](stateMediator$1, stateOwners, { detail }) {
		const key = "mediaAudioTrackEnabled";
		const value = detail;
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_ENTER_PIP_REQUEST](stateMediator$1, stateOwners) {
		const key = "mediaIsPip";
		const value = true;
		if (stateMediator$1.mediaIsFullscreen.get(stateOwners)) stateMediator$1.mediaIsFullscreen.set(false, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_EXIT_PIP_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaIsPip"].set(false, stateOwners);
	},
	[MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST](stateMediator$1, stateOwners) {
		const key = "mediaIsFullscreen";
		const value = true;
		if (stateMediator$1.mediaIsPip.get(stateOwners)) stateMediator$1.mediaIsPip.set(false, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaIsFullscreen"].set(false, stateOwners);
	},
	[MediaUIEvents.MEDIA_ENTER_CAST_REQUEST](stateMediator$1, stateOwners) {
		const key = "mediaIsCasting";
		const value = true;
		if (stateMediator$1.mediaIsFullscreen.get(stateOwners)) stateMediator$1.mediaIsFullscreen.set(false, stateOwners);
		stateMediator$1[key].set(value, stateOwners);
	},
	[MediaUIEvents.MEDIA_EXIT_CAST_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaIsCasting"].set(false, stateOwners);
	},
	[MediaUIEvents.MEDIA_AIRPLAY_REQUEST](stateMediator$1, stateOwners) {
		stateMediator$1["mediaIsAirplaying"].set(true, stateOwners);
	}
};

//#endregion
//#region node_modules/media-chrome/dist/media-store/media-store.js
var createMediaStore = ({ media, fullscreenElement, documentElement, stateMediator: stateMediator$1 = stateMediator, requestMap: requestMap$1 = requestMap, options = {}, monitorStateOwnersOnlyWithSubscriptions = true }) => {
	const callbacks = [];
	const stateOwners = { options: { ...options } };
	let state = Object.freeze({
		mediaPreviewTime: void 0,
		mediaPreviewImage: void 0,
		mediaPreviewCoords: void 0,
		mediaPreviewChapter: void 0
	});
	const updateState = (nextStateDelta) => {
		if (nextStateDelta == void 0) return;
		if (areValuesEq(nextStateDelta, state)) return;
		state = Object.freeze({
			...state,
			...nextStateDelta
		});
		callbacks.forEach((cb) => cb(state));
	};
	const updateStateFromFacade = () => {
		const nextState = Object.entries(stateMediator$1).reduce((nextState2, [stateName, { get }]) => {
			nextState2[stateName] = get(stateOwners);
			return nextState2;
		}, {});
		updateState(nextState);
	};
	const stateUpdateHandlers = {};
	let nextStateOwners = void 0;
	const updateStateOwners = async (nextStateOwnersDelta, nextSubscriberCount) => {
		var _a$1, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;
		const pendingUpdate = !!nextStateOwners;
		nextStateOwners = {
			...stateOwners,
			...nextStateOwners != null ? nextStateOwners : {},
			...nextStateOwnersDelta
		};
		if (pendingUpdate) return;
		await prepareStateOwners(...Object.values(nextStateOwnersDelta));
		const shouldTeardownFromSubscriberCount = callbacks.length > 0 && nextSubscriberCount === 0 && monitorStateOwnersOnlyWithSubscriptions;
		const mediaChanged = stateOwners.media !== nextStateOwners.media;
		const textTracksChanged = ((_a$1 = stateOwners.media) == null ? void 0 : _a$1.textTracks) !== ((_b = nextStateOwners.media) == null ? void 0 : _b.textTracks);
		const videoRenditionsChanged = ((_c = stateOwners.media) == null ? void 0 : _c.videoRenditions) !== ((_d = nextStateOwners.media) == null ? void 0 : _d.videoRenditions);
		const audioTracksChanged = ((_e = stateOwners.media) == null ? void 0 : _e.audioTracks) !== ((_f = nextStateOwners.media) == null ? void 0 : _f.audioTracks);
		const remoteChanged = ((_g = stateOwners.media) == null ? void 0 : _g.remote) !== ((_h = nextStateOwners.media) == null ? void 0 : _h.remote);
		const rootNodeChanged = stateOwners.documentElement !== nextStateOwners.documentElement;
		const teardownMedia = !!stateOwners.media && (mediaChanged || shouldTeardownFromSubscriberCount);
		const teardownTextTracks = !!((_i = stateOwners.media) == null ? void 0 : _i.textTracks) && (textTracksChanged || shouldTeardownFromSubscriberCount);
		const teardownVideoRenditions = !!((_j = stateOwners.media) == null ? void 0 : _j.videoRenditions) && (videoRenditionsChanged || shouldTeardownFromSubscriberCount);
		const teardownAudioTracks = !!((_k = stateOwners.media) == null ? void 0 : _k.audioTracks) && (audioTracksChanged || shouldTeardownFromSubscriberCount);
		const teardownRemote = !!((_l = stateOwners.media) == null ? void 0 : _l.remote) && (remoteChanged || shouldTeardownFromSubscriberCount);
		const teardownRootNode = !!stateOwners.documentElement && (rootNodeChanged || shouldTeardownFromSubscriberCount);
		const teardownSomething = teardownMedia || teardownTextTracks || teardownVideoRenditions || teardownAudioTracks || teardownRemote || teardownRootNode;
		const shouldSetupFromSubscriberCount = callbacks.length === 0 && nextSubscriberCount === 1 && monitorStateOwnersOnlyWithSubscriptions;
		const setupMedia = !!nextStateOwners.media && (mediaChanged || shouldSetupFromSubscriberCount);
		const setupTextTracks = !!((_m = nextStateOwners.media) == null ? void 0 : _m.textTracks) && (textTracksChanged || shouldSetupFromSubscriberCount);
		const setupVideoRenditions = !!((_n = nextStateOwners.media) == null ? void 0 : _n.videoRenditions) && (videoRenditionsChanged || shouldSetupFromSubscriberCount);
		const setupAudioTracks = !!((_o = nextStateOwners.media) == null ? void 0 : _o.audioTracks) && (audioTracksChanged || shouldSetupFromSubscriberCount);
		const setupRemote = !!((_p = nextStateOwners.media) == null ? void 0 : _p.remote) && (remoteChanged || shouldSetupFromSubscriberCount);
		const setupRootNode = !!nextStateOwners.documentElement && (rootNodeChanged || shouldSetupFromSubscriberCount);
		const setupSomething = setupMedia || setupTextTracks || setupVideoRenditions || setupAudioTracks || setupRemote || setupRootNode;
		if (!(teardownSomething || setupSomething)) {
			Object.entries(nextStateOwners).forEach(([stateOwnerName, stateOwner]) => {
				stateOwners[stateOwnerName] = stateOwner;
			});
			updateStateFromFacade();
			nextStateOwners = void 0;
			return;
		}
		Object.entries(stateMediator$1).forEach(([stateName, { get, mediaEvents = [], textTracksEvents = [], videoRenditionsEvents = [], audioTracksEvents = [], remoteEvents = [], rootEvents = [], stateOwnersUpdateHandlers = [] }]) => {
			if (!stateUpdateHandlers[stateName]) stateUpdateHandlers[stateName] = {};
			const handler = (event) => {
				const nextValue = get(stateOwners, event);
				updateState({ [stateName]: nextValue });
			};
			let prevHandler;
			prevHandler = stateUpdateHandlers[stateName].mediaEvents;
			mediaEvents.forEach((eventType) => {
				if (prevHandler && teardownMedia) {
					stateOwners.media.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].mediaEvents = void 0;
				}
				if (setupMedia) {
					nextStateOwners.media.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].mediaEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].textTracksEvents;
			textTracksEvents.forEach((eventType) => {
				var _a2, _b2;
				if (prevHandler && teardownTextTracks) {
					(_a2 = stateOwners.media.textTracks) == null || _a2.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].textTracksEvents = void 0;
				}
				if (setupTextTracks) {
					(_b2 = nextStateOwners.media.textTracks) == null || _b2.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].textTracksEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].videoRenditionsEvents;
			videoRenditionsEvents.forEach((eventType) => {
				var _a2, _b2;
				if (prevHandler && teardownVideoRenditions) {
					(_a2 = stateOwners.media.videoRenditions) == null || _a2.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].videoRenditionsEvents = void 0;
				}
				if (setupVideoRenditions) {
					(_b2 = nextStateOwners.media.videoRenditions) == null || _b2.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].videoRenditionsEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].audioTracksEvents;
			audioTracksEvents.forEach((eventType) => {
				var _a2, _b2;
				if (prevHandler && teardownAudioTracks) {
					(_a2 = stateOwners.media.audioTracks) == null || _a2.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].audioTracksEvents = void 0;
				}
				if (setupAudioTracks) {
					(_b2 = nextStateOwners.media.audioTracks) == null || _b2.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].audioTracksEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].remoteEvents;
			remoteEvents.forEach((eventType) => {
				var _a2, _b2;
				if (prevHandler && teardownRemote) {
					(_a2 = stateOwners.media.remote) == null || _a2.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].remoteEvents = void 0;
				}
				if (setupRemote) {
					(_b2 = nextStateOwners.media.remote) == null || _b2.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].remoteEvents = handler;
				}
			});
			prevHandler = stateUpdateHandlers[stateName].rootEvents;
			rootEvents.forEach((eventType) => {
				if (prevHandler && teardownRootNode) {
					stateOwners.documentElement.removeEventListener(eventType, prevHandler);
					stateUpdateHandlers[stateName].rootEvents = void 0;
				}
				if (setupRootNode) {
					nextStateOwners.documentElement.addEventListener(eventType, handler);
					stateUpdateHandlers[stateName].rootEvents = handler;
				}
			});
			const prevHandlerTeardown = stateUpdateHandlers[stateName].stateOwnersUpdateHandlers;
			stateOwnersUpdateHandlers.forEach((fn) => {
				if (prevHandlerTeardown && teardownSomething) prevHandlerTeardown();
				if (setupSomething) stateUpdateHandlers[stateName].stateOwnersUpdateHandlers = fn(handler, nextStateOwners);
			});
		});
		Object.entries(nextStateOwners).forEach(([stateOwnerName, stateOwner]) => {
			stateOwners[stateOwnerName] = stateOwner;
		});
		updateStateFromFacade();
		nextStateOwners = void 0;
	};
	updateStateOwners({
		media,
		fullscreenElement,
		documentElement,
		options
	});
	return {
		dispatch(action) {
			const { type, detail } = action;
			if (requestMap$1[type] && state.mediaErrorCode == null) {
				updateState(requestMap$1[type](stateMediator$1, stateOwners, action));
				return;
			}
			if (type === "mediaelementchangerequest") updateStateOwners({ media: detail });
			else if (type === "fullscreenelementchangerequest") updateStateOwners({ fullscreenElement: detail });
			else if (type === "documentelementchangerequest") updateStateOwners({ documentElement: detail });
			else if (type === "optionschangerequest") {
				Object.entries(detail != null ? detail : {}).forEach(([optionName, optionValue]) => {
					stateOwners.options[optionName] = optionValue;
				});
				updateStateFromFacade();
			}
		},
		getState() {
			return state;
		},
		subscribe(callback) {
			updateStateOwners({}, callbacks.length + 1);
			callbacks.push(callback);
			callback(state);
			return () => {
				const idx = callbacks.indexOf(callback);
				if (idx >= 0) {
					updateStateOwners({}, callbacks.length - 1);
					callbacks.splice(idx, 1);
				}
			};
		}
	};
};

//#endregion
//#region node_modules/media-chrome/dist/media-controller.js
var __accessCheck$15 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$15 = (obj, member, getter) => {
	__accessCheck$15(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$15 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$14 = (obj, member, value, setter) => {
	__accessCheck$15(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$4 = (obj, member, method) => {
	__accessCheck$15(obj, member, "access private method");
	return method;
};
var _hotKeys, _fullscreenElement, _mediaStore, _mediaStateCallback, _mediaStoreUnsubscribe, _mediaStateEventHandler, _setupDefaultStore, setupDefaultStore_fn, _keyUpHandler, keyUpHandler_fn, _keyDownHandler, keyDownHandler_fn;
var ButtonPressedKeys$1 = [
	"ArrowLeft",
	"ArrowRight",
	"Enter",
	" ",
	"f",
	"m",
	"k",
	"c"
];
var DEFAULT_SEEK_OFFSET$2 = 10;
var Attributes$9 = {
	DEFAULT_SUBTITLES: "defaultsubtitles",
	DEFAULT_STREAM_TYPE: "defaultstreamtype",
	DEFAULT_DURATION: "defaultduration",
	FULLSCREEN_ELEMENT: "fullscreenelement",
	HOTKEYS: "hotkeys",
	KEYS_USED: "keysused",
	LIVE_EDGE_OFFSET: "liveedgeoffset",
	SEEK_TO_LIVE_OFFSET: "seektoliveoffset",
	NO_AUTO_SEEK_TO_LIVE: "noautoseektolive",
	NO_HOTKEYS: "nohotkeys",
	NO_VOLUME_PREF: "novolumepref",
	NO_MUTED_PREF: "nomutedpref",
	NO_SUBTITLES_LANG_PREF: "nosubtitleslangpref",
	NO_DEFAULT_STORE: "nodefaultstore",
	KEYBOARD_FORWARD_SEEK_OFFSET: "keyboardforwardseekoffset",
	KEYBOARD_BACKWARD_SEEK_OFFSET: "keyboardbackwardseekoffset",
	LANG: "lang"
};
var MediaController = class extends MediaContainer {
	constructor() {
		super();
		__privateAdd$15(this, _setupDefaultStore);
		__privateAdd$15(this, _keyUpHandler);
		__privateAdd$15(this, _keyDownHandler);
		this.mediaStateReceivers = [];
		this.associatedElementSubscriptions = /* @__PURE__ */ new Map();
		__privateAdd$15(this, _hotKeys, new AttributeTokenList(this, Attributes$9.HOTKEYS));
		__privateAdd$15(this, _fullscreenElement, void 0);
		__privateAdd$15(this, _mediaStore, void 0);
		__privateAdd$15(this, _mediaStateCallback, void 0);
		__privateAdd$15(this, _mediaStoreUnsubscribe, void 0);
		__privateAdd$15(this, _mediaStateEventHandler, (event) => {
			var _a$1;
			(_a$1 = __privateGet$15(this, _mediaStore)) == null || _a$1.dispatch(event);
		});
		this.associateElement(this);
		let prevState = {};
		__privateSet$14(this, _mediaStateCallback, (nextState) => {
			Object.entries(nextState).forEach(([stateName, stateValue]) => {
				if (stateName in prevState && prevState[stateName] === stateValue) return;
				this.propagateMediaState(stateName, stateValue);
				const attrName = stateName.toLowerCase();
				const evt = new GlobalThis.CustomEvent(AttributeToStateChangeEventMap[attrName], {
					composed: true,
					detail: stateValue
				});
				this.dispatchEvent(evt);
			});
			prevState = nextState;
		});
		this.hasAttribute(Attributes$9.NO_HOTKEYS) ? this.disableHotkeys() : this.enableHotkeys();
	}
	static get observedAttributes() {
		return super.observedAttributes.concat(Attributes$9.NO_HOTKEYS, Attributes$9.HOTKEYS, Attributes$9.DEFAULT_STREAM_TYPE, Attributes$9.DEFAULT_SUBTITLES, Attributes$9.DEFAULT_DURATION, Attributes$9.LANG);
	}
	get mediaStore() {
		return __privateGet$15(this, _mediaStore);
	}
	set mediaStore(value) {
		var _a$1, _b;
		if (__privateGet$15(this, _mediaStore)) {
			(_a$1 = __privateGet$15(this, _mediaStoreUnsubscribe)) == null || _a$1.call(this);
			__privateSet$14(this, _mediaStoreUnsubscribe, void 0);
		}
		__privateSet$14(this, _mediaStore, value);
		if (!__privateGet$15(this, _mediaStore) && !this.hasAttribute(Attributes$9.NO_DEFAULT_STORE)) {
			__privateMethod$4(this, _setupDefaultStore, setupDefaultStore_fn).call(this);
			return;
		}
		__privateSet$14(this, _mediaStoreUnsubscribe, (_b = __privateGet$15(this, _mediaStore)) == null ? void 0 : _b.subscribe(__privateGet$15(this, _mediaStateCallback)));
	}
	get fullscreenElement() {
		var _a$1;
		return (_a$1 = __privateGet$15(this, _fullscreenElement)) != null ? _a$1 : this;
	}
	set fullscreenElement(element) {
		var _a$1;
		if (this.hasAttribute(Attributes$9.FULLSCREEN_ELEMENT)) this.removeAttribute(Attributes$9.FULLSCREEN_ELEMENT);
		__privateSet$14(this, _fullscreenElement, element);
		(_a$1 = __privateGet$15(this, _mediaStore)) == null || _a$1.dispatch({
			type: "fullscreenelementchangerequest",
			detail: this.fullscreenElement
		});
	}
	get defaultSubtitles() {
		return getBooleanAttr(this, Attributes$9.DEFAULT_SUBTITLES);
	}
	set defaultSubtitles(value) {
		setBooleanAttr(this, Attributes$9.DEFAULT_SUBTITLES, value);
	}
	get defaultStreamType() {
		return getStringAttr(this, Attributes$9.DEFAULT_STREAM_TYPE);
	}
	set defaultStreamType(value) {
		setStringAttr(this, Attributes$9.DEFAULT_STREAM_TYPE, value);
	}
	get defaultDuration() {
		return getNumericAttr(this, Attributes$9.DEFAULT_DURATION);
	}
	set defaultDuration(value) {
		setNumericAttr(this, Attributes$9.DEFAULT_DURATION, value);
	}
	get noHotkeys() {
		return getBooleanAttr(this, Attributes$9.NO_HOTKEYS);
	}
	set noHotkeys(value) {
		setBooleanAttr(this, Attributes$9.NO_HOTKEYS, value);
	}
	get keysUsed() {
		return getStringAttr(this, Attributes$9.KEYS_USED);
	}
	set keysUsed(value) {
		setStringAttr(this, Attributes$9.KEYS_USED, value);
	}
	get liveEdgeOffset() {
		return getNumericAttr(this, Attributes$9.LIVE_EDGE_OFFSET);
	}
	set liveEdgeOffset(value) {
		setNumericAttr(this, Attributes$9.LIVE_EDGE_OFFSET, value);
	}
	get noAutoSeekToLive() {
		return getBooleanAttr(this, Attributes$9.NO_AUTO_SEEK_TO_LIVE);
	}
	set noAutoSeekToLive(value) {
		setBooleanAttr(this, Attributes$9.NO_AUTO_SEEK_TO_LIVE, value);
	}
	get noVolumePref() {
		return getBooleanAttr(this, Attributes$9.NO_VOLUME_PREF);
	}
	set noVolumePref(value) {
		setBooleanAttr(this, Attributes$9.NO_VOLUME_PREF, value);
	}
	get noMutedPref() {
		return getBooleanAttr(this, Attributes$9.NO_MUTED_PREF);
	}
	set noMutedPref(value) {
		setBooleanAttr(this, Attributes$9.NO_MUTED_PREF, value);
	}
	get noSubtitlesLangPref() {
		return getBooleanAttr(this, Attributes$9.NO_SUBTITLES_LANG_PREF);
	}
	set noSubtitlesLangPref(value) {
		setBooleanAttr(this, Attributes$9.NO_SUBTITLES_LANG_PREF, value);
	}
	get noDefaultStore() {
		return getBooleanAttr(this, Attributes$9.NO_DEFAULT_STORE);
	}
	set noDefaultStore(value) {
		setBooleanAttr(this, Attributes$9.NO_DEFAULT_STORE, value);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$1, _b, _c, _d, _e, _f, _g, _h, _i;
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === Attributes$9.NO_HOTKEYS) {
			if (newValue !== oldValue && newValue === "") {
				if (this.hasAttribute(Attributes$9.HOTKEYS)) console.warn("Media Chrome: Both `hotkeys` and `nohotkeys` have been set. All hotkeys will be disabled.");
				this.disableHotkeys();
			} else if (newValue !== oldValue && newValue === null) this.enableHotkeys();
		} else if (attrName === Attributes$9.HOTKEYS) __privateGet$15(this, _hotKeys).value = newValue;
		else if (attrName === Attributes$9.DEFAULT_SUBTITLES && newValue !== oldValue) (_a$1 = __privateGet$15(this, _mediaStore)) == null || _a$1.dispatch({
			type: "optionschangerequest",
			detail: { defaultSubtitles: this.hasAttribute(Attributes$9.DEFAULT_SUBTITLES) }
		});
		else if (attrName === Attributes$9.DEFAULT_STREAM_TYPE) (_c = __privateGet$15(this, _mediaStore)) == null || _c.dispatch({
			type: "optionschangerequest",
			detail: { defaultStreamType: (_b = this.getAttribute(Attributes$9.DEFAULT_STREAM_TYPE)) != null ? _b : void 0 }
		});
		else if (attrName === Attributes$9.LIVE_EDGE_OFFSET) (_d = __privateGet$15(this, _mediaStore)) == null || _d.dispatch({
			type: "optionschangerequest",
			detail: {
				liveEdgeOffset: this.hasAttribute(Attributes$9.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes$9.LIVE_EDGE_OFFSET) : void 0,
				seekToLiveOffset: !this.hasAttribute(Attributes$9.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes$9.LIVE_EDGE_OFFSET) : void 0
			}
		});
		else if (attrName === Attributes$9.SEEK_TO_LIVE_OFFSET) (_e = __privateGet$15(this, _mediaStore)) == null || _e.dispatch({
			type: "optionschangerequest",
			detail: { seekToLiveOffset: this.hasAttribute(Attributes$9.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes$9.SEEK_TO_LIVE_OFFSET) : void 0 }
		});
		else if (attrName === Attributes$9.NO_AUTO_SEEK_TO_LIVE) (_f = __privateGet$15(this, _mediaStore)) == null || _f.dispatch({
			type: "optionschangerequest",
			detail: { noAutoSeekToLive: this.hasAttribute(Attributes$9.NO_AUTO_SEEK_TO_LIVE) }
		});
		else if (attrName === Attributes$9.FULLSCREEN_ELEMENT) {
			const el = newValue ? (_g = this.getRootNode()) == null ? void 0 : _g.getElementById(newValue) : void 0;
			__privateSet$14(this, _fullscreenElement, el);
			(_h = __privateGet$15(this, _mediaStore)) == null || _h.dispatch({
				type: "fullscreenelementchangerequest",
				detail: this.fullscreenElement
			});
		} else if (attrName === Attributes$9.LANG && newValue !== oldValue) {
			setLanguage(newValue);
			(_i = __privateGet$15(this, _mediaStore)) == null || _i.dispatch({
				type: "optionschangerequest",
				detail: { mediaLang: newValue }
			});
		}
	}
	connectedCallback() {
		var _a$1, _b;
		if (!__privateGet$15(this, _mediaStore) && !this.hasAttribute(Attributes$9.NO_DEFAULT_STORE)) __privateMethod$4(this, _setupDefaultStore, setupDefaultStore_fn).call(this);
		(_a$1 = __privateGet$15(this, _mediaStore)) == null || _a$1.dispatch({
			type: "documentelementchangerequest",
			detail: Document$1
		});
		super.connectedCallback();
		if (__privateGet$15(this, _mediaStore) && !__privateGet$15(this, _mediaStoreUnsubscribe)) __privateSet$14(this, _mediaStoreUnsubscribe, (_b = __privateGet$15(this, _mediaStore)) == null ? void 0 : _b.subscribe(__privateGet$15(this, _mediaStateCallback)));
		this.hasAttribute(Attributes$9.NO_HOTKEYS) ? this.disableHotkeys() : this.enableHotkeys();
	}
	disconnectedCallback() {
		var _a$1, _b, _c, _d;
		(_a$1 = super.disconnectedCallback) == null || _a$1.call(this);
		if (__privateGet$15(this, _mediaStore)) {
			(_b = __privateGet$15(this, _mediaStore)) == null || _b.dispatch({
				type: "documentelementchangerequest",
				detail: void 0
			});
			(_c = __privateGet$15(this, _mediaStore)) == null || _c.dispatch({
				type: MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST,
				detail: false
			});
		}
		if (__privateGet$15(this, _mediaStoreUnsubscribe)) {
			(_d = __privateGet$15(this, _mediaStoreUnsubscribe)) == null || _d.call(this);
			__privateSet$14(this, _mediaStoreUnsubscribe, void 0);
		}
	}
	/**
	* @override
	* @param {HTMLMediaElement} media
	*/
	mediaSetCallback(media) {
		var _a$1;
		super.mediaSetCallback(media);
		(_a$1 = __privateGet$15(this, _mediaStore)) == null || _a$1.dispatch({
			type: "mediaelementchangerequest",
			detail: media
		});
		if (!media.hasAttribute("tabindex")) media.tabIndex = -1;
	}
	/**
	* @override
	* @param {HTMLMediaElement} media
	*/
	mediaUnsetCallback(media) {
		var _a$1;
		super.mediaUnsetCallback(media);
		(_a$1 = __privateGet$15(this, _mediaStore)) == null || _a$1.dispatch({
			type: "mediaelementchangerequest",
			detail: void 0
		});
	}
	propagateMediaState(stateName, state) {
		propagateMediaState(this.mediaStateReceivers, stateName, state);
	}
	associateElement(element) {
		if (!element) return;
		const { associatedElementSubscriptions } = this;
		if (associatedElementSubscriptions.has(element)) return;
		const registerMediaStateReceiver = this.registerMediaStateReceiver.bind(this);
		const unregisterMediaStateReceiver = this.unregisterMediaStateReceiver.bind(this);
		const unsubscribe = monitorForMediaStateReceivers(element, registerMediaStateReceiver, unregisterMediaStateReceiver);
		Object.values(MediaUIEvents).forEach((eventName) => {
			element.addEventListener(eventName, __privateGet$15(this, _mediaStateEventHandler));
		});
		associatedElementSubscriptions.set(element, unsubscribe);
	}
	unassociateElement(element) {
		if (!element) return;
		const { associatedElementSubscriptions } = this;
		if (!associatedElementSubscriptions.has(element)) return;
		associatedElementSubscriptions.get(element)();
		associatedElementSubscriptions.delete(element);
		Object.values(MediaUIEvents).forEach((eventName) => {
			element.removeEventListener(eventName, __privateGet$15(this, _mediaStateEventHandler));
		});
	}
	registerMediaStateReceiver(el) {
		if (!el) return;
		const els = this.mediaStateReceivers;
		if (els.indexOf(el) > -1) return;
		els.push(el);
		if (__privateGet$15(this, _mediaStore)) Object.entries(__privateGet$15(this, _mediaStore).getState()).forEach(([stateName, stateValue]) => {
			propagateMediaState([el], stateName, stateValue);
		});
	}
	unregisterMediaStateReceiver(el) {
		const els = this.mediaStateReceivers;
		const index = els.indexOf(el);
		if (index < 0) return;
		els.splice(index, 1);
	}
	enableHotkeys() {
		this.addEventListener("keydown", __privateMethod$4(this, _keyDownHandler, keyDownHandler_fn));
	}
	disableHotkeys() {
		this.removeEventListener("keydown", __privateMethod$4(this, _keyDownHandler, keyDownHandler_fn));
		this.removeEventListener("keyup", __privateMethod$4(this, _keyUpHandler, keyUpHandler_fn));
	}
	get hotkeys() {
		return getStringAttr(this, Attributes$9.HOTKEYS);
	}
	set hotkeys(value) {
		setStringAttr(this, Attributes$9.HOTKEYS, value);
	}
	keyboardShortcutHandler(e) {
		var _a$1, _b, _c, _d, _e;
		const target = e.target;
		if (((_c = (_b = (_a$1 = target.getAttribute(Attributes$9.KEYS_USED)) == null ? void 0 : _a$1.split(" ")) != null ? _b : target == null ? void 0 : target.keysUsed) != null ? _c : []).map((key) => key === "Space" ? " " : key).filter(Boolean).includes(e.key)) return;
		let eventName, detail, evt;
		if (__privateGet$15(this, _hotKeys).contains(`no${e.key.toLowerCase()}`)) return;
		if (e.key === " " && __privateGet$15(this, _hotKeys).contains(`nospace`)) return;
		switch (e.key) {
			case " ":
			case "k":
				eventName = __privateGet$15(this, _mediaStore).getState().mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
				this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
					composed: true,
					bubbles: true
				}));
				break;
			case "m":
				eventName = this.mediaStore.getState().mediaVolumeLevel === "off" ? MediaUIEvents.MEDIA_UNMUTE_REQUEST : MediaUIEvents.MEDIA_MUTE_REQUEST;
				this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
					composed: true,
					bubbles: true
				}));
				break;
			case "f":
				eventName = this.mediaStore.getState().mediaIsFullscreen ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;
				this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
					composed: true,
					bubbles: true
				}));
				break;
			case "c":
				this.dispatchEvent(new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST, {
					composed: true,
					bubbles: true
				}));
				break;
			case "ArrowLeft": {
				const offsetValue = this.hasAttribute(Attributes$9.KEYBOARD_BACKWARD_SEEK_OFFSET) ? +this.getAttribute(Attributes$9.KEYBOARD_BACKWARD_SEEK_OFFSET) : DEFAULT_SEEK_OFFSET$2;
				detail = Math.max(((_d = this.mediaStore.getState().mediaCurrentTime) != null ? _d : 0) - offsetValue, 0);
				evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
					composed: true,
					bubbles: true,
					detail
				});
				this.dispatchEvent(evt);
				break;
			}
			case "ArrowRight": {
				const offsetValue = this.hasAttribute(Attributes$9.KEYBOARD_FORWARD_SEEK_OFFSET) ? +this.getAttribute(Attributes$9.KEYBOARD_FORWARD_SEEK_OFFSET) : DEFAULT_SEEK_OFFSET$2;
				detail = Math.max(((_e = this.mediaStore.getState().mediaCurrentTime) != null ? _e : 0) + offsetValue, 0);
				evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
					composed: true,
					bubbles: true,
					detail
				});
				this.dispatchEvent(evt);
				break;
			}
			default: break;
		}
	}
};
_hotKeys = /* @__PURE__ */ new WeakMap();
_fullscreenElement = /* @__PURE__ */ new WeakMap();
_mediaStore = /* @__PURE__ */ new WeakMap();
_mediaStateCallback = /* @__PURE__ */ new WeakMap();
_mediaStoreUnsubscribe = /* @__PURE__ */ new WeakMap();
_mediaStateEventHandler = /* @__PURE__ */ new WeakMap();
_setupDefaultStore = /* @__PURE__ */ new WeakSet();
setupDefaultStore_fn = function() {
	var _a$1;
	this.mediaStore = createMediaStore({
		media: this.media,
		fullscreenElement: this.fullscreenElement,
		options: {
			defaultSubtitles: this.hasAttribute(Attributes$9.DEFAULT_SUBTITLES),
			defaultDuration: this.hasAttribute(Attributes$9.DEFAULT_DURATION) ? +this.getAttribute(Attributes$9.DEFAULT_DURATION) : void 0,
			defaultStreamType: (_a$1 = this.getAttribute(Attributes$9.DEFAULT_STREAM_TYPE)) != null ? _a$1 : void 0,
			liveEdgeOffset: this.hasAttribute(Attributes$9.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes$9.LIVE_EDGE_OFFSET) : void 0,
			seekToLiveOffset: this.hasAttribute(Attributes$9.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes$9.SEEK_TO_LIVE_OFFSET) : this.hasAttribute(Attributes$9.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes$9.LIVE_EDGE_OFFSET) : void 0,
			noAutoSeekToLive: this.hasAttribute(Attributes$9.NO_AUTO_SEEK_TO_LIVE),
			noVolumePref: this.hasAttribute(Attributes$9.NO_VOLUME_PREF),
			noMutedPref: this.hasAttribute(Attributes$9.NO_MUTED_PREF),
			noSubtitlesLangPref: this.hasAttribute(Attributes$9.NO_SUBTITLES_LANG_PREF)
		}
	});
};
_keyUpHandler = /* @__PURE__ */ new WeakSet();
keyUpHandler_fn = function(e) {
	const { key } = e;
	if (!ButtonPressedKeys$1.includes(key)) {
		this.removeEventListener("keyup", __privateMethod$4(this, _keyUpHandler, keyUpHandler_fn));
		return;
	}
	this.keyboardShortcutHandler(e);
};
_keyDownHandler = /* @__PURE__ */ new WeakSet();
keyDownHandler_fn = function(e) {
	const { metaKey, altKey, key } = e;
	if (metaKey || altKey || !ButtonPressedKeys$1.includes(key)) {
		this.removeEventListener("keyup", __privateMethod$4(this, _keyUpHandler, keyUpHandler_fn));
		return;
	}
	if ([
		" ",
		"ArrowLeft",
		"ArrowRight"
	].includes(key) && !(__privateGet$15(this, _hotKeys).contains(`no${key.toLowerCase()}`) || key === " " && __privateGet$15(this, _hotKeys).contains("nospace"))) e.preventDefault();
	this.addEventListener("keyup", __privateMethod$4(this, _keyUpHandler, keyUpHandler_fn), { once: true });
};
var MEDIA_UI_ATTRIBUTE_NAMES = Object.values(MediaUIAttributes);
var MEDIA_UI_PROP_NAMES = Object.values(MediaUIProps);
var getMediaUIAttributesFrom = (child) => {
	var _a$1, _b, _c, _d;
	let { observedAttributes: observedAttributes$1 } = child.constructor;
	if (!observedAttributes$1 && ((_a$1 = child.nodeName) == null ? void 0 : _a$1.includes("-"))) {
		GlobalThis.customElements.upgrade(child);
		({observedAttributes: observedAttributes$1} = child.constructor);
	}
	const mediaChromeAttributesList = (_d = (_c = (_b = child == null ? void 0 : child.getAttribute) == null ? void 0 : _b.call(child, MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES)) == null ? void 0 : _c.split) == null ? void 0 : _d.call(_c, /\s+/);
	if (!Array.isArray(observedAttributes$1 || mediaChromeAttributesList)) return [];
	return (observedAttributes$1 || mediaChromeAttributesList).filter((attrName) => MEDIA_UI_ATTRIBUTE_NAMES.includes(attrName));
};
var hasMediaUIProps = (mediaStateReceiverCandidate) => {
	var _a$1, _b;
	if (((_a$1 = mediaStateReceiverCandidate.nodeName) == null ? void 0 : _a$1.includes("-")) && !!GlobalThis.customElements.get((_b = mediaStateReceiverCandidate.nodeName) == null ? void 0 : _b.toLowerCase()) && !(mediaStateReceiverCandidate instanceof GlobalThis.customElements.get(mediaStateReceiverCandidate.nodeName.toLowerCase()))) GlobalThis.customElements.upgrade(mediaStateReceiverCandidate);
	return MEDIA_UI_PROP_NAMES.some((propName) => propName in mediaStateReceiverCandidate);
};
var isMediaStateReceiver = (child) => {
	return hasMediaUIProps(child) || !!getMediaUIAttributesFrom(child).length;
};
var serializeTuple = (tuple) => {
	var _a$1;
	return (_a$1 = tuple == null ? void 0 : tuple.join) == null ? void 0 : _a$1.call(tuple, ":");
};
var CustomAttrSerializer = {
	[MediaUIAttributes.MEDIA_SUBTITLES_LIST]: stringifyTextTrackList,
	[MediaUIAttributes.MEDIA_SUBTITLES_SHOWING]: stringifyTextTrackList,
	[MediaUIAttributes.MEDIA_SEEKABLE]: serializeTuple,
	[MediaUIAttributes.MEDIA_BUFFERED]: (tuples) => tuples == null ? void 0 : tuples.map(serializeTuple).join(" "),
	[MediaUIAttributes.MEDIA_PREVIEW_COORDS]: (coords) => coords == null ? void 0 : coords.join(" "),
	[MediaUIAttributes.MEDIA_RENDITION_LIST]: stringifyRenditionList,
	[MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST]: stringifyAudioTrackList
};
var setAttr = async (child, attrName, attrValue) => {
	var _a$1, _b;
	if (!child.isConnected) await delay(0);
	if (typeof attrValue === "boolean" || attrValue == null) return setBooleanAttr(child, attrName, attrValue);
	if (typeof attrValue === "number") return setNumericAttr(child, attrName, attrValue);
	if (typeof attrValue === "string") return setStringAttr(child, attrName, attrValue);
	if (Array.isArray(attrValue) && !attrValue.length) return child.removeAttribute(attrName);
	const val = (_b = (_a$1 = CustomAttrSerializer[attrName]) == null ? void 0 : _a$1.call(CustomAttrSerializer, attrValue)) != null ? _b : attrValue;
	return child.setAttribute(attrName, val);
};
var isMediaSlotElementDescendant = (el) => {
	var _a$1;
	return !!((_a$1 = el.closest) == null ? void 0 : _a$1.call(el, "*[slot=\"media\"]"));
};
var traverseForMediaStateReceivers = (rootNode, mediaStateReceiverCallback) => {
	if (isMediaSlotElementDescendant(rootNode)) return;
	const traverseForMediaStateReceiversSync = (rootNode2, mediaStateReceiverCallback2) => {
		var _a$1, _b;
		if (isMediaStateReceiver(rootNode2)) mediaStateReceiverCallback2(rootNode2);
		const { children = [] } = rootNode2 != null ? rootNode2 : {};
		const shadowChildren = (_b = (_a$1 = rootNode2 == null ? void 0 : rootNode2.shadowRoot) == null ? void 0 : _a$1.children) != null ? _b : [];
		[...children, ...shadowChildren].forEach((child) => traverseForMediaStateReceivers(child, mediaStateReceiverCallback2));
	};
	const name = rootNode == null ? void 0 : rootNode.nodeName.toLowerCase();
	if (name.includes("-") && !isMediaStateReceiver(rootNode)) {
		GlobalThis.customElements.whenDefined(name).then(() => {
			traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);
		});
		return;
	}
	traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);
};
var propagateMediaState = (els, stateName, val) => {
	els.forEach((el) => {
		if (stateName in el) {
			el[stateName] = val;
			return;
		}
		const relevantAttrs = getMediaUIAttributesFrom(el);
		const attrName = stateName.toLowerCase();
		if (!relevantAttrs.includes(attrName)) return;
		setAttr(el, attrName, val);
	});
};
var monitorForMediaStateReceivers = (rootNode, registerMediaStateReceiver, unregisterMediaStateReceiver) => {
	traverseForMediaStateReceivers(rootNode, registerMediaStateReceiver);
	const registerMediaStateReceiverHandler = (evt) => {
		var _a$1;
		const el = (_a$1 = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a$1 : evt.target;
		registerMediaStateReceiver(el);
	};
	const unregisterMediaStateReceiverHandler = (evt) => {
		var _a$1;
		const el = (_a$1 = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a$1 : evt.target;
		unregisterMediaStateReceiver(el);
	};
	rootNode.addEventListener(MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER, registerMediaStateReceiverHandler);
	rootNode.addEventListener(MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER, unregisterMediaStateReceiverHandler);
	const mutationCallback = (mutationsList) => {
		mutationsList.forEach((mutationRecord) => {
			const { addedNodes = [], removedNodes = [], type, target, attributeName } = mutationRecord;
			if (type === "childList") {
				Array.prototype.forEach.call(addedNodes, (node) => traverseForMediaStateReceivers(node, registerMediaStateReceiver));
				Array.prototype.forEach.call(removedNodes, (node) => traverseForMediaStateReceivers(node, unregisterMediaStateReceiver));
			} else if (type === "attributes" && attributeName === MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES) if (isMediaStateReceiver(target)) registerMediaStateReceiver(target);
			else unregisterMediaStateReceiver(target);
		});
	};
	let prevSlotted = [];
	const slotChangeHandler = (event) => {
		const slotEl = event.target;
		if (slotEl.name === "media") return;
		prevSlotted.forEach((node) => traverseForMediaStateReceivers(node, unregisterMediaStateReceiver));
		prevSlotted = [...slotEl.assignedElements({ flatten: true })];
		prevSlotted.forEach((node) => traverseForMediaStateReceivers(node, registerMediaStateReceiver));
	};
	rootNode.addEventListener("slotchange", slotChangeHandler);
	const observer$1 = new MutationObserver(mutationCallback);
	observer$1.observe(rootNode, {
		childList: true,
		attributes: true,
		subtree: true
	});
	const unsubscribe = () => {
		traverseForMediaStateReceivers(rootNode, unregisterMediaStateReceiver);
		rootNode.removeEventListener("slotchange", slotChangeHandler);
		observer$1.disconnect();
		rootNode.removeEventListener(MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER, registerMediaStateReceiverHandler);
		rootNode.removeEventListener(MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER, unregisterMediaStateReceiverHandler);
	};
	return unsubscribe;
};
if (!GlobalThis.customElements.get("media-controller")) GlobalThis.customElements.define("media-controller", MediaController);
var media_controller_default = MediaController;

//#endregion
//#region node_modules/media-chrome/dist/media-tooltip.js
var Attributes$8 = {
	PLACEMENT: "placement",
	BOUNDS: "bounds"
};
function getTemplateHTML$9(_attrs) {
	return `
    <style>
      :host {
        --_tooltip-background-color: var(--media-tooltip-background-color, var(--media-secondary-color, rgba(20, 20, 30, .7)));
        --_tooltip-background: var(--media-tooltip-background, var(--_tooltip-background-color));
        --_tooltip-arrow-half-width: calc(var(--media-tooltip-arrow-width, 12px) / 2);
        --_tooltip-arrow-height: var(--media-tooltip-arrow-height, 5px);
        --_tooltip-arrow-background: var(--media-tooltip-arrow-color, var(--_tooltip-background-color));
        position: relative;
        pointer-events: none;
        display: var(--media-tooltip-display, inline-flex);
        justify-content: center;
        align-items: center;
        box-sizing: border-box;
        z-index: var(--media-tooltip-z-index, 1);
        background: var(--_tooltip-background);
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        font: var(--media-font,
          var(--media-font-weight, 400)
          var(--media-font-size, 13px) /
          var(--media-text-content-height, var(--media-control-height, 18px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        padding: var(--media-tooltip-padding, .35em .7em);
        border: var(--media-tooltip-border, none);
        border-radius: var(--media-tooltip-border-radius, 5px);
        filter: var(--media-tooltip-filter, drop-shadow(0 0 4px rgba(0, 0, 0, .2)));
        white-space: var(--media-tooltip-white-space, nowrap);
      }

      :host([hidden]) {
        display: none;
      }

      img, svg {
        display: inline-block;
      }

      #arrow {
        position: absolute;
        width: 0px;
        height: 0px;
        border-style: solid;
        display: var(--media-tooltip-arrow-display, block);
      }

      :host(:not([placement])),
      :host([placement="top"]) {
        position: absolute;
        bottom: calc(100% + var(--media-tooltip-distance, 12px));
        left: 50%;
        transform: translate(calc(-50% - var(--media-tooltip-offset-x, 0px)), 0);
      }
      :host(:not([placement])) #arrow,
      :host([placement="top"]) #arrow {
        top: 100%;
        left: 50%;
        border-width: var(--_tooltip-arrow-height) var(--_tooltip-arrow-half-width) 0 var(--_tooltip-arrow-half-width);
        border-color: var(--_tooltip-arrow-background) transparent transparent transparent;
        transform: translate(calc(-50% + var(--media-tooltip-offset-x, 0px)), 0);
      }

      :host([placement="right"]) {
        position: absolute;
        left: calc(100% + var(--media-tooltip-distance, 12px));
        top: 50%;
        transform: translate(0, -50%);
      }
      :host([placement="right"]) #arrow {
        top: 50%;
        right: 100%;
        border-width: var(--_tooltip-arrow-half-width) var(--_tooltip-arrow-height) var(--_tooltip-arrow-half-width) 0;
        border-color: transparent var(--_tooltip-arrow-background) transparent transparent;
        transform: translate(0, -50%);
      }

      :host([placement="bottom"]) {
        position: absolute;
        top: calc(100% + var(--media-tooltip-distance, 12px));
        left: 50%;
        transform: translate(calc(-50% - var(--media-tooltip-offset-x, 0px)), 0);
      }
      :host([placement="bottom"]) #arrow {
        bottom: 100%;
        left: 50%;
        border-width: 0 var(--_tooltip-arrow-half-width) var(--_tooltip-arrow-height) var(--_tooltip-arrow-half-width);
        border-color: transparent transparent var(--_tooltip-arrow-background) transparent;
        transform: translate(calc(-50% + var(--media-tooltip-offset-x, 0px)), 0);
      }

      :host([placement="left"]) {
        position: absolute;
        right: calc(100% + var(--media-tooltip-distance, 12px));
        top: 50%;
        transform: translate(0, -50%);
      }
      :host([placement="left"]) #arrow {
        top: 50%;
        left: 100%;
        border-width: var(--_tooltip-arrow-half-width) 0 var(--_tooltip-arrow-half-width) var(--_tooltip-arrow-height);
        border-color: transparent transparent transparent var(--_tooltip-arrow-background);
        transform: translate(0, -50%);
      }
      
      :host([placement="none"]) #arrow {
        display: none;
      }
    </style>
    <slot></slot>
    <div id="arrow"></div>
  `;
}
var MediaTooltip = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		this.updateXOffset = () => {
			var _a$1;
			if (!isElementVisible(this, {
				checkOpacity: false,
				checkVisibilityCSS: false
			})) return;
			const placement = this.placement;
			if (placement === "left" || placement === "right") {
				this.style.removeProperty("--media-tooltip-offset-x");
				return;
			}
			const tooltipStyle = getComputedStyle(this);
			const containingEl = (_a$1 = closestComposedNode(this, "#" + this.bounds)) != null ? _a$1 : getMediaController(this);
			if (!containingEl) return;
			const { x: containerX, width: containerWidth } = containingEl.getBoundingClientRect();
			const { x: tooltipX, width: tooltipWidth } = this.getBoundingClientRect();
			const tooltipRight = tooltipX + tooltipWidth;
			const containerRight = containerX + containerWidth;
			const offsetXVal = tooltipStyle.getPropertyValue("--media-tooltip-offset-x");
			const currOffsetX = offsetXVal ? parseFloat(offsetXVal.replace("px", "")) : 0;
			const marginVal = tooltipStyle.getPropertyValue("--media-tooltip-container-margin");
			const currMargin = marginVal ? parseFloat(marginVal.replace("px", "")) : 0;
			const leftDiff = tooltipX - containerX + currOffsetX - currMargin;
			const rightDiff = tooltipRight - containerRight + currOffsetX + currMargin;
			if (leftDiff < 0) {
				this.style.setProperty("--media-tooltip-offset-x", `${leftDiff}px`);
				return;
			}
			if (rightDiff > 0) {
				this.style.setProperty("--media-tooltip-offset-x", `${rightDiff}px`);
				return;
			}
			this.style.removeProperty("--media-tooltip-offset-x");
		};
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
		this.arrowEl = this.shadowRoot.querySelector("#arrow");
		if (Object.prototype.hasOwnProperty.call(this, "placement")) {
			const placement = this.placement;
			delete this.placement;
			this.placement = placement;
		}
	}
	static get observedAttributes() {
		return [Attributes$8.PLACEMENT, Attributes$8.BOUNDS];
	}
	/**
	* Get or set tooltip placement
	*/
	get placement() {
		return getStringAttr(this, Attributes$8.PLACEMENT);
	}
	set placement(value) {
		setStringAttr(this, Attributes$8.PLACEMENT, value);
	}
	/**
	* Get or set tooltip container ID selector that will constrain the tooltips
	* horizontal position.
	*/
	get bounds() {
		return getStringAttr(this, Attributes$8.BOUNDS);
	}
	set bounds(value) {
		setStringAttr(this, Attributes$8.BOUNDS, value);
	}
};
MediaTooltip.shadowRootOptions = { mode: "open" };
MediaTooltip.getTemplateHTML = getTemplateHTML$9;
if (!GlobalThis.customElements.get("media-tooltip")) GlobalThis.customElements.define("media-tooltip", MediaTooltip);
var media_tooltip_default = MediaTooltip;

//#endregion
//#region node_modules/media-chrome/dist/media-chrome-button.js
var __accessCheck$14 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$14 = (obj, member, getter) => {
	__accessCheck$14(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$14 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$13 = (obj, member, value, setter) => {
	__accessCheck$14(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$3 = (obj, member, method) => {
	__accessCheck$14(obj, member, "access private method");
	return method;
};
var _mediaController$5, _clickListener, _positionTooltip, _keyupListener, _keydownListener, _setupTooltip, setupTooltip_fn;
var Attributes$7 = {
	TOOLTIP_PLACEMENT: "tooltipplacement",
	DISABLED: "disabled",
	NO_TOOLTIP: "notooltip"
};
function getTemplateHTML$8(_attrs, _props = {}) {
	return `
    <style>
      :host {
        position: relative;
        font: var(--media-font,
          var(--media-font-weight, bold)
          var(--media-font-size, 14px) /
          var(--media-text-content-height, var(--media-control-height, 24px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
        padding: var(--media-button-padding, var(--media-control-padding, 10px));
        justify-content: var(--media-button-justify-content, center);
        display: inline-flex;
        align-items: center;
        vertical-align: middle;
        box-sizing: border-box;
        transition: background .15s linear;
        pointer-events: auto;
        cursor: var(--media-cursor, pointer);
        -webkit-tap-highlight-color: transparent;
      }

      
      :host(:focus-visible) {
        box-shadow: inset 0 0 0 2px rgb(27 127 204 / .9);
        outline: 0;
      }
      
      :host(:where(:focus)) {
        box-shadow: none;
        outline: 0;
      }

      :host(:hover) {
        background: var(--media-control-hover-background, rgba(50 50 70 / .7));
      }

      svg, img, ::slotted(svg), ::slotted(img) {
        width: var(--media-button-icon-width);
        height: var(--media-button-icon-height, var(--media-control-height, 24px));
        transform: var(--media-button-icon-transform);
        transition: var(--media-button-icon-transition);
        fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
        vertical-align: middle;
        max-width: 100%;
        max-height: 100%;
        min-width: 100%;
      }

      media-tooltip {
        
        max-width: 0;
        overflow-x: clip;
        opacity: 0;
        transition: opacity .3s, max-width 0s 9s;
      }

      :host(:hover) media-tooltip,
      :host(:focus-visible) media-tooltip {
        max-width: 100vw;
        opacity: 1;
        transition: opacity .3s;
      }

      :host([notooltip]) slot[name="tooltip"] {
        display: none;
      }
    </style>

    ${this.getSlotTemplateHTML(_attrs, _props)}

    <slot name="tooltip">
      <media-tooltip part="tooltip" aria-hidden="true">
        <template shadowrootmode="${media_tooltip_default.shadowRootOptions.mode}">
          ${media_tooltip_default.getTemplateHTML({})}
        </template>
        <slot name="tooltip-content">
          ${this.getTooltipContentHTML(_attrs)}
        </slot>
      </media-tooltip>
    </slot>
  `;
}
function getSlotTemplateHTML$16(_attrs, _props) {
	return `
    <slot></slot>
  `;
}
function getTooltipContentHTML$10() {
	return "";
}
var MediaChromeButton = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$14(this, _setupTooltip);
		__privateAdd$14(this, _mediaController$5, void 0);
		this.preventClick = false;
		this.tooltipEl = null;
		__privateAdd$14(this, _clickListener, (e) => {
			if (!this.preventClick) this.handleClick(e);
			setTimeout(__privateGet$14(this, _positionTooltip), 0);
		});
		__privateAdd$14(this, _positionTooltip, () => {
			var _a$1, _b;
			(_b = (_a$1 = this.tooltipEl) == null ? void 0 : _a$1.updateXOffset) == null || _b.call(_a$1);
		});
		__privateAdd$14(this, _keyupListener, (e) => {
			const { key } = e;
			if (!this.keysUsed.includes(key)) {
				this.removeEventListener("keyup", __privateGet$14(this, _keyupListener));
				return;
			}
			if (!this.preventClick) this.handleClick(e);
		});
		__privateAdd$14(this, _keydownListener, (e) => {
			const { metaKey, altKey, key } = e;
			if (metaKey || altKey || !this.keysUsed.includes(key)) {
				this.removeEventListener("keyup", __privateGet$14(this, _keyupListener));
				return;
			}
			this.addEventListener("keyup", __privateGet$14(this, _keyupListener), { once: true });
		});
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			const html = this.constructor.getTemplateHTML(attrs);
			this.shadowRoot.setHTMLUnsafe ? this.shadowRoot.setHTMLUnsafe(html) : this.shadowRoot.innerHTML = html;
		}
		this.tooltipEl = this.shadowRoot.querySelector("media-tooltip");
	}
	static get observedAttributes() {
		return [
			"disabled",
			Attributes$7.TOOLTIP_PLACEMENT,
			MediaStateReceiverAttributes.MEDIA_CONTROLLER,
			MediaUIAttributes.MEDIA_LANG
		];
	}
	enable() {
		this.addEventListener("click", __privateGet$14(this, _clickListener));
		this.addEventListener("keydown", __privateGet$14(this, _keydownListener));
		this.tabIndex = 0;
	}
	disable() {
		this.removeEventListener("click", __privateGet$14(this, _clickListener));
		this.removeEventListener("keydown", __privateGet$14(this, _keydownListener));
		this.removeEventListener("keyup", __privateGet$14(this, _keyupListener));
		this.tabIndex = -1;
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$1, _b, _c, _d, _e;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$1 = __privateGet$14(this, _mediaController$5)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
				__privateSet$13(this, _mediaController$5, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$13(this, _mediaController$5, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e = (_d = __privateGet$14(this, _mediaController$5)) == null ? void 0 : _d.associateElement) == null || _e.call(_d, this);
			}
		} else if (attrName === "disabled" && newValue !== oldValue) if (newValue == null) this.enable();
		else this.disable();
		else if (attrName === Attributes$7.TOOLTIP_PLACEMENT && this.tooltipEl && newValue !== oldValue) this.tooltipEl.placement = newValue;
		else if (attrName === MediaUIAttributes.MEDIA_LANG) this.shadowRoot.querySelector("slot[name=\"tooltip-content\"]").innerHTML = this.constructor.getTooltipContentHTML();
		__privateGet$14(this, _positionTooltip).call(this);
	}
	connectedCallback() {
		var _a$1, _b, _c;
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-flex))`);
		if (!this.hasAttribute("disabled")) this.enable();
		else this.disable();
		this.setAttribute("role", "button");
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$13(this, _mediaController$5, (_a$1 = this.getRootNode()) == null ? void 0 : _a$1.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$14(this, _mediaController$5)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
		GlobalThis.customElements.whenDefined("media-tooltip").then(() => __privateMethod$3(this, _setupTooltip, setupTooltip_fn).call(this));
	}
	disconnectedCallback() {
		var _a$1, _b;
		this.disable();
		(_b = (_a$1 = __privateGet$14(this, _mediaController$5)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
		__privateSet$13(this, _mediaController$5, null);
		this.removeEventListener("mouseenter", __privateGet$14(this, _positionTooltip));
		this.removeEventListener("focus", __privateGet$14(this, _positionTooltip));
		this.removeEventListener("click", __privateGet$14(this, _clickListener));
	}
	get keysUsed() {
		return ["Enter", " "];
	}
	/**
	* Get or set tooltip placement
	*/
	get tooltipPlacement() {
		return getStringAttr(this, Attributes$7.TOOLTIP_PLACEMENT);
	}
	set tooltipPlacement(value) {
		setStringAttr(this, Attributes$7.TOOLTIP_PLACEMENT, value);
	}
	get mediaController() {
		return getStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER);
	}
	set mediaController(value) {
		setStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER, value);
	}
	get disabled() {
		return getBooleanAttr(this, Attributes$7.DISABLED);
	}
	set disabled(value) {
		setBooleanAttr(this, Attributes$7.DISABLED, value);
	}
	get noTooltip() {
		return getBooleanAttr(this, Attributes$7.NO_TOOLTIP);
	}
	set noTooltip(value) {
		setBooleanAttr(this, Attributes$7.NO_TOOLTIP, value);
	}
	/**
	* @abstract
	* @argument {Event} e
	*/
	handleClick(e) {}
};
_mediaController$5 = /* @__PURE__ */ new WeakMap();
_clickListener = /* @__PURE__ */ new WeakMap();
_positionTooltip = /* @__PURE__ */ new WeakMap();
_keyupListener = /* @__PURE__ */ new WeakMap();
_keydownListener = /* @__PURE__ */ new WeakMap();
_setupTooltip = /* @__PURE__ */ new WeakSet();
setupTooltip_fn = function() {
	this.addEventListener("mouseenter", __privateGet$14(this, _positionTooltip));
	this.addEventListener("focus", __privateGet$14(this, _positionTooltip));
	this.addEventListener("click", __privateGet$14(this, _clickListener));
	const initialPlacement = this.tooltipPlacement;
	if (initialPlacement && this.tooltipEl) this.tooltipEl.placement = initialPlacement;
};
MediaChromeButton.shadowRootOptions = { mode: "open" };
MediaChromeButton.getTemplateHTML = getTemplateHTML$8;
MediaChromeButton.getSlotTemplateHTML = getSlotTemplateHTML$16;
MediaChromeButton.getTooltipContentHTML = getTooltipContentHTML$10;
if (!GlobalThis.customElements.get("media-chrome-button")) GlobalThis.customElements.define("media-chrome-button", MediaChromeButton);
var media_chrome_button_default = MediaChromeButton;

//#endregion
//#region node_modules/media-chrome/dist/media-airplay-button.js
var airplayIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.13 3H3.87a.87.87 0 0 0-.87.87v13.26a.87.87 0 0 0 .87.87h3.4L9 16H5V5h16v11h-4l1.72 2h3.4a.87.87 0 0 0 .87-.87V3.87a.87.87 0 0 0-.86-.87Zm-8.75 11.44a.5.5 0 0 0-.76 0l-4.91 5.73a.5.5 0 0 0 .38.83h9.82a.501.501 0 0 0 .38-.83l-4.91-5.73Z"/>
</svg>
`;
function getSlotTemplateHTML$15(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=icon] slot:not([name=exit]) {
        display: none !important;
      }

      
      :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=icon] slot:not([name=enter]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=tooltip-enter],
      :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=tooltip-exit] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="enter">${airplayIcon}</slot>
      <slot name="exit">${airplayIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$9() {
	return `
    <slot name="tooltip-enter">${t("start airplay")}</slot>
    <slot name="tooltip-exit">${t("stop airplay")}</slot>
  `;
}
var updateAriaLabel$5 = (el) => {
	const label = el.mediaIsAirplaying ? t("stop airplay") : t("start airplay");
	el.setAttribute("aria-label", label);
};
var MediaAirplayButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_IS_AIRPLAYING,
			MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$5(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_IS_AIRPLAYING) updateAriaLabel$5(this);
	}
	/**
	* Are we currently airplaying
	*/
	get mediaIsAirplaying() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING);
	}
	set mediaIsAirplaying(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING, value);
	}
	/**
	* Airplay unavailability state
	*/
	get mediaAirplayUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE);
	}
	set mediaAirplayUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE, value);
	}
	handleClick() {
		const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_AIRPLAY_REQUEST, {
			composed: true,
			bubbles: true
		});
		this.dispatchEvent(evt);
	}
};
MediaAirplayButton.getSlotTemplateHTML = getSlotTemplateHTML$15;
MediaAirplayButton.getTooltipContentHTML = getTooltipContentHTML$9;
if (!GlobalThis.customElements.get("media-airplay-button")) GlobalThis.customElements.define("media-airplay-button", MediaAirplayButton);
var media_airplay_button_default = MediaAirplayButton;

//#endregion
//#region node_modules/media-chrome/dist/media-captions-button.js
var ccIconOn = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M22.83 5.68a2.58 2.58 0 0 0-2.3-2.5c-3.62-.24-11.44-.24-15.06 0a2.58 2.58 0 0 0-2.3 2.5c-.23 4.21-.23 8.43 0 12.64a2.58 2.58 0 0 0 2.3 2.5c3.62.24 11.44.24 15.06 0a2.58 2.58 0 0 0 2.3-2.5c.23-4.21.23-8.43 0-12.64Zm-11.39 9.45a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.92 3.92 0 0 1 .92-2.77 3.18 3.18 0 0 1 2.43-1 2.94 2.94 0 0 1 2.13.78c.364.359.62.813.74 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.17 1.61 1.61 0 0 0-1.29.58 2.79 2.79 0 0 0-.5 1.89 3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.48 1.48 0 0 0 1-.37 2.1 2.1 0 0 0 .59-1.14l1.4.44a3.23 3.23 0 0 1-1.07 1.69Zm7.22 0a3.07 3.07 0 0 1-1.91.57 3.06 3.06 0 0 1-2.34-1 3.75 3.75 0 0 1-.92-2.67 3.88 3.88 0 0 1 .93-2.77 3.14 3.14 0 0 1 2.42-1 3 3 0 0 1 2.16.82 2.8 2.8 0 0 1 .73 1.31l-1.43.35a1.49 1.49 0 0 0-1.51-1.21 1.61 1.61 0 0 0-1.29.58A2.79 2.79 0 0 0 15 12a3 3 0 0 0 .49 1.93 1.61 1.61 0 0 0 1.27.58 1.44 1.44 0 0 0 1-.37 2.1 2.1 0 0 0 .6-1.15l1.4.44a3.17 3.17 0 0 1-1.1 1.7Z"/>
</svg>`;
var ccIconOff = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M17.73 14.09a1.4 1.4 0 0 1-1 .37 1.579 1.579 0 0 1-1.27-.58A3 3 0 0 1 15 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34A2.89 2.89 0 0 0 19 9.07a3 3 0 0 0-2.14-.78 3.14 3.14 0 0 0-2.42 1 3.91 3.91 0 0 0-.93 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.17 3.17 0 0 0 1.07-1.74l-1.4-.45c-.083.43-.3.822-.62 1.12Zm-7.22 0a1.43 1.43 0 0 1-1 .37 1.58 1.58 0 0 1-1.27-.58A3 3 0 0 1 7.76 12a2.8 2.8 0 0 1 .5-1.85 1.63 1.63 0 0 1 1.29-.57 1.47 1.47 0 0 1 1.51 1.2l1.43-.34a2.81 2.81 0 0 0-.74-1.32 2.94 2.94 0 0 0-2.13-.78 3.18 3.18 0 0 0-2.43 1 4 4 0 0 0-.92 2.78 3.74 3.74 0 0 0 .92 2.66 3.07 3.07 0 0 0 2.34 1 3.07 3.07 0 0 0 1.91-.57 3.23 3.23 0 0 0 1.07-1.74l-1.4-.45a2.06 2.06 0 0 1-.6 1.07Zm12.32-8.41a2.59 2.59 0 0 0-2.3-2.51C18.72 3.05 15.86 3 13 3c-2.86 0-5.72.05-7.53.17a2.59 2.59 0 0 0-2.3 2.51c-.23 4.207-.23 8.423 0 12.63a2.57 2.57 0 0 0 2.3 2.5c1.81.13 4.67.19 7.53.19 2.86 0 5.72-.06 7.53-.19a2.57 2.57 0 0 0 2.3-2.5c.23-4.207.23-8.423 0-12.63Zm-1.49 12.53a1.11 1.11 0 0 1-.91 1.11c-1.67.11-4.45.18-7.43.18-2.98 0-5.76-.07-7.43-.18a1.11 1.11 0 0 1-.91-1.11c-.21-4.14-.21-8.29 0-12.43a1.11 1.11 0 0 1 .91-1.11C7.24 4.56 10 4.49 13 4.49s5.76.07 7.43.18a1.11 1.11 0 0 1 .91 1.11c.21 4.14.21 8.29 0 12.43Z"/>
</svg>`;
function getSlotTemplateHTML$14(_attrs) {
	return `
    <style>
      :host([aria-checked="true"]) slot[name=off] {
        display: none !important;
      }

      
      :host(:not([aria-checked="true"])) slot[name=on] {
        display: none !important;
      }

      :host([aria-checked="true"]) slot[name=tooltip-enable],
      :host(:not([aria-checked="true"])) slot[name=tooltip-disable] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="on">${ccIconOn}</slot>
      <slot name="off">${ccIconOff}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$8() {
	return `
    <slot name="tooltip-enable">${t("Enable captions")}</slot>
    <slot name="tooltip-disable">${t("Disable captions")}</slot>
  `;
}
var updateAriaChecked = (el) => {
	el.setAttribute("aria-checked", areSubsOn(el).toString());
};
var MediaCaptionsButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_SUBTITLES_LIST,
			MediaUIAttributes.MEDIA_SUBTITLES_SHOWING
		];
	}
	connectedCallback() {
		super.connectedCallback();
		this.setAttribute("role", "switch");
		this.setAttribute("aria-label", t("closed captions"));
		updateAriaChecked(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_SUBTITLES_SHOWING) updateAriaChecked(this);
	}
	/**
	* An array of TextTrack-like objects.
	* Objects must have the properties: kind, language, and label.
	*/
	get mediaSubtitlesList() {
		return getSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST);
	}
	set mediaSubtitlesList(list) {
		setSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_LIST, list);
	}
	/**
	* An array of TextTrack-like objects.
	* Objects must have the properties: kind, language, and label.
	*/
	get mediaSubtitlesShowing() {
		return getSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);
	}
	set mediaSubtitlesShowing(list) {
		setSubtitlesListAttr(this, MediaUIAttributes.MEDIA_SUBTITLES_SHOWING, list);
	}
	handleClick() {
		this.dispatchEvent(new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaCaptionsButton.getSlotTemplateHTML = getSlotTemplateHTML$14;
MediaCaptionsButton.getTooltipContentHTML = getTooltipContentHTML$8;
var getSubtitlesListAttr = (el, attrName) => {
	const attrVal = el.getAttribute(attrName);
	return attrVal ? parseTextTracksStr(attrVal) : [];
};
var setSubtitlesListAttr = (el, attrName, list) => {
	if (!(list == null ? void 0 : list.length)) {
		el.removeAttribute(attrName);
		return;
	}
	const newValStr = stringifyTextTrackList(list);
	if (el.getAttribute(attrName) === newValStr) return;
	el.setAttribute(attrName, newValStr);
};
if (!GlobalThis.customElements.get("media-captions-button")) GlobalThis.customElements.define("media-captions-button", MediaCaptionsButton);
var media_captions_button_default = MediaCaptionsButton;

//#endregion
//#region node_modules/media-chrome/dist/media-cast-button.js
var enterIcon = `<svg aria-hidden="true" viewBox="0 0 24 24"><g><path class="cast_caf_icon_arch0" d="M1,18 L1,21 L4,21 C4,19.3 2.66,18 1,18 L1,18 Z"/><path class="cast_caf_icon_arch1" d="M1,14 L1,16 C3.76,16 6,18.2 6,21 L8,21 C8,17.13 4.87,14 1,14 L1,14 Z"/><path class="cast_caf_icon_arch2" d="M1,10 L1,12 C5.97,12 10,16.0 10,21 L12,21 C12,14.92 7.07,10 1,10 L1,10 Z"/><path class="cast_caf_icon_box" d="M21,3 L3,3 C1.9,3 1,3.9 1,5 L1,8 L3,8 L3,5 L21,5 L21,19 L14,19 L14,21 L21,21 C22.1,21 23,20.1 23,19 L23,5 C23,3.9 22.1,3 21,3 L21,3 Z"/></g></svg>`;
var exitIcon = `<svg aria-hidden="true" viewBox="0 0 24 24"><g><path class="cast_caf_icon_arch0" d="M1,18 L1,21 L4,21 C4,19.3 2.66,18 1,18 L1,18 Z"/><path class="cast_caf_icon_arch1" d="M1,14 L1,16 C3.76,16 6,18.2 6,21 L8,21 C8,17.13 4.87,14 1,14 L1,14 Z"/><path class="cast_caf_icon_arch2" d="M1,10 L1,12 C5.97,12 10,16.0 10,21 L12,21 C12,14.92 7.07,10 1,10 L1,10 Z"/><path class="cast_caf_icon_box" d="M21,3 L3,3 C1.9,3 1,3.9 1,5 L1,8 L3,8 L3,5 L21,5 L21,19 L14,19 L14,21 L21,21 C22.1,21 23,20.1 23,19 L23,5 C23,3.9 22.1,3 21,3 L21,3 Z"/><path class="cast_caf_icon_boxfill" d="M5,7 L5,8.63 C8,8.6 13.37,14 13.37,17 L19,17 L19,7 Z"/></g></svg>`;
function getSlotTemplateHTML$13(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_IS_CASTING}]) slot[name=icon] slot:not([name=exit]) {
        display: none !important;
      }

      
      :host(:not([${MediaUIAttributes.MEDIA_IS_CASTING}])) slot[name=icon] slot:not([name=enter]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_IS_CASTING}]) slot[name=tooltip-enter],
      :host(:not([${MediaUIAttributes.MEDIA_IS_CASTING}])) slot[name=tooltip-exit] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="enter">${enterIcon}</slot>
      <slot name="exit">${exitIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$7() {
	return `
    <slot name="tooltip-enter">${t("Start casting")}</slot>
    <slot name="tooltip-exit">${t("Stop casting")}</slot>
  `;
}
var updateAriaLabel$4 = (el) => {
	const label = el.mediaIsCasting ? t("stop casting") : t("start casting");
	el.setAttribute("aria-label", label);
};
var MediaCastButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_IS_CASTING,
			MediaUIAttributes.MEDIA_CAST_UNAVAILABLE
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$4(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_IS_CASTING) updateAriaLabel$4(this);
	}
	/**
	* @type {boolean} Are we currently casting
	*/
	get mediaIsCasting() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_CASTING);
	}
	set mediaIsCasting(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_CASTING, value);
	}
	/**
	* @type {string | undefined} Cast unavailability state
	*/
	get mediaCastUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_CAST_UNAVAILABLE);
	}
	set mediaCastUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_CAST_UNAVAILABLE, value);
	}
	handleClick() {
		const eventName = this.mediaIsCasting ? MediaUIEvents.MEDIA_EXIT_CAST_REQUEST : MediaUIEvents.MEDIA_ENTER_CAST_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaCastButton.getSlotTemplateHTML = getSlotTemplateHTML$13;
MediaCastButton.getTooltipContentHTML = getTooltipContentHTML$7;
if (!GlobalThis.customElements.get("media-cast-button")) GlobalThis.customElements.define("media-cast-button", MediaCastButton);
var media_cast_button_default = MediaCastButton;

//#endregion
//#region node_modules/media-chrome/dist/media-chrome-dialog.js
var __accessCheck$13 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$13 = (obj, member, getter) => {
	__accessCheck$13(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$13 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$12 = (obj, member, value, setter) => {
	__accessCheck$13(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$2 = (obj, member, method) => {
	__accessCheck$13(obj, member, "access private method");
	return method;
};
var _isInit, _previouslyFocused, _invokerElement, _init, init_fn, _handleOpen, handleOpen_fn, _handleClosed, handleClosed_fn, _handleInvoke, handleInvoke_fn, _handleFocusOut, handleFocusOut_fn, _handleKeyDown, handleKeyDown_fn;
function getTemplateHTML$7(_attrs) {
	return `
    <style>
      :host {
        font: var(--media-font,
          var(--media-font-weight, normal)
          var(--media-font-size, 14px) /
          var(--media-text-content-height, var(--media-control-height, 24px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        display: var(--media-dialog-display, inline-flex);
        justify-content: center;
        align-items: center;
        
        transition-behavior: allow-discrete;
        visibility: hidden;
        opacity: 0;
        transform: translateY(2px) scale(.99);
        pointer-events: none;
      }

      :host([open]) {
        transition: display .2s, visibility 0s, opacity .2s ease-out, transform .15s ease-out;
        visibility: visible;
        opacity: 1;
        transform: translateY(0) scale(1);
        pointer-events: auto;
      }

      #content {
        display: flex;
        position: relative;
        box-sizing: border-box;
        width: min(320px, 100%);
        word-wrap: break-word;
        max-height: 100%;
        overflow: auto;
        text-align: center;
        line-height: 1.4;
      }
    </style>
    ${this.getSlotTemplateHTML(_attrs)}
  `;
}
function getSlotTemplateHTML$12(_attrs) {
	return `
    <slot id="content"></slot>
  `;
}
var Attributes$6 = {
	OPEN: "open",
	ANCHOR: "anchor"
};
var MediaChromeDialog = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$13(this, _init);
		__privateAdd$13(this, _handleOpen);
		__privateAdd$13(this, _handleClosed);
		__privateAdd$13(this, _handleInvoke);
		__privateAdd$13(this, _handleFocusOut);
		__privateAdd$13(this, _handleKeyDown);
		__privateAdd$13(this, _isInit, false);
		__privateAdd$13(this, _previouslyFocused, null);
		__privateAdd$13(this, _invokerElement, null);
		this.addEventListener("invoke", this);
		this.addEventListener("focusout", this);
		this.addEventListener("keydown", this);
	}
	static get observedAttributes() {
		return [Attributes$6.OPEN, Attributes$6.ANCHOR];
	}
	get open() {
		return getBooleanAttr(this, Attributes$6.OPEN);
	}
	set open(value) {
		setBooleanAttr(this, Attributes$6.OPEN, value);
	}
	handleEvent(event) {
		switch (event.type) {
			case "invoke":
				__privateMethod$2(this, _handleInvoke, handleInvoke_fn).call(this, event);
				break;
			case "focusout":
				__privateMethod$2(this, _handleFocusOut, handleFocusOut_fn).call(this, event);
				break;
			case "keydown":
				__privateMethod$2(this, _handleKeyDown, handleKeyDown_fn).call(this, event);
				break;
		}
	}
	connectedCallback() {
		__privateMethod$2(this, _init, init_fn).call(this);
		if (!this.role) this.role = "dialog";
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		__privateMethod$2(this, _init, init_fn).call(this);
		if (attrName === Attributes$6.OPEN && newValue !== oldValue) if (this.open) __privateMethod$2(this, _handleOpen, handleOpen_fn).call(this);
		else __privateMethod$2(this, _handleClosed, handleClosed_fn).call(this);
	}
	focus() {
		__privateSet$12(this, _previouslyFocused, getActiveElement());
		const focusCancelled = !this.dispatchEvent(new Event("focus", {
			composed: true,
			cancelable: true
		}));
		const focusInCancelled = !this.dispatchEvent(new Event("focusin", {
			composed: true,
			bubbles: true,
			cancelable: true
		}));
		if (focusCancelled || focusInCancelled) return;
		this.querySelector("[autofocus], [tabindex]:not([tabindex=\"-1\"]), [role=\"menu\"]")?.focus();
	}
	get keysUsed() {
		return ["Escape", "Tab"];
	}
};
_isInit = /* @__PURE__ */ new WeakMap();
_previouslyFocused = /* @__PURE__ */ new WeakMap();
_invokerElement = /* @__PURE__ */ new WeakMap();
_init = /* @__PURE__ */ new WeakSet();
init_fn = function() {
	if (__privateGet$13(this, _isInit)) return;
	__privateSet$12(this, _isInit, true);
	if (!this.shadowRoot) {
		this.attachShadow(this.constructor.shadowRootOptions);
		const attrs = namedNodeMapToObject(this.attributes);
		this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		queueMicrotask(() => {
			const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
			style.setProperty("transition", `display .15s, visibility .15s, opacity .15s ease-in, transform .15s ease-in`);
		});
	}
};
_handleOpen = /* @__PURE__ */ new WeakSet();
handleOpen_fn = function() {
	var _a$1;
	(_a$1 = __privateGet$13(this, _invokerElement)) == null || _a$1.setAttribute("aria-expanded", "true");
	this.dispatchEvent(new Event("open", {
		composed: true,
		bubbles: true
	}));
	this.addEventListener("transitionend", () => this.focus(), { once: true });
};
_handleClosed = /* @__PURE__ */ new WeakSet();
handleClosed_fn = function() {
	var _a$1;
	(_a$1 = __privateGet$13(this, _invokerElement)) == null || _a$1.setAttribute("aria-expanded", "false");
	this.dispatchEvent(new Event("close", {
		composed: true,
		bubbles: true
	}));
};
_handleInvoke = /* @__PURE__ */ new WeakSet();
handleInvoke_fn = function(event) {
	__privateSet$12(this, _invokerElement, event.relatedTarget);
	if (!containsComposedNode(this, event.relatedTarget)) this.open = !this.open;
};
_handleFocusOut = /* @__PURE__ */ new WeakSet();
handleFocusOut_fn = function(event) {
	var _a$1;
	if (!containsComposedNode(this, event.relatedTarget)) {
		(_a$1 = __privateGet$13(this, _previouslyFocused)) == null || _a$1.focus();
		if (__privateGet$13(this, _invokerElement) && __privateGet$13(this, _invokerElement) !== event.relatedTarget && this.open) this.open = false;
	}
};
_handleKeyDown = /* @__PURE__ */ new WeakSet();
handleKeyDown_fn = function(event) {
	var _a$1, _b, _c, _d, _e;
	const { key, ctrlKey, altKey, metaKey } = event;
	if (ctrlKey || altKey || metaKey) return;
	if (!this.keysUsed.includes(key)) return;
	event.preventDefault();
	event.stopPropagation();
	if (key === "Tab") {
		if (event.shiftKey) (_b = (_a$1 = this.previousElementSibling) == null ? void 0 : _a$1.focus) == null || _b.call(_a$1);
		else (_d = (_c = this.nextElementSibling) == null ? void 0 : _c.focus) == null || _d.call(_c);
		this.blur();
	} else if (key === "Escape") {
		(_e = __privateGet$13(this, _previouslyFocused)) == null || _e.focus();
		this.open = false;
	}
};
MediaChromeDialog.shadowRootOptions = { mode: "open" };
MediaChromeDialog.getTemplateHTML = getTemplateHTML$7;
MediaChromeDialog.getSlotTemplateHTML = getSlotTemplateHTML$12;
if (!GlobalThis.customElements.get("media-chrome-dialog")) GlobalThis.customElements.define("media-chrome-dialog", MediaChromeDialog);
var media_chrome_dialog_default = MediaChromeDialog;

//#endregion
//#region node_modules/media-chrome/dist/media-chrome-range.js
var __accessCheck$12 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$12 = (obj, member, getter) => {
	__accessCheck$12(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$12 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$11 = (obj, member, value, setter) => {
	__accessCheck$12(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod$1 = (obj, member, method) => {
	__accessCheck$12(obj, member, "access private method");
	return method;
};
var _mediaController$4, _isInputTarget, _startpoint, _endpoint, _cssRules, _segments, _onFocusIn, _onFocusOut, _updateComputedStyles, _updateActiveSegment, updateActiveSegment_fn, _enableUserEvents, enableUserEvents_fn, _disableUserEvents, disableUserEvents_fn, _handlePointerDown, handlePointerDown_fn, _handlePointerEnter, handlePointerEnter_fn, _handlePointerUp, handlePointerUp_fn, _handlePointerLeave, handlePointerLeave_fn, _handlePointerMove$1, handlePointerMove_fn$1;
function getTemplateHTML$6(_attrs) {
	return `
    <style>
      :host {
        --_focus-box-shadow: var(--media-focus-box-shadow, inset 0 0 0 2px rgb(27 127 204 / .9));
        --_media-range-padding: var(--media-range-padding, var(--media-control-padding, 10px));

        box-shadow: var(--_focus-visible-box-shadow, none);
        background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
        height: calc(var(--media-control-height, 24px) + 2 * var(--_media-range-padding));
        display: inline-flex;
        align-items: center;
        
        vertical-align: middle;
        box-sizing: border-box;
        position: relative;
        width: 100px;
        transition: background .15s linear;
        cursor: var(--media-cursor, pointer);
        pointer-events: auto;
        touch-action: none; 
      }

      
      input[type=range]:focus {
        outline: 0;
      }
      input[type=range]:focus::-webkit-slider-runnable-track {
        outline: 0;
      }

      :host(:hover) {
        background: var(--media-control-hover-background, rgb(50 50 70 / .7));
      }

      #leftgap {
        padding-left: var(--media-range-padding-left, var(--_media-range-padding));
      }

      #rightgap {
        padding-right: var(--media-range-padding-right, var(--_media-range-padding));
      }

      #startpoint,
      #endpoint {
        position: absolute;
      }

      #endpoint {
        right: 0;
      }

      #container {
        
        width: var(--media-range-track-width, 100%);
        transform: translate(var(--media-range-track-translate-x, 0px), var(--media-range-track-translate-y, 0px));
        position: relative;
        height: 100%;
        display: flex;
        align-items: center;
        min-width: 40px;
      }

      #range {
        
        display: var(--media-time-range-hover-display, block);
        bottom: var(--media-time-range-hover-bottom, -7px);
        height: var(--media-time-range-hover-height, max(100% + 7px, 25px));
        width: 100%;
        position: absolute;
        cursor: var(--media-cursor, pointer);

        -webkit-appearance: none; 
        -webkit-tap-highlight-color: transparent;
        background: transparent; 
        margin: 0;
        z-index: 1;
      }

      @media (hover: hover) {
        #range {
          bottom: var(--media-time-range-hover-bottom, -5px);
          height: var(--media-time-range-hover-height, max(100% + 5px, 20px));
        }
      }

      
      
      #range::-webkit-slider-thumb {
        -webkit-appearance: none;
        background: transparent;
        width: .1px;
        height: .1px;
      }

      
      #range::-moz-range-thumb {
        background: transparent;
        border: transparent;
        width: .1px;
        height: .1px;
      }

      #appearance {
        height: var(--media-range-track-height, 4px);
        display: flex;
        flex-direction: column;
        justify-content: center;
        width: 100%;
        position: absolute;
        
        will-change: transform;
      }

      #track {
        background: var(--media-range-track-background, rgb(255 255 255 / .2));
        border-radius: var(--media-range-track-border-radius, 1px);
        border: var(--media-range-track-border, none);
        outline: var(--media-range-track-outline);
        outline-offset: var(--media-range-track-outline-offset);
        backdrop-filter: var(--media-range-track-backdrop-filter);
        -webkit-backdrop-filter: var(--media-range-track-backdrop-filter);
        box-shadow: var(--media-range-track-box-shadow, none);
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
      }

      #progress,
      #pointer {
        position: absolute;
        height: 100%;
        will-change: width;
      }

      #progress {
        background: var(--media-range-bar-color, var(--media-primary-color, rgb(238 238 238)));
        transition: var(--media-range-track-transition);
      }

      #pointer {
        background: var(--media-range-track-pointer-background);
        border-right: var(--media-range-track-pointer-border-right);
        transition: visibility .25s, opacity .25s;
        visibility: hidden;
        opacity: 0;
      }

      @media (hover: hover) {
        :host(:hover) #pointer {
          transition: visibility .5s, opacity .5s;
          visibility: visible;
          opacity: 1;
        }
      }

      #thumb,
      ::slotted([slot=thumb]) {
        width: var(--media-range-thumb-width, 10px);
        height: var(--media-range-thumb-height, 10px);
        transition: var(--media-range-thumb-transition);
        transform: var(--media-range-thumb-transform, none);
        opacity: var(--media-range-thumb-opacity, 1);
        translate: -50%;
        position: absolute;
        left: 0;
        cursor: var(--media-cursor, pointer);
      }

      #thumb {
        border-radius: var(--media-range-thumb-border-radius, 10px);
        background: var(--media-range-thumb-background, var(--media-primary-color, rgb(238 238 238)));
        box-shadow: var(--media-range-thumb-box-shadow, 1px 1px 1px transparent);
        border: var(--media-range-thumb-border, none);
      }

      :host([disabled]) #thumb {
        background-color: #777;
      }

      .segments #appearance {
        height: var(--media-range-segment-hover-height, 7px);
      }

      #track {
        clip-path: url(#segments-clipping);
      }

      #segments {
        --segments-gap: var(--media-range-segments-gap, 2px);
        position: absolute;
        width: 100%;
        height: 100%;
      }

      #segments-clipping {
        transform: translateX(calc(var(--segments-gap) / 2));
      }

      #segments-clipping:empty {
        display: none;
      }

      #segments-clipping rect {
        height: var(--media-range-track-height, 4px);
        y: calc((var(--media-range-segment-hover-height, 7px) - var(--media-range-track-height, 4px)) / 2);
        transition: var(--media-range-segment-transition, transform .1s ease-in-out);
        transform: var(--media-range-segment-transform, scaleY(1));
        transform-origin: center;
      }
    </style>
    <div id="leftgap"></div>
    <div id="container">
      <div id="startpoint"></div>
      <div id="endpoint"></div>
      <div id="appearance">
        <div id="track" part="track">
          <div id="pointer"></div>
          <div id="progress" part="progress"></div>
        </div>
        <slot name="thumb">
          <div id="thumb" part="thumb"></div>
        </slot>
        <svg id="segments"><clipPath id="segments-clipping"></clipPath></svg>
      </div>
      <input id="range" type="range" min="0" max="1" step="any" value="0">
    </div>
    <div id="rightgap"></div>
  `;
}
var MediaChromeRange = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$12(this, _updateActiveSegment);
		__privateAdd$12(this, _enableUserEvents);
		__privateAdd$12(this, _disableUserEvents);
		__privateAdd$12(this, _handlePointerDown);
		__privateAdd$12(this, _handlePointerEnter);
		__privateAdd$12(this, _handlePointerUp);
		__privateAdd$12(this, _handlePointerLeave);
		__privateAdd$12(this, _handlePointerMove$1);
		__privateAdd$12(this, _mediaController$4, void 0);
		__privateAdd$12(this, _isInputTarget, void 0);
		__privateAdd$12(this, _startpoint, void 0);
		__privateAdd$12(this, _endpoint, void 0);
		__privateAdd$12(this, _cssRules, {});
		__privateAdd$12(this, _segments, []);
		__privateAdd$12(this, _onFocusIn, () => {
			if (this.range.matches(":focus-visible")) {
				const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
				style.setProperty("--_focus-visible-box-shadow", "var(--_focus-box-shadow)");
			}
		});
		__privateAdd$12(this, _onFocusOut, () => {
			const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
			style.removeProperty("--_focus-visible-box-shadow");
		});
		__privateAdd$12(this, _updateComputedStyles, () => {
			const clipping = this.shadowRoot.querySelector("#segments-clipping");
			if (clipping) clipping.parentNode.append(clipping);
		});
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			const html = this.constructor.getTemplateHTML(attrs);
			this.shadowRoot.setHTMLUnsafe ? this.shadowRoot.setHTMLUnsafe(html) : this.shadowRoot.innerHTML = html;
		}
		this.container = this.shadowRoot.querySelector("#container");
		__privateSet$11(this, _startpoint, this.shadowRoot.querySelector("#startpoint"));
		__privateSet$11(this, _endpoint, this.shadowRoot.querySelector("#endpoint"));
		this.range = this.shadowRoot.querySelector("#range");
		this.appearance = this.shadowRoot.querySelector("#appearance");
	}
	static get observedAttributes() {
		return [
			"disabled",
			"aria-disabled",
			MediaStateReceiverAttributes.MEDIA_CONTROLLER
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$1, _b, _c, _d, _e;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$1 = __privateGet$12(this, _mediaController$4)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
				__privateSet$11(this, _mediaController$4, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$11(this, _mediaController$4, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e = (_d = __privateGet$12(this, _mediaController$4)) == null ? void 0 : _d.associateElement) == null || _e.call(_d, this);
			}
		} else if (attrName === "disabled" || attrName === "aria-disabled" && oldValue !== newValue) if (newValue == null) {
			this.range.removeAttribute(attrName);
			__privateMethod$1(this, _enableUserEvents, enableUserEvents_fn).call(this);
		} else {
			this.range.setAttribute(attrName, newValue);
			__privateMethod$1(this, _disableUserEvents, disableUserEvents_fn).call(this);
		}
	}
	connectedCallback() {
		var _a$1, _b, _c;
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-flex))`);
		__privateGet$12(this, _cssRules).pointer = getOrInsertCSSRule(this.shadowRoot, "#pointer");
		__privateGet$12(this, _cssRules).progress = getOrInsertCSSRule(this.shadowRoot, "#progress");
		__privateGet$12(this, _cssRules).thumb = getOrInsertCSSRule(this.shadowRoot, "#thumb, ::slotted([slot=\"thumb\"])");
		__privateGet$12(this, _cssRules).activeSegment = getOrInsertCSSRule(this.shadowRoot, "#segments-clipping rect:nth-child(0)");
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$11(this, _mediaController$4, (_a$1 = this.getRootNode()) == null ? void 0 : _a$1.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$12(this, _mediaController$4)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
		this.updateBar();
		this.shadowRoot.addEventListener("focusin", __privateGet$12(this, _onFocusIn));
		this.shadowRoot.addEventListener("focusout", __privateGet$12(this, _onFocusOut));
		__privateMethod$1(this, _enableUserEvents, enableUserEvents_fn).call(this);
		observeResize(this.container, __privateGet$12(this, _updateComputedStyles));
	}
	disconnectedCallback() {
		var _a$1, _b;
		__privateMethod$1(this, _disableUserEvents, disableUserEvents_fn).call(this);
		(_b = (_a$1 = __privateGet$12(this, _mediaController$4)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
		__privateSet$11(this, _mediaController$4, null);
		this.shadowRoot.removeEventListener("focusin", __privateGet$12(this, _onFocusIn));
		this.shadowRoot.removeEventListener("focusout", __privateGet$12(this, _onFocusOut));
		unobserveResize(this.container, __privateGet$12(this, _updateComputedStyles));
	}
	updatePointerBar(evt) {
		var _a$1;
		(_a$1 = __privateGet$12(this, _cssRules).pointer) == null || _a$1.style.setProperty("width", `${this.getPointerRatio(evt) * 100}%`);
	}
	updateBar() {
		var _a$1, _b;
		const rangePercent = this.range.valueAsNumber * 100;
		(_a$1 = __privateGet$12(this, _cssRules).progress) == null || _a$1.style.setProperty("width", `${rangePercent}%`);
		(_b = __privateGet$12(this, _cssRules).thumb) == null || _b.style.setProperty("left", `${rangePercent}%`);
	}
	updateSegments(segments) {
		const clipping = this.shadowRoot.querySelector("#segments-clipping");
		clipping.textContent = "";
		this.container.classList.toggle("segments", !!(segments == null ? void 0 : segments.length));
		if (!(segments == null ? void 0 : segments.length)) return;
		const normalized = [.../* @__PURE__ */ new Set([
			+this.range.min,
			...segments.flatMap((s) => [s.start, s.end]),
			+this.range.max
		])];
		__privateSet$11(this, _segments, [...normalized]);
		const lastMarker = normalized.pop();
		for (const [i, marker] of normalized.entries()) {
			const [isFirst, isLast] = [i === 0, i === normalized.length - 1];
			const x = isFirst ? "calc(var(--segments-gap) / -1)" : `${marker * 100}%`;
			const width = `calc(${((isLast ? lastMarker : normalized[i + 1]) - marker) * 100}%${isFirst || isLast ? "" : ` - var(--segments-gap)`})`;
			const segmentEl = Document$1.createElementNS("http://www.w3.org/2000/svg", "rect");
			const cssRule = getOrInsertCSSRule(this.shadowRoot, `#segments-clipping rect:nth-child(${i + 1})`);
			cssRule.style.setProperty("x", x);
			cssRule.style.setProperty("width", width);
			clipping.append(segmentEl);
		}
	}
	getPointerRatio(evt) {
		return getPointProgressOnLine(evt.clientX, evt.clientY, __privateGet$12(this, _startpoint).getBoundingClientRect(), __privateGet$12(this, _endpoint).getBoundingClientRect());
	}
	get dragging() {
		return this.hasAttribute("dragging");
	}
	handleEvent(evt) {
		switch (evt.type) {
			case "pointermove":
				__privateMethod$1(this, _handlePointerMove$1, handlePointerMove_fn$1).call(this, evt);
				break;
			case "input":
				this.updateBar();
				break;
			case "pointerenter":
				__privateMethod$1(this, _handlePointerEnter, handlePointerEnter_fn).call(this, evt);
				break;
			case "pointerdown":
				__privateMethod$1(this, _handlePointerDown, handlePointerDown_fn).call(this, evt);
				break;
			case "pointerup":
				__privateMethod$1(this, _handlePointerUp, handlePointerUp_fn).call(this);
				break;
			case "pointerleave":
				__privateMethod$1(this, _handlePointerLeave, handlePointerLeave_fn).call(this);
				break;
		}
	}
	get keysUsed() {
		return [
			"ArrowUp",
			"ArrowRight",
			"ArrowDown",
			"ArrowLeft"
		];
	}
};
_mediaController$4 = /* @__PURE__ */ new WeakMap();
_isInputTarget = /* @__PURE__ */ new WeakMap();
_startpoint = /* @__PURE__ */ new WeakMap();
_endpoint = /* @__PURE__ */ new WeakMap();
_cssRules = /* @__PURE__ */ new WeakMap();
_segments = /* @__PURE__ */ new WeakMap();
_onFocusIn = /* @__PURE__ */ new WeakMap();
_onFocusOut = /* @__PURE__ */ new WeakMap();
_updateComputedStyles = /* @__PURE__ */ new WeakMap();
_updateActiveSegment = /* @__PURE__ */ new WeakSet();
updateActiveSegment_fn = function(evt) {
	const rule = __privateGet$12(this, _cssRules).activeSegment;
	if (!rule) return;
	const pointerRatio = this.getPointerRatio(evt);
	const selectorText = `#segments-clipping rect:nth-child(${__privateGet$12(this, _segments).findIndex((start, i, arr) => {
		const end = arr[i + 1];
		return end != null && pointerRatio >= start && pointerRatio <= end;
	}) + 1})`;
	if (rule.selectorText != selectorText || !rule.style.transform) {
		rule.selectorText = selectorText;
		rule.style.setProperty("transform", "var(--media-range-segment-hover-transform, scaleY(2))");
	}
};
_enableUserEvents = /* @__PURE__ */ new WeakSet();
enableUserEvents_fn = function() {
	if (this.hasAttribute("disabled")) return;
	this.addEventListener("input", this);
	this.addEventListener("pointerdown", this);
	this.addEventListener("pointerenter", this);
};
_disableUserEvents = /* @__PURE__ */ new WeakSet();
disableUserEvents_fn = function() {
	var _a$1, _b;
	this.removeEventListener("input", this);
	this.removeEventListener("pointerdown", this);
	this.removeEventListener("pointerenter", this);
	(_a$1 = GlobalThis.window) == null || _a$1.removeEventListener("pointerup", this);
	(_b = GlobalThis.window) == null || _b.removeEventListener("pointermove", this);
};
_handlePointerDown = /* @__PURE__ */ new WeakSet();
handlePointerDown_fn = function(evt) {
	var _a$1;
	__privateSet$11(this, _isInputTarget, evt.composedPath().includes(this.range));
	(_a$1 = GlobalThis.window) == null || _a$1.addEventListener("pointerup", this);
};
_handlePointerEnter = /* @__PURE__ */ new WeakSet();
handlePointerEnter_fn = function(evt) {
	var _a$1;
	if (evt.pointerType !== "mouse") __privateMethod$1(this, _handlePointerDown, handlePointerDown_fn).call(this, evt);
	this.addEventListener("pointerleave", this);
	(_a$1 = GlobalThis.window) == null || _a$1.addEventListener("pointermove", this);
};
_handlePointerUp = /* @__PURE__ */ new WeakSet();
handlePointerUp_fn = function() {
	var _a$1;
	(_a$1 = GlobalThis.window) == null || _a$1.removeEventListener("pointerup", this);
	this.toggleAttribute("dragging", false);
	this.range.disabled = this.hasAttribute("disabled");
};
_handlePointerLeave = /* @__PURE__ */ new WeakSet();
handlePointerLeave_fn = function() {
	var _a$1, _b;
	this.removeEventListener("pointerleave", this);
	(_a$1 = GlobalThis.window) == null || _a$1.removeEventListener("pointermove", this);
	this.toggleAttribute("dragging", false);
	this.range.disabled = this.hasAttribute("disabled");
	(_b = __privateGet$12(this, _cssRules).activeSegment) == null || _b.style.removeProperty("transform");
};
_handlePointerMove$1 = /* @__PURE__ */ new WeakSet();
handlePointerMove_fn$1 = function(evt) {
	this.toggleAttribute("dragging", evt.buttons === 1 || evt.pointerType !== "mouse");
	this.updatePointerBar(evt);
	__privateMethod$1(this, _updateActiveSegment, updateActiveSegment_fn).call(this, evt);
	if (this.dragging && (evt.pointerType !== "mouse" || !__privateGet$12(this, _isInputTarget))) {
		this.range.disabled = true;
		this.range.valueAsNumber = this.getPointerRatio(evt);
		this.range.dispatchEvent(new Event("input", {
			bubbles: true,
			composed: true
		}));
	}
};
MediaChromeRange.shadowRootOptions = { mode: "open" };
MediaChromeRange.getTemplateHTML = getTemplateHTML$6;
if (!GlobalThis.customElements.get("media-chrome-range")) GlobalThis.customElements.define("media-chrome-range", MediaChromeRange);
var media_chrome_range_default = MediaChromeRange;

//#endregion
//#region node_modules/media-chrome/dist/media-control-bar.js
var __accessCheck$11 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$11 = (obj, member, getter) => {
	__accessCheck$11(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$11 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$10 = (obj, member, value, setter) => {
	__accessCheck$11(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController$3;
function getTemplateHTML$5(_attrs) {
	return `
    <style>
      :host {
        
        box-sizing: border-box;
        display: var(--media-control-display, var(--media-control-bar-display, inline-flex));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        --media-loading-indicator-icon-height: 44px;
      }

      ::slotted(media-time-range),
      ::slotted(media-volume-range) {
        min-height: 100%;
      }

      ::slotted(media-time-range),
      ::slotted(media-clip-selector) {
        flex-grow: 1;
      }

      ::slotted([role="menu"]) {
        position: absolute;
      }
    </style>

    <slot></slot>
  `;
}
var MediaControlBar = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$11(this, _mediaController$3, void 0);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [MediaStateReceiverAttributes.MEDIA_CONTROLLER];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$1, _b, _c, _d, _e;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$1 = __privateGet$11(this, _mediaController$3)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
				__privateSet$10(this, _mediaController$3, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$10(this, _mediaController$3, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e = (_d = __privateGet$11(this, _mediaController$3)) == null ? void 0 : _d.associateElement) == null || _e.call(_d, this);
			}
		}
	}
	connectedCallback() {
		var _a$1, _b, _c;
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$10(this, _mediaController$3, (_a$1 = this.getRootNode()) == null ? void 0 : _a$1.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$11(this, _mediaController$3)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
	}
	disconnectedCallback() {
		var _a$1, _b;
		(_b = (_a$1 = __privateGet$11(this, _mediaController$3)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
		__privateSet$10(this, _mediaController$3, null);
	}
};
_mediaController$3 = /* @__PURE__ */ new WeakMap();
MediaControlBar.shadowRootOptions = { mode: "open" };
MediaControlBar.getTemplateHTML = getTemplateHTML$5;
if (!GlobalThis.customElements.get("media-control-bar")) GlobalThis.customElements.define("media-control-bar", MediaControlBar);
var media_control_bar_default = MediaControlBar;

//#endregion
//#region node_modules/media-chrome/dist/media-text-display.js
var __accessCheck$10 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$10 = (obj, member, getter) => {
	__accessCheck$10(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$10 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$9 = (obj, member, value, setter) => {
	__accessCheck$10(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController$2;
function getTemplateHTML$4(_attrs, _props = {}) {
	return `
    <style>
      :host {
        font: var(--media-font,
          var(--media-font-weight, normal)
          var(--media-font-size, 14px) /
          var(--media-text-content-height, var(--media-control-height, 24px))
          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));
        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));
        background: var(--media-text-background, var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7))));
        padding: var(--media-control-padding, 10px);
        display: inline-flex;
        justify-content: center;
        align-items: center;
        vertical-align: middle;
        box-sizing: border-box;
        text-align: center;
        pointer-events: auto;
      }

      
      :host(:focus-visible) {
        box-shadow: inset 0 0 0 2px rgb(27 127 204 / .9);
        outline: 0;
      }

      
      :host(:where(:focus)) {
        box-shadow: none;
        outline: 0;
      }
    </style>

    ${this.getSlotTemplateHTML(_attrs, _props)}
  `;
}
function getSlotTemplateHTML$11(_attrs, _props) {
	return `
    <slot></slot>
  `;
}
var MediaTextDisplay = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$10(this, _mediaController$2, void 0);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [MediaStateReceiverAttributes.MEDIA_CONTROLLER];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$1, _b, _c, _d, _e;
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$1 = __privateGet$10(this, _mediaController$2)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
				__privateSet$9(this, _mediaController$2, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$9(this, _mediaController$2, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e = (_d = __privateGet$10(this, _mediaController$2)) == null ? void 0 : _d.associateElement) == null || _e.call(_d, this);
			}
		}
	}
	connectedCallback() {
		var _a$1, _b, _c;
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		style.setProperty("display", `var(--media-control-display, var(--${this.localName}-display, inline-flex))`);
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$9(this, _mediaController$2, (_a$1 = this.getRootNode()) == null ? void 0 : _a$1.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$10(this, _mediaController$2)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
	}
	disconnectedCallback() {
		var _a$1, _b;
		(_b = (_a$1 = __privateGet$10(this, _mediaController$2)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
		__privateSet$9(this, _mediaController$2, null);
	}
};
_mediaController$2 = /* @__PURE__ */ new WeakMap();
MediaTextDisplay.shadowRootOptions = { mode: "open" };
MediaTextDisplay.getTemplateHTML = getTemplateHTML$4;
MediaTextDisplay.getSlotTemplateHTML = getSlotTemplateHTML$11;
if (!GlobalThis.customElements.get("media-text-display")) GlobalThis.customElements.define("media-text-display", MediaTextDisplay);
var media_text_display_default = MediaTextDisplay;

//#endregion
//#region node_modules/media-chrome/dist/media-duration-display.js
var __accessCheck$9 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$9 = (obj, member, getter) => {
	__accessCheck$9(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$9 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$8 = (obj, member, value, setter) => {
	__accessCheck$9(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _slot$3;
function getSlotTemplateHTML$10(_attrs, props) {
	return `
    <slot>${formatTime(props.mediaDuration)}</slot>
  `;
}
var MediaDurationDisplay = class extends MediaTextDisplay {
	constructor() {
		var _a$1;
		super();
		__privateAdd$9(this, _slot$3, void 0);
		__privateSet$8(this, _slot$3, this.shadowRoot.querySelector("slot"));
		__privateGet$9(this, _slot$3).textContent = formatTime((_a$1 = this.mediaDuration) != null ? _a$1 : 0);
	}
	static get observedAttributes() {
		return [...super.observedAttributes, MediaUIAttributes.MEDIA_DURATION];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		if (attrName === MediaUIAttributes.MEDIA_DURATION) __privateGet$9(this, _slot$3).textContent = formatTime(+newValue);
		super.attributeChangedCallback(attrName, oldValue, newValue);
	}
	/**
	* @type {number | undefined} In seconds
	*/
	get mediaDuration() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_DURATION);
	}
	set mediaDuration(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_DURATION, time);
	}
};
_slot$3 = /* @__PURE__ */ new WeakMap();
MediaDurationDisplay.getSlotTemplateHTML = getSlotTemplateHTML$10;
if (!GlobalThis.customElements.get("media-duration-display")) GlobalThis.customElements.define("media-duration-display", MediaDurationDisplay);
var media_duration_display_default = MediaDurationDisplay;

//#endregion
//#region node_modules/media-chrome/dist/labels/labels.js
var defaultErrorTitles = {
	2: t("Network Error"),
	3: t("Decode Error"),
	4: t("Source Not Supported"),
	5: t("Encryption Error")
};
var defaultErrorMessages = {
	2: t("A network error caused the media download to fail."),
	3: t("A media error caused playback to be aborted. The media could be corrupt or your browser does not support this format."),
	4: t("An unsupported error occurred. The server or network failed, or your browser does not support this format."),
	5: t("The media is encrypted and there are no keys to decrypt it.")
};
var formatError = (error) => {
	var _a$1, _b;
	if (error.code === 1) return null;
	return {
		title: (_a$1 = defaultErrorTitles[error.code]) != null ? _a$1 : `Error ${error.code}`,
		message: (_b = defaultErrorMessages[error.code]) != null ? _b : error.message
	};
};

//#endregion
//#region node_modules/media-chrome/dist/media-error-dialog.js
var __accessCheck$8 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$8 = (obj, member, getter) => {
	__accessCheck$8(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$8 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$7 = (obj, member, value, setter) => {
	__accessCheck$8(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaError;
function getSlotTemplateHTML$9(attrs) {
	return `
    <style>
      :host {
        background: rgb(20 20 30 / .8);
      }

      #content {
        display: block;
        padding: 1.2em 1.5em;
      }

      h3,
      p {
        margin-block: 0 .3em;
      }
    </style>
    <slot name="error-${attrs.mediaerrorcode}" id="content">
      ${formatErrorMessage({
		code: +attrs.mediaerrorcode,
		message: attrs.mediaerrormessage
	})}
    </slot>
  `;
}
function shouldOpenErrorDialog(error) {
	return error.code && formatError(error) !== null;
}
function formatErrorMessage(error) {
	var _a$1;
	const { title, message } = (_a$1 = formatError(error)) != null ? _a$1 : {};
	let html = "";
	if (title) html += `<slot name="error-${error.code}-title"><h3>${title}</h3></slot>`;
	if (message) html += `<slot name="error-${error.code}-message"><p>${message}</p></slot>`;
	return html;
}
var observedAttributes = [MediaUIAttributes.MEDIA_ERROR_CODE, MediaUIAttributes.MEDIA_ERROR_MESSAGE];
var MediaErrorDialog = class extends MediaChromeDialog {
	constructor() {
		super(...arguments);
		__privateAdd$8(this, _mediaError, null);
	}
	static get observedAttributes() {
		return [...super.observedAttributes, ...observedAttributes];
	}
	formatErrorMessage(error) {
		return this.constructor.formatErrorMessage(error);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$1;
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (!observedAttributes.includes(attrName)) return;
		const mediaError = (_a$1 = this.mediaError) != null ? _a$1 : {
			code: this.mediaErrorCode,
			message: this.mediaErrorMessage
		};
		this.open = shouldOpenErrorDialog(mediaError);
		if (this.open) {
			this.shadowRoot.querySelector("slot").name = `error-${this.mediaErrorCode}`;
			this.shadowRoot.querySelector("#content").innerHTML = this.formatErrorMessage(mediaError);
		}
	}
	get mediaError() {
		return __privateGet$8(this, _mediaError);
	}
	set mediaError(value) {
		__privateSet$7(this, _mediaError, value);
	}
	get mediaErrorCode() {
		return getNumericAttr(this, "mediaerrorcode");
	}
	set mediaErrorCode(value) {
		setNumericAttr(this, "mediaerrorcode", value);
	}
	get mediaErrorMessage() {
		return getStringAttr(this, "mediaerrormessage");
	}
	set mediaErrorMessage(value) {
		setStringAttr(this, "mediaerrormessage", value);
	}
};
_mediaError = /* @__PURE__ */ new WeakMap();
MediaErrorDialog.getSlotTemplateHTML = getSlotTemplateHTML$9;
MediaErrorDialog.formatErrorMessage = formatErrorMessage;
if (!GlobalThis.customElements.get("media-error-dialog")) GlobalThis.customElements.define("media-error-dialog", MediaErrorDialog);
var media_error_dialog_default = MediaErrorDialog;

//#endregion
//#region node_modules/media-chrome/dist/media-fullscreen-button.js
var enterFullscreenIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M16 3v2.5h3.5V9H22V3h-6ZM4 9h2.5V5.5H10V3H4v6Zm15.5 9.5H16V21h6v-6h-2.5v3.5ZM6.5 15H4v6h6v-2.5H6.5V15Z"/>
</svg>`;
var exitFullscreenIcon = `<svg aria-hidden="true" viewBox="0 0 26 24">
  <path d="M18.5 6.5V3H16v6h6V6.5h-3.5ZM16 21h2.5v-3.5H22V15h-6v6ZM4 17.5h3.5V21H10v-6H4v2.5Zm3.5-11H4V9h6V3H7.5v3.5Z"/>
</svg>`;
function getSlotTemplateHTML$8(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=icon] slot:not([name=exit]) {
        display: none !important;
      }

      
      :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=icon] slot:not([name=enter]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=tooltip-enter],
      :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=tooltip-exit] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="enter">${enterFullscreenIcon}</slot>
      <slot name="exit">${exitFullscreenIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$6() {
	return `
    <slot name="tooltip-enter">${t("Enter fullscreen mode")}</slot>
    <slot name="tooltip-exit">${t("Exit fullscreen mode")}</slot>
  `;
}
var updateAriaLabel$3 = (el) => {
	const label = el.mediaIsFullscreen ? t("exit fullscreen mode") : t("enter fullscreen mode");
	el.setAttribute("aria-label", label);
};
var MediaFullscreenButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_IS_FULLSCREEN,
			MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$3(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_IS_FULLSCREEN) updateAriaLabel$3(this);
	}
	/**
	* @type {string | undefined} Fullscreen unavailability state
	*/
	get mediaFullscreenUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE);
	}
	set mediaFullscreenUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE, value);
	}
	/**
	* @type {boolean} Whether fullscreen is available
	*/
	get mediaIsFullscreen() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN);
	}
	set mediaIsFullscreen(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN, value);
	}
	handleClick() {
		const eventName = this.mediaIsFullscreen ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaFullscreenButton.getSlotTemplateHTML = getSlotTemplateHTML$8;
MediaFullscreenButton.getTooltipContentHTML = getTooltipContentHTML$6;
if (!GlobalThis.customElements.get("media-fullscreen-button")) GlobalThis.customElements.define("media-fullscreen-button", MediaFullscreenButton);
var media_fullscreen_button_default = MediaFullscreenButton;

//#endregion
//#region node_modules/media-chrome/dist/media-live-button.js
var { MEDIA_TIME_IS_LIVE, MEDIA_PAUSED } = MediaUIAttributes;
var { MEDIA_SEEK_TO_LIVE_REQUEST, MEDIA_PLAY_REQUEST } = MediaUIEvents;
var indicatorSVG = "<svg viewBox=\"0 0 6 12\"><circle cx=\"3\" cy=\"6\" r=\"2\"></circle></svg>";
function getSlotTemplateHTML$7(_attrs) {
	return `
    <style>
      :host { --media-tooltip-display: none; }
      
      slot[name=indicator] > *,
      :host ::slotted([slot=indicator]) {
        
        min-width: auto;
        fill: var(--media-live-button-icon-color, rgb(140, 140, 140));
        color: var(--media-live-button-icon-color, rgb(140, 140, 140));
      }

      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) slot[name=indicator] > *,
      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) ::slotted([slot=indicator]) {
        fill: var(--media-live-button-indicator-color, rgb(255, 0, 0));
        color: var(--media-live-button-indicator-color, rgb(255, 0, 0));
      }

      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) {
        cursor: var(--media-cursor, not-allowed);
      }

      slot[name=text]{
        text-transform: uppercase;
      }

    </style>

    <slot name="indicator">${indicatorSVG}</slot>
    
    <slot name="spacer">&nbsp;</slot><slot name="text">${t("live")}</slot>
  `;
}
var updateAriaAttributes = (el) => {
	var _a$1;
	const isPausedOrNotLive = el.mediaPaused || !el.mediaTimeIsLive;
	const label = isPausedOrNotLive ? t("seek to live") : t("playing live");
	el.setAttribute("aria-label", label);
	const textSlot = (_a$1 = el.shadowRoot) == null ? void 0 : _a$1.querySelector("slot[name=\"text\"]");
	if (textSlot) textSlot.textContent = t("live");
	isPausedOrNotLive ? el.removeAttribute("aria-disabled") : el.setAttribute("aria-disabled", "true");
};
var MediaLiveButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MEDIA_TIME_IS_LIVE,
			MEDIA_PAUSED
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaAttributes(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		updateAriaAttributes(this);
	}
	/**
	* @type {boolean} Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	/**
	* @type {boolean} Is the media playback currently live
	*/
	get mediaTimeIsLive() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE);
	}
	set mediaTimeIsLive(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE, value);
	}
	handleClick() {
		if (!this.mediaPaused && this.mediaTimeIsLive) return;
		this.dispatchEvent(new GlobalThis.CustomEvent(MEDIA_SEEK_TO_LIVE_REQUEST, {
			composed: true,
			bubbles: true
		}));
		if (this.hasAttribute(MEDIA_PAUSED)) this.dispatchEvent(new GlobalThis.CustomEvent(MEDIA_PLAY_REQUEST, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaLiveButton.getSlotTemplateHTML = getSlotTemplateHTML$7;
if (!GlobalThis.customElements.get("media-live-button")) GlobalThis.customElements.define("media-live-button", MediaLiveButton);
var media_live_button_default = MediaLiveButton;

//#endregion
//#region node_modules/media-chrome/dist/media-loading-indicator.js
var __accessCheck$7 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$7 = (obj, member, getter) => {
	__accessCheck$7(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$7 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$6 = (obj, member, value, setter) => {
	__accessCheck$7(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController$1, _delay;
var Attributes$5 = {
	LOADING_DELAY: "loadingdelay",
	NO_AUTOHIDE: "noautohide"
};
var DEFAULT_LOADING_DELAY = 500;
var loadingIndicatorIcon = `
<svg aria-hidden="true" viewBox="0 0 100 100">
  <path d="M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50">
    <animateTransform
       attributeName="transform"
       attributeType="XML"
       type="rotate"
       dur="1s"
       from="0 50 50"
       to="360 50 50"
       repeatCount="indefinite" />
  </path>
</svg>
`;
function getTemplateHTML$3(_attrs) {
	return `
    <style>
      :host {
        display: var(--media-control-display, var(--media-loading-indicator-display, inline-block));
        vertical-align: middle;
        box-sizing: border-box;
        --_loading-indicator-delay: var(--media-loading-indicator-transition-delay, ${DEFAULT_LOADING_DELAY}ms);
      }

      #status {
        color: rgba(0,0,0,0);
        width: 0px;
        height: 0px;
      }

      :host slot[name=icon] > *,
      :host ::slotted([slot=icon]) {
        opacity: var(--media-loading-indicator-opacity, 0);
        transition: opacity 0.15s;
      }

      :host([${MediaUIAttributes.MEDIA_LOADING}]:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=icon] > *,
      :host([${MediaUIAttributes.MEDIA_LOADING}]:not([${MediaUIAttributes.MEDIA_PAUSED}])) ::slotted([slot=icon]) {
        opacity: var(--media-loading-indicator-opacity, 1);
        transition: opacity 0.15s var(--_loading-indicator-delay);
      }

      :host #status {
        visibility: var(--media-loading-indicator-opacity, hidden);
        transition: visibility 0.15s;
      }

      :host([${MediaUIAttributes.MEDIA_LOADING}]:not([${MediaUIAttributes.MEDIA_PAUSED}])) #status {
        visibility: var(--media-loading-indicator-opacity, visible);
        transition: visibility 0.15s var(--_loading-indicator-delay);
      }

      svg, img, ::slotted(svg), ::slotted(img) {
        width: var(--media-loading-indicator-icon-width);
        height: var(--media-loading-indicator-icon-height, 100px);
        fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));
        vertical-align: middle;
      }
    </style>

    <slot name="icon">${loadingIndicatorIcon}</slot>
    <div id="status" role="status" aria-live="polite">${t("media loading")}</div>
  `;
}
var MediaLoadingIndicator = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$7(this, _mediaController$1, void 0);
		__privateAdd$7(this, _delay, DEFAULT_LOADING_DELAY);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [
			MediaStateReceiverAttributes.MEDIA_CONTROLLER,
			MediaUIAttributes.MEDIA_PAUSED,
			MediaUIAttributes.MEDIA_LOADING,
			Attributes$5.LOADING_DELAY
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$1, _b, _c, _d, _e;
		if (attrName === Attributes$5.LOADING_DELAY && oldValue !== newValue) this.loadingDelay = Number(newValue);
		else if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$1 = __privateGet$7(this, _mediaController$1)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
				__privateSet$6(this, _mediaController$1, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$6(this, _mediaController$1, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e = (_d = __privateGet$7(this, _mediaController$1)) == null ? void 0 : _d.associateElement) == null || _e.call(_d, this);
			}
		}
	}
	connectedCallback() {
		var _a$1, _b, _c;
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$6(this, _mediaController$1, (_a$1 = this.getRootNode()) == null ? void 0 : _a$1.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$7(this, _mediaController$1)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
	}
	disconnectedCallback() {
		var _a$1, _b;
		(_b = (_a$1 = __privateGet$7(this, _mediaController$1)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
		__privateSet$6(this, _mediaController$1, null);
	}
	/**
	* Delay in ms
	*/
	get loadingDelay() {
		return __privateGet$7(this, _delay);
	}
	set loadingDelay(delay$1) {
		__privateSet$6(this, _delay, delay$1);
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		style.setProperty("--_loading-indicator-delay", `var(--media-loading-indicator-transition-delay, ${delay$1}ms)`);
	}
	/**
	* Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	/**
	* Is the media loading
	*/
	get mediaLoading() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING);
	}
	set mediaLoading(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING, value);
	}
	get mediaController() {
		return getStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER);
	}
	set mediaController(value) {
		setStringAttr(this, MediaStateReceiverAttributes.MEDIA_CONTROLLER, value);
	}
	get noAutohide() {
		return getBooleanAttr(this, Attributes$5.NO_AUTOHIDE);
	}
	set noAutohide(value) {
		setBooleanAttr(this, Attributes$5.NO_AUTOHIDE, value);
	}
};
_mediaController$1 = /* @__PURE__ */ new WeakMap();
_delay = /* @__PURE__ */ new WeakMap();
MediaLoadingIndicator.shadowRootOptions = { mode: "open" };
MediaLoadingIndicator.getTemplateHTML = getTemplateHTML$3;
if (!GlobalThis.customElements.get("media-loading-indicator")) GlobalThis.customElements.define("media-loading-indicator", MediaLoadingIndicator);
var media_loading_indicator_default = MediaLoadingIndicator;

//#endregion
//#region node_modules/media-chrome/dist/media-mute-button.js
var offIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M16.5 12A4.5 4.5 0 0 0 14 8v2.18l2.45 2.45a4.22 4.22 0 0 0 .05-.63Zm2.5 0a6.84 6.84 0 0 1-.54 2.64L20 16.15A8.8 8.8 0 0 0 21 12a9 9 0 0 0-7-8.77v2.06A7 7 0 0 1 19 12ZM4.27 3 3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25A6.92 6.92 0 0 1 14 18.7v2.06A9 9 0 0 0 17.69 19l2 2.05L21 19.73l-9-9L4.27 3ZM12 4 9.91 6.09 12 8.18V4Z"/>
</svg>`;
var lowIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M3 9v6h4l5 5V4L7 9H3Zm13.5 3A4.5 4.5 0 0 0 14 8v8a4.47 4.47 0 0 0 2.5-4Z"/>
</svg>`;
var highIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M3 9v6h4l5 5V4L7 9H3Zm13.5 3A4.5 4.5 0 0 0 14 8v8a4.47 4.47 0 0 0 2.5-4ZM14 3.23v2.06a7 7 0 0 1 0 13.42v2.06a9 9 0 0 0 0-17.54Z"/>
</svg>`;
function getSlotTemplateHTML$6(_attrs) {
	return `
    <style>
      :host(:not([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}])) slot[name=icon] slot:not([name=high]),
      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=high]) slot[name=icon] slot:not([name=high]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=off]) slot[name=icon] slot:not([name=off]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=low]) slot[name=icon] slot:not([name=low]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=medium]) slot[name=icon] slot:not([name=medium]) {
        display: none !important;
      }

      :host(:not([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=off])) slot[name=tooltip-unmute],
      :host([${MediaUIAttributes.MEDIA_VOLUME_LEVEL}=off]) slot[name=tooltip-mute] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="off">${offIcon}</slot>
      <slot name="low">${lowIcon}</slot>
      <slot name="medium">${lowIcon}</slot>
      <slot name="high">${highIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$5() {
	return `
    <slot name="tooltip-mute">${t("Mute")}</slot>
    <slot name="tooltip-unmute">${t("Unmute")}</slot>
  `;
}
var updateAriaLabel$2 = (el) => {
	const label = el.mediaVolumeLevel === "off" ? t("unmute") : t("mute");
	el.setAttribute("aria-label", label);
};
var MediaMuteButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [...super.observedAttributes, MediaUIAttributes.MEDIA_VOLUME_LEVEL];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$2(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_VOLUME_LEVEL) updateAriaLabel$2(this);
	}
	/**
	* @type {string | undefined}
	*/
	get mediaVolumeLevel() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_LEVEL);
	}
	set mediaVolumeLevel(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_LEVEL, value);
	}
	handleClick() {
		const eventName = this.mediaVolumeLevel === "off" ? MediaUIEvents.MEDIA_UNMUTE_REQUEST : MediaUIEvents.MEDIA_MUTE_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaMuteButton.getSlotTemplateHTML = getSlotTemplateHTML$6;
MediaMuteButton.getTooltipContentHTML = getTooltipContentHTML$5;
if (!GlobalThis.customElements.get("media-mute-button")) GlobalThis.customElements.define("media-mute-button", MediaMuteButton);
var media_mute_button_default = MediaMuteButton;

//#endregion
//#region node_modules/media-chrome/dist/media-pip-button.js
var pipIcon = `<svg aria-hidden="true" viewBox="0 0 28 24">
  <path d="M24 3H4a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1Zm-1 16H5V5h18v14Zm-3-8h-7v5h7v-5Z"/>
</svg>`;
function getSlotTemplateHTML$5(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_IS_PIP}]) slot[name=icon] slot:not([name=exit]) {
        display: none !important;
      }

      :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) slot[name=icon] slot:not([name=enter]) {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_IS_PIP}]) slot[name=tooltip-enter],
      :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) slot[name=tooltip-exit] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="enter">${pipIcon}</slot>
      <slot name="exit">${pipIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$4() {
	return `
    <slot name="tooltip-enter">${t("Enter picture in picture mode")}</slot>
    <slot name="tooltip-exit">${t("Exit picture in picture mode")}</slot>
  `;
}
var updateAriaLabel$1 = (el) => {
	const label = el.mediaIsPip ? t("exit picture in picture mode") : t("enter picture in picture mode");
	el.setAttribute("aria-label", label);
};
var MediaPipButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_IS_PIP,
			MediaUIAttributes.MEDIA_PIP_UNAVAILABLE
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel$1(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_IS_PIP) updateAriaLabel$1(this);
	}
	/**
	* @type {string | undefined} Pip unavailability state
	*/
	get mediaPipUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_PIP_UNAVAILABLE);
	}
	set mediaPipUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_PIP_UNAVAILABLE, value);
	}
	/**
	* @type {boolean} Is the media currently playing picture-in-picture
	*/
	get mediaIsPip() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_PIP);
	}
	set mediaIsPip(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_PIP, value);
	}
	handleClick() {
		const eventName = this.mediaIsPip ? MediaUIEvents.MEDIA_EXIT_PIP_REQUEST : MediaUIEvents.MEDIA_ENTER_PIP_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaPipButton.getSlotTemplateHTML = getSlotTemplateHTML$5;
MediaPipButton.getTooltipContentHTML = getTooltipContentHTML$4;
if (!GlobalThis.customElements.get("media-pip-button")) GlobalThis.customElements.define("media-pip-button", MediaPipButton);
var media_pip_button_default = MediaPipButton;

//#endregion
//#region node_modules/media-chrome/dist/media-playback-rate-button.js
var __accessCheck$6 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$6 = (obj, member, getter) => {
	__accessCheck$6(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$6 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var _rates;
var Attributes$4 = { RATES: "rates" };
var DEFAULT_RATES = [
	1,
	1.2,
	1.5,
	1.7,
	2
];
var DEFAULT_RATE = 1;
function getSlotTemplateHTML$4(attrs) {
	return `
    <style>
      :host {
        min-width: 5ch;
        padding: var(--media-button-padding, var(--media-control-padding, 10px 5px));
      }
    </style>
    <slot name="icon">${attrs["mediaplaybackrate"] || DEFAULT_RATE}x</slot>
  `;
}
function getTooltipContentHTML$3() {
	return t("Playback rate");
}
var MediaPlaybackRateButton = class extends MediaChromeButton {
	constructor() {
		var _a$1;
		super();
		__privateAdd$6(this, _rates, new AttributeTokenList(this, Attributes$4.RATES, { defaultValue: DEFAULT_RATES }));
		this.container = this.shadowRoot.querySelector("slot[name=\"icon\"]");
		this.container.innerHTML = `${(_a$1 = this.mediaPlaybackRate) != null ? _a$1 : DEFAULT_RATE}x`;
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_PLAYBACK_RATE,
			Attributes$4.RATES
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === Attributes$4.RATES) __privateGet$6(this, _rates).value = newValue;
		if (attrName === MediaUIAttributes.MEDIA_PLAYBACK_RATE) {
			const newPlaybackRate = newValue ? +newValue : NaN;
			const playbackRate = !Number.isNaN(newPlaybackRate) ? newPlaybackRate : DEFAULT_RATE;
			this.container.innerHTML = `${playbackRate}x`;
			this.setAttribute("aria-label", t("Playback rate {playbackRate}", { playbackRate }));
		}
	}
	/**
	* Get the playback rates for the button.
	*/
	get rates() {
		return __privateGet$6(this, _rates);
	}
	/**
	* Set the playback rates for the button.
	* For React 19+ compatibility, accept a string of space-separated rates.
	*/
	set rates(value) {
		if (!value) __privateGet$6(this, _rates).value = "";
		else if (Array.isArray(value)) __privateGet$6(this, _rates).value = value.join(" ");
		else if (typeof value === "string") __privateGet$6(this, _rates).value = value;
	}
	/**
	* @type {number} The current playback rate
	*/
	get mediaPlaybackRate() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, DEFAULT_RATE);
	}
	set mediaPlaybackRate(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
	}
	handleClick() {
		var _a$1, _b;
		const availableRates = Array.from(__privateGet$6(this, _rates).values(), (str) => +str).sort((a, b) => a - b);
		const detail = (_b = (_a$1 = availableRates.find((r) => r > this.mediaPlaybackRate)) != null ? _a$1 : availableRates[0]) != null ? _b : DEFAULT_RATE;
		const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST, {
			composed: true,
			bubbles: true,
			detail
		});
		this.dispatchEvent(evt);
	}
};
_rates = /* @__PURE__ */ new WeakMap();
MediaPlaybackRateButton.getSlotTemplateHTML = getSlotTemplateHTML$4;
MediaPlaybackRateButton.getTooltipContentHTML = getTooltipContentHTML$3;
if (!GlobalThis.customElements.get("media-playback-rate-button")) GlobalThis.customElements.define("media-playback-rate-button", MediaPlaybackRateButton);
var media_playback_rate_button_default = MediaPlaybackRateButton;

//#endregion
//#region node_modules/media-chrome/dist/media-play-button.js
var playIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="m6 21 15-9L6 3v18Z"/>
</svg>`;
var pauseIcon = `<svg aria-hidden="true" viewBox="0 0 24 24">
  <path d="M6 20h4V4H6v16Zm8-16v16h4V4h-4Z"/>
</svg>`;
function getSlotTemplateHTML$3(_attrs) {
	return `
    <style>
      :host([${MediaUIAttributes.MEDIA_PAUSED}]) slot[name=pause],
      :host(:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=play] {
        display: none !important;
      }

      :host([${MediaUIAttributes.MEDIA_PAUSED}]) slot[name=tooltip-pause],
      :host(:not([${MediaUIAttributes.MEDIA_PAUSED}])) slot[name=tooltip-play] {
        display: none;
      }
    </style>

    <slot name="icon">
      <slot name="play">${playIcon}</slot>
      <slot name="pause">${pauseIcon}</slot>
    </slot>
  `;
}
function getTooltipContentHTML$2() {
	return `
    <slot name="tooltip-play">${t("Play")}</slot>
    <slot name="tooltip-pause">${t("Pause")}</slot>
  `;
}
var updateAriaLabel = (el) => {
	const label = el.mediaPaused ? t("play") : t("pause");
	el.setAttribute("aria-label", label);
};
var MediaPlayButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_PAUSED,
			MediaUIAttributes.MEDIA_ENDED
		];
	}
	connectedCallback() {
		super.connectedCallback();
		updateAriaLabel(this);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_PAUSED || attrName === MediaUIAttributes.MEDIA_LANG) updateAriaLabel(this);
	}
	/**
	* Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	handleClick() {
		const eventName = this.mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;
		this.dispatchEvent(new GlobalThis.CustomEvent(eventName, {
			composed: true,
			bubbles: true
		}));
	}
};
MediaPlayButton.getSlotTemplateHTML = getSlotTemplateHTML$3;
MediaPlayButton.getTooltipContentHTML = getTooltipContentHTML$2;
if (!GlobalThis.customElements.get("media-play-button")) GlobalThis.customElements.define("media-play-button", MediaPlayButton);
var media_play_button_default = MediaPlayButton;

//#endregion
//#region node_modules/media-chrome/dist/media-poster-image.js
var Attributes$3 = {
	PLACEHOLDER_SRC: "placeholdersrc",
	SRC: "src"
};
function getTemplateHTML$2(_attrs) {
	return `
    <style>
      :host {
        pointer-events: none;
        display: var(--media-poster-image-display, inline-block);
        box-sizing: border-box;
      }

      img {
        max-width: 100%;
        max-height: 100%;
        min-width: 100%;
        min-height: 100%;
        background-repeat: no-repeat;
        background-position: var(--media-poster-image-background-position, var(--media-object-position, center));
        background-size: var(--media-poster-image-background-size, var(--media-object-fit, contain));
        object-fit: var(--media-object-fit, contain);
        object-position: var(--media-object-position, center);
      }
    </style>

    <img part="poster img" aria-hidden="true" id="image"/>
  `;
}
var unsetBackgroundImage = (el) => {
	el.style.removeProperty("background-image");
};
var setBackgroundImage = (el, image) => {
	el.style["background-image"] = `url('${image}')`;
};
var MediaPosterImage = class extends GlobalThis.HTMLElement {
	static get observedAttributes() {
		return [Attributes$3.PLACEHOLDER_SRC, Attributes$3.SRC];
	}
	constructor() {
		super();
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
		this.image = this.shadowRoot.querySelector("#image");
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		if (attrName === Attributes$3.SRC) if (newValue == null) this.image.removeAttribute(Attributes$3.SRC);
		else this.image.setAttribute(Attributes$3.SRC, newValue);
		if (attrName === Attributes$3.PLACEHOLDER_SRC) if (newValue == null) unsetBackgroundImage(this.image);
		else setBackgroundImage(this.image, newValue);
	}
	/**
	*
	*/
	get placeholderSrc() {
		return getStringAttr(this, Attributes$3.PLACEHOLDER_SRC);
	}
	set placeholderSrc(value) {
		setStringAttr(this, Attributes$3.SRC, value);
	}
	/**
	*
	*/
	get src() {
		return getStringAttr(this, Attributes$3.SRC);
	}
	set src(value) {
		setStringAttr(this, Attributes$3.SRC, value);
	}
};
MediaPosterImage.shadowRootOptions = { mode: "open" };
MediaPosterImage.getTemplateHTML = getTemplateHTML$2;
if (!GlobalThis.customElements.get("media-poster-image")) GlobalThis.customElements.define("media-poster-image", MediaPosterImage);
var media_poster_image_default = MediaPosterImage;

//#endregion
//#region node_modules/media-chrome/dist/media-preview-chapter-display.js
var __accessCheck$5 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$5 = (obj, member, getter) => {
	__accessCheck$5(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$5 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$5 = (obj, member, value, setter) => {
	__accessCheck$5(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _slot$2;
var MediaPreviewChapterDisplay = class extends MediaTextDisplay {
	constructor() {
		super();
		__privateAdd$5(this, _slot$2, void 0);
		__privateSet$5(this, _slot$2, this.shadowRoot.querySelector("slot"));
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_PREVIEW_CHAPTER,
			MediaUIAttributes.MEDIA_LANG
		];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_PREVIEW_CHAPTER || attrName === MediaUIAttributes.MEDIA_LANG) {
			if (newValue !== oldValue && newValue != null) {
				__privateGet$5(this, _slot$2).textContent = newValue;
				if (newValue !== "") {
					const ariaValueText = t("chapter: {chapterName}", { chapterName: newValue });
					this.setAttribute("aria-valuetext", ariaValueText);
				} else this.removeAttribute("aria-valuetext");
			}
		}
	}
	/**
	* @type {string | undefined} Timeline preview chapter
	*/
	get mediaPreviewChapter() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_CHAPTER);
	}
	set mediaPreviewChapter(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_CHAPTER, value);
	}
};
_slot$2 = /* @__PURE__ */ new WeakMap();
if (!GlobalThis.customElements.get("media-preview-chapter-display")) GlobalThis.customElements.define("media-preview-chapter-display", MediaPreviewChapterDisplay);
var media_preview_chapter_display_default = MediaPreviewChapterDisplay;

//#endregion
//#region node_modules/media-chrome/dist/media-preview-thumbnail.js
var __accessCheck$4 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$4 = (obj, member, getter) => {
	__accessCheck$4(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$4 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$4 = (obj, member, value, setter) => {
	__accessCheck$4(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _mediaController;
function getTemplateHTML$1(_attrs) {
	return `
    <style>
      :host {
        box-sizing: border-box;
        display: var(--media-control-display, var(--media-preview-thumbnail-display, inline-block));
        overflow: hidden;
      }

      img {
        display: none;
        position: relative;
      }
    </style>
    <img crossorigin loading="eager" decoding="async">
  `;
}
var MediaPreviewThumbnail = class extends GlobalThis.HTMLElement {
	constructor() {
		super();
		__privateAdd$4(this, _mediaController, void 0);
		if (!this.shadowRoot) {
			this.attachShadow(this.constructor.shadowRootOptions);
			const attrs = namedNodeMapToObject(this.attributes);
			this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);
		}
	}
	static get observedAttributes() {
		return [
			MediaStateReceiverAttributes.MEDIA_CONTROLLER,
			MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
			MediaUIAttributes.MEDIA_PREVIEW_COORDS
		];
	}
	connectedCallback() {
		var _a$1, _b, _c;
		const mediaControllerId = this.getAttribute(MediaStateReceiverAttributes.MEDIA_CONTROLLER);
		if (mediaControllerId) {
			__privateSet$4(this, _mediaController, (_a$1 = this.getRootNode()) == null ? void 0 : _a$1.getElementById(mediaControllerId));
			(_c = (_b = __privateGet$4(this, _mediaController)) == null ? void 0 : _b.associateElement) == null || _c.call(_b, this);
		}
	}
	disconnectedCallback() {
		var _a$1, _b;
		(_b = (_a$1 = __privateGet$4(this, _mediaController)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
		__privateSet$4(this, _mediaController, null);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		var _a$1, _b, _c, _d, _e;
		if ([MediaUIAttributes.MEDIA_PREVIEW_IMAGE, MediaUIAttributes.MEDIA_PREVIEW_COORDS].includes(attrName)) this.update();
		if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {
			if (oldValue) {
				(_b = (_a$1 = __privateGet$4(this, _mediaController)) == null ? void 0 : _a$1.unassociateElement) == null || _b.call(_a$1, this);
				__privateSet$4(this, _mediaController, null);
			}
			if (newValue && this.isConnected) {
				__privateSet$4(this, _mediaController, (_c = this.getRootNode()) == null ? void 0 : _c.getElementById(newValue));
				(_e = (_d = __privateGet$4(this, _mediaController)) == null ? void 0 : _d.associateElement) == null || _e.call(_d, this);
			}
		}
	}
	/**
	* @type {string | undefined} The url of the preview image
	*/
	get mediaPreviewImage() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE);
	}
	set mediaPreviewImage(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE, value);
	}
	/**
	* @type {Array<number> | undefined} Fixed length array [x, y, width, height] or undefined
	*/
	get mediaPreviewCoords() {
		const attrVal = this.getAttribute(MediaUIAttributes.MEDIA_PREVIEW_COORDS);
		if (!attrVal) return void 0;
		return attrVal.split(/\s+/).map((coord) => +coord);
	}
	set mediaPreviewCoords(value) {
		if (!value) {
			this.removeAttribute(MediaUIAttributes.MEDIA_PREVIEW_COORDS);
			return;
		}
		this.setAttribute(MediaUIAttributes.MEDIA_PREVIEW_COORDS, value.join(" "));
	}
	update() {
		const coords = this.mediaPreviewCoords;
		const previewImage = this.mediaPreviewImage;
		if (!(coords && previewImage)) return;
		const [x, y, w, h] = coords;
		const src = previewImage.split("#")[0];
		const { maxWidth, maxHeight, minWidth, minHeight } = getComputedStyle(this);
		const maxRatio = Math.min(parseInt(maxWidth) / w, parseInt(maxHeight) / h);
		const minRatio = Math.max(parseInt(minWidth) / w, parseInt(minHeight) / h);
		const isScalingDown = maxRatio < 1;
		const scale = isScalingDown ? maxRatio : minRatio > 1 ? minRatio : 1;
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host");
		const imgStyle = getOrInsertCSSRule(this.shadowRoot, "img").style;
		const img = this.shadowRoot.querySelector("img");
		const extremum = isScalingDown ? "min" : "max";
		style.setProperty(`${extremum}-width`, "initial", "important");
		style.setProperty(`${extremum}-height`, "initial", "important");
		style.width = `${w * scale}px`;
		style.height = `${h * scale}px`;
		const resize = () => {
			imgStyle.width = `${this.imgWidth * scale}px`;
			imgStyle.height = `${this.imgHeight * scale}px`;
			imgStyle.display = "block";
		};
		if (img.src !== src) {
			img.onload = () => {
				this.imgWidth = img.naturalWidth;
				this.imgHeight = img.naturalHeight;
				resize();
			};
			img.src = src;
			resize();
		}
		resize();
		imgStyle.transform = `translate(-${x * scale}px, -${y * scale}px)`;
	}
};
_mediaController = /* @__PURE__ */ new WeakMap();
MediaPreviewThumbnail.shadowRootOptions = { mode: "open" };
MediaPreviewThumbnail.getTemplateHTML = getTemplateHTML$1;
if (!GlobalThis.customElements.get("media-preview-thumbnail")) GlobalThis.customElements.define("media-preview-thumbnail", MediaPreviewThumbnail);
var media_preview_thumbnail_default = MediaPreviewThumbnail;

//#endregion
//#region node_modules/media-chrome/dist/media-preview-time-display.js
var __accessCheck$3 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$3 = (obj, member, getter) => {
	__accessCheck$3(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$3 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$3 = (obj, member, value, setter) => {
	__accessCheck$3(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _slot$1;
var MediaPreviewTimeDisplay = class extends MediaTextDisplay {
	constructor() {
		super();
		__privateAdd$3(this, _slot$1, void 0);
		__privateSet$3(this, _slot$1, this.shadowRoot.querySelector("slot"));
		__privateGet$3(this, _slot$1).textContent = formatTime(0);
	}
	static get observedAttributes() {
		return [...super.observedAttributes, MediaUIAttributes.MEDIA_PREVIEW_TIME];
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_PREVIEW_TIME && newValue != null) __privateGet$3(this, _slot$1).textContent = formatTime(parseFloat(newValue));
	}
	/**
	* Timeline preview time
	*/
	get mediaPreviewTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME);
	}
	set mediaPreviewTime(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME, value);
	}
};
_slot$1 = /* @__PURE__ */ new WeakMap();
if (!GlobalThis.customElements.get("media-preview-time-display")) GlobalThis.customElements.define("media-preview-time-display", MediaPreviewTimeDisplay);
var media_preview_time_display_default = MediaPreviewTimeDisplay;

//#endregion
//#region node_modules/media-chrome/dist/media-seek-backward-button.js
var Attributes$2 = { SEEK_OFFSET: "seekoffset" };
var DEFAULT_SEEK_OFFSET$1 = 30;
var backwardIcon = (seekOffset) => `
  <svg aria-hidden="true" viewBox="0 0 20 24">
    <defs>
      <style>.text{font-size:8px;font-family:Arial-BoldMT, Arial;font-weight:700;}</style>
    </defs>
    <text class="text value" transform="translate(2.18 19.87)">${seekOffset}</text>
    <path d="M10 6V3L4.37 7 10 10.94V8a5.54 5.54 0 0 1 1.9 10.48v2.12A7.5 7.5 0 0 0 10 6Z"/>
  </svg>`;
function getSlotTemplateHTML$2(_attrs, props) {
	return `
    <slot name="icon">${backwardIcon(props.seekOffset)}</slot>
  `;
}
function getTooltipContentHTML$1() {
	return t("Seek backward");
}
var DEFAULT_TIME$1 = 0;
var MediaSeekBackwardButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_CURRENT_TIME,
			Attributes$2.SEEK_OFFSET
		];
	}
	connectedCallback() {
		super.connectedCallback();
		this.seekOffset = getNumericAttr(this, Attributes$2.SEEK_OFFSET, DEFAULT_SEEK_OFFSET$1);
	}
	attributeChangedCallback(attrName, _oldValue, newValue) {
		super.attributeChangedCallback(attrName, _oldValue, newValue);
		if (attrName === Attributes$2.SEEK_OFFSET) this.seekOffset = getNumericAttr(this, Attributes$2.SEEK_OFFSET, DEFAULT_SEEK_OFFSET$1);
	}
	/**
	* Seek amount in seconds
	*/
	get seekOffset() {
		return getNumericAttr(this, Attributes$2.SEEK_OFFSET, DEFAULT_SEEK_OFFSET$1);
	}
	set seekOffset(value) {
		setNumericAttr(this, Attributes$2.SEEK_OFFSET, value);
		this.setAttribute("aria-label", t("seek back {seekOffset} seconds", { seekOffset: this.seekOffset }));
		updateIconText(getSlotted(this, "icon"), this.seekOffset);
	}
	/**
	* The current time in seconds
	*/
	get mediaCurrentTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, DEFAULT_TIME$1);
	}
	set mediaCurrentTime(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, time);
	}
	handleClick() {
		const detail = Math.max(this.mediaCurrentTime - this.seekOffset, 0);
		const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
			composed: true,
			bubbles: true,
			detail
		});
		this.dispatchEvent(evt);
	}
};
MediaSeekBackwardButton.getSlotTemplateHTML = getSlotTemplateHTML$2;
MediaSeekBackwardButton.getTooltipContentHTML = getTooltipContentHTML$1;
if (!GlobalThis.customElements.get("media-seek-backward-button")) GlobalThis.customElements.define("media-seek-backward-button", MediaSeekBackwardButton);
var media_seek_backward_button_default = MediaSeekBackwardButton;

//#endregion
//#region node_modules/media-chrome/dist/media-seek-forward-button.js
var Attributes$1 = { SEEK_OFFSET: "seekoffset" };
var DEFAULT_SEEK_OFFSET = 30;
var forwardIcon = (seekOffset) => `
  <svg aria-hidden="true" viewBox="0 0 20 24">
    <defs>
      <style>.text{font-size:8px;font-family:Arial-BoldMT, Arial;font-weight:700;}</style>
    </defs>
    <text class="text value" transform="translate(8.9 19.87)">${seekOffset}</text>
    <path d="M10 6V3l5.61 4L10 10.94V8a5.54 5.54 0 0 0-1.9 10.48v2.12A7.5 7.5 0 0 1 10 6Z"/>
  </svg>`;
function getSlotTemplateHTML$1(_attrs, props) {
	return `
    <slot name="icon">${forwardIcon(props.seekOffset)}</slot>
  `;
}
function getTooltipContentHTML() {
	return t("Seek forward");
}
var DEFAULT_TIME = 0;
var MediaSeekForwardButton = class extends MediaChromeButton {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_CURRENT_TIME,
			Attributes$1.SEEK_OFFSET
		];
	}
	connectedCallback() {
		super.connectedCallback();
		this.seekOffset = getNumericAttr(this, Attributes$1.SEEK_OFFSET, DEFAULT_SEEK_OFFSET);
	}
	attributeChangedCallback(attrName, _oldValue, newValue) {
		super.attributeChangedCallback(attrName, _oldValue, newValue);
		if (attrName === Attributes$1.SEEK_OFFSET) this.seekOffset = getNumericAttr(this, Attributes$1.SEEK_OFFSET, DEFAULT_SEEK_OFFSET);
	}
	/**
	* Seek amount in seconds
	*/
	get seekOffset() {
		return getNumericAttr(this, Attributes$1.SEEK_OFFSET, DEFAULT_SEEK_OFFSET);
	}
	set seekOffset(value) {
		setNumericAttr(this, Attributes$1.SEEK_OFFSET, value);
		this.setAttribute("aria-label", t("seek forward {seekOffset} seconds", { seekOffset: this.seekOffset }));
		updateIconText(getSlotted(this, "icon"), this.seekOffset);
	}
	/**
	* The current time in seconds
	*/
	get mediaCurrentTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, DEFAULT_TIME);
	}
	set mediaCurrentTime(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, time);
	}
	handleClick() {
		const detail = this.mediaCurrentTime + this.seekOffset;
		const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
			composed: true,
			bubbles: true,
			detail
		});
		this.dispatchEvent(evt);
	}
};
MediaSeekForwardButton.getSlotTemplateHTML = getSlotTemplateHTML$1;
MediaSeekForwardButton.getTooltipContentHTML = getTooltipContentHTML;
if (!GlobalThis.customElements.get("media-seek-forward-button")) GlobalThis.customElements.define("media-seek-forward-button", MediaSeekForwardButton);
var media_seek_forward_button_default = MediaSeekForwardButton;

//#endregion
//#region node_modules/media-chrome/dist/media-time-display.js
var __accessCheck$2 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$2 = (obj, member, getter) => {
	__accessCheck$2(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$2 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$2 = (obj, member, value, setter) => {
	__accessCheck$2(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var _slot;
var Attributes = {
	REMAINING: "remaining",
	SHOW_DURATION: "showduration",
	NO_TOGGLE: "notoggle"
};
var CombinedAttributes = [
	...Object.values(Attributes),
	MediaUIAttributes.MEDIA_CURRENT_TIME,
	MediaUIAttributes.MEDIA_DURATION,
	MediaUIAttributes.MEDIA_SEEKABLE
];
var ButtonPressedKeys = ["Enter", " "];
var DEFAULT_TIMES_SEP = "&nbsp;/&nbsp;";
var formatTimesLabel = (el, { timesSep = DEFAULT_TIMES_SEP } = {}) => {
	var _a$1, _b;
	const currentTime = (_a$1 = el.mediaCurrentTime) != null ? _a$1 : 0;
	const [, seekableEnd] = (_b = el.mediaSeekable) != null ? _b : [];
	let endTime = 0;
	if (Number.isFinite(el.mediaDuration)) endTime = el.mediaDuration;
	else if (Number.isFinite(seekableEnd)) endTime = seekableEnd;
	const timeLabel = el.remaining ? formatTime(0 - (endTime - currentTime)) : formatTime(currentTime);
	if (!el.showDuration) return timeLabel;
	return `${timeLabel}${timesSep}${formatTime(endTime)}`;
};
var DEFAULT_MISSING_TIME_PHRASE$1 = "video not loaded, unknown time.";
var updateAriaValueText$1 = (el) => {
	var _a$1;
	const currentTime = el.mediaCurrentTime;
	const [, seekableEnd] = (_a$1 = el.mediaSeekable) != null ? _a$1 : [];
	let endTime = null;
	if (Number.isFinite(el.mediaDuration)) endTime = el.mediaDuration;
	else if (Number.isFinite(seekableEnd)) endTime = seekableEnd;
	if (currentTime == null || endTime === null) {
		el.setAttribute("aria-valuetext", DEFAULT_MISSING_TIME_PHRASE$1);
		return;
	}
	const currentTimePhrase = el.remaining ? formatAsTimePhrase(0 - (endTime - currentTime)) : formatAsTimePhrase(currentTime);
	if (!el.showDuration) {
		el.setAttribute("aria-valuetext", currentTimePhrase);
		return;
	}
	const totalTimePhrase = formatAsTimePhrase(endTime);
	const fullPhrase = `${currentTimePhrase} of ${totalTimePhrase}`;
	el.setAttribute("aria-valuetext", fullPhrase);
};
function getSlotTemplateHTML(_attrs, props) {
	return `
    <slot>${formatTimesLabel(props)}</slot>
  `;
}
var MediaTimeDisplay = class extends MediaTextDisplay {
	constructor() {
		super();
		__privateAdd$2(this, _slot, void 0);
		__privateSet$2(this, _slot, this.shadowRoot.querySelector("slot"));
		__privateGet$2(this, _slot).innerHTML = `${formatTimesLabel(this)}`;
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			...CombinedAttributes,
			"disabled"
		];
	}
	connectedCallback() {
		const { style } = getOrInsertCSSRule(this.shadowRoot, ":host(:hover:not([notoggle]))");
		style.setProperty("cursor", "var(--media-cursor, pointer)");
		style.setProperty("background", "var(--media-control-hover-background, rgba(50 50 70 / .7))");
		if (!this.hasAttribute("disabled")) this.enable();
		this.setAttribute("role", "progressbar");
		this.setAttribute("aria-label", t("playback time"));
		const keyUpHandler = (evt) => {
			const { key } = evt;
			if (!ButtonPressedKeys.includes(key)) {
				this.removeEventListener("keyup", keyUpHandler);
				return;
			}
			this.toggleTimeDisplay();
		};
		this.addEventListener("keydown", (evt) => {
			const { metaKey, altKey, key } = evt;
			if (metaKey || altKey || !ButtonPressedKeys.includes(key)) {
				this.removeEventListener("keyup", keyUpHandler);
				return;
			}
			this.addEventListener("keyup", keyUpHandler);
		});
		this.addEventListener("click", this.toggleTimeDisplay);
		super.connectedCallback();
	}
	toggleTimeDisplay() {
		if (this.noToggle) return;
		if (this.hasAttribute("remaining")) this.removeAttribute("remaining");
		else this.setAttribute("remaining", "");
	}
	disconnectedCallback() {
		this.disable();
		super.disconnectedCallback();
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		if (CombinedAttributes.includes(attrName)) this.update();
		else if (attrName === "disabled" && newValue !== oldValue) if (newValue == null) this.enable();
		else this.disable();
		super.attributeChangedCallback(attrName, oldValue, newValue);
	}
	enable() {
		this.tabIndex = 0;
	}
	disable() {
		this.tabIndex = -1;
	}
	/**
	* Whether to show the remaining time
	*/
	get remaining() {
		return getBooleanAttr(this, Attributes.REMAINING);
	}
	set remaining(show) {
		setBooleanAttr(this, Attributes.REMAINING, show);
	}
	/**
	* Whether to show the duration
	*/
	get showDuration() {
		return getBooleanAttr(this, Attributes.SHOW_DURATION);
	}
	set showDuration(show) {
		setBooleanAttr(this, Attributes.SHOW_DURATION, show);
	}
	/**
	* Disable the default behavior that toggles between current and remaining time
	*/
	get noToggle() {
		return getBooleanAttr(this, Attributes.NO_TOGGLE);
	}
	set noToggle(noToggle) {
		setBooleanAttr(this, Attributes.NO_TOGGLE, noToggle);
	}
	/**
	* Get the duration
	*/
	get mediaDuration() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_DURATION);
	}
	set mediaDuration(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_DURATION, time);
	}
	/**
	* The current time in seconds
	*/
	get mediaCurrentTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME);
	}
	set mediaCurrentTime(time) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, time);
	}
	/**
	* Range of values that can be seeked to.
	* An array of two numbers [start, end]
	*/
	get mediaSeekable() {
		const seekable = this.getAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
		if (!seekable) return void 0;
		return seekable.split(":").map((time) => +time);
	}
	set mediaSeekable(range) {
		if (range == null) {
			this.removeAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
			return;
		}
		this.setAttribute(MediaUIAttributes.MEDIA_SEEKABLE, range.join(":"));
	}
	update() {
		const timesLabel = formatTimesLabel(this);
		updateAriaValueText$1(this);
		if (timesLabel !== __privateGet$2(this, _slot).innerHTML) __privateGet$2(this, _slot).innerHTML = timesLabel;
	}
};
_slot = /* @__PURE__ */ new WeakMap();
MediaTimeDisplay.getSlotTemplateHTML = getSlotTemplateHTML;
if (!GlobalThis.customElements.get("media-time-display")) GlobalThis.customElements.define("media-time-display", MediaTimeDisplay);
var media_time_display_default = MediaTimeDisplay;

//#endregion
//#region node_modules/media-chrome/dist/utils/range-animation.js
var __accessCheck$1 = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet$1 = (obj, member, getter) => {
	__accessCheck$1(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$1 = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$1 = (obj, member, value, setter) => {
	__accessCheck$1(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
	set _(value) {
		__privateSet$1(obj, member, value, setter);
	},
	get _() {
		return __privateGet$1(obj, member, getter);
	}
});
var _range, _startTime, _previousTime, _deltaTime, _frameCount, _updateTimestamp, _updateStartValue, _lastRangeIncrease, _id, _animate;
var RangeAnimation = class {
	constructor(range, callback, fps) {
		__privateAdd$1(this, _range, void 0);
		__privateAdd$1(this, _startTime, void 0);
		__privateAdd$1(this, _previousTime, void 0);
		__privateAdd$1(this, _deltaTime, void 0);
		__privateAdd$1(this, _frameCount, void 0);
		__privateAdd$1(this, _updateTimestamp, void 0);
		__privateAdd$1(this, _updateStartValue, void 0);
		__privateAdd$1(this, _lastRangeIncrease, void 0);
		__privateAdd$1(this, _id, 0);
		__privateAdd$1(this, _animate, (now = performance.now()) => {
			__privateSet$1(this, _id, requestAnimationFrame(__privateGet$1(this, _animate)));
			__privateSet$1(this, _deltaTime, performance.now() - __privateGet$1(this, _previousTime));
			const fpsInterval = 1e3 / this.fps;
			if (__privateGet$1(this, _deltaTime) > fpsInterval) {
				__privateSet$1(this, _previousTime, now - __privateGet$1(this, _deltaTime) % fpsInterval);
				const fps$1 = 1e3 / ((now - __privateGet$1(this, _startTime)) / ++__privateWrapper(this, _frameCount)._);
				const delta = (now - __privateGet$1(this, _updateTimestamp)) / 1e3 / this.duration;
				let value = __privateGet$1(this, _updateStartValue) + delta * this.playbackRate;
				if (value - __privateGet$1(this, _range).valueAsNumber > 0) __privateSet$1(this, _lastRangeIncrease, this.playbackRate / this.duration / fps$1);
				else {
					__privateSet$1(this, _lastRangeIncrease, .995 * __privateGet$1(this, _lastRangeIncrease));
					value = __privateGet$1(this, _range).valueAsNumber + __privateGet$1(this, _lastRangeIncrease);
				}
				this.callback(value);
			}
		});
		__privateSet$1(this, _range, range);
		this.callback = callback;
		this.fps = fps;
	}
	start() {
		if (__privateGet$1(this, _id) !== 0) return;
		__privateSet$1(this, _previousTime, performance.now());
		__privateSet$1(this, _startTime, __privateGet$1(this, _previousTime));
		__privateSet$1(this, _frameCount, 0);
		__privateGet$1(this, _animate).call(this);
	}
	stop() {
		if (__privateGet$1(this, _id) === 0) return;
		cancelAnimationFrame(__privateGet$1(this, _id));
		__privateSet$1(this, _id, 0);
	}
	update({ start, duration, playbackRate }) {
		const increase = start - __privateGet$1(this, _range).valueAsNumber;
		const durationDelta = Math.abs(duration - this.duration);
		if (increase > 0 || increase < -.03 || durationDelta >= .5) this.callback(start);
		__privateSet$1(this, _updateStartValue, start);
		__privateSet$1(this, _updateTimestamp, performance.now());
		this.duration = duration;
		this.playbackRate = playbackRate;
	}
};
_range = /* @__PURE__ */ new WeakMap();
_startTime = /* @__PURE__ */ new WeakMap();
_previousTime = /* @__PURE__ */ new WeakMap();
_deltaTime = /* @__PURE__ */ new WeakMap();
_frameCount = /* @__PURE__ */ new WeakMap();
_updateTimestamp = /* @__PURE__ */ new WeakMap();
_updateStartValue = /* @__PURE__ */ new WeakMap();
_lastRangeIncrease = /* @__PURE__ */ new WeakMap();
_id = /* @__PURE__ */ new WeakMap();
_animate = /* @__PURE__ */ new WeakMap();

//#endregion
//#region node_modules/media-chrome/dist/media-time-range.js
var __accessCheck = (obj, member, msg) => {
	if (!member.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
	__accessCheck(obj, member, "read from private field");
	return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
	if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
	member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
	__accessCheck(obj, member, "write to private field");
	setter ? setter.call(obj, value) : member.set(obj, value);
	return value;
};
var __privateMethod = (obj, member, method) => {
	__accessCheck(obj, member, "access private method");
	return method;
};
var _rootNode, _animation, _boxes, _previewTime, _previewBox, _currentBox, _boxPaddingLeft, _boxPaddingRight, _mediaChaptersCues, _isPointerDown, _toggleRangeAnimation, toggleRangeAnimation_fn, _shouldRangeAnimate, shouldRangeAnimate_fn, _updateRange, _getElementRects, getElementRects_fn, _getBoxPosition, getBoxPosition_fn, _getBoxShiftPosition, getBoxShiftPosition_fn, _handlePointerMove, handlePointerMove_fn, _previewRequest, previewRequest_fn, _seekRequest, seekRequest_fn;
var DEFAULT_MISSING_TIME_PHRASE = "video not loaded, unknown time.";
var updateAriaValueText = (el) => {
	const range = el.range;
	const currentTimePhrase = formatAsTimePhrase(+calcTimeFromRangeValue(el));
	const totalTimePhrase = formatAsTimePhrase(+el.mediaSeekableEnd);
	const fullPhrase = !(currentTimePhrase && totalTimePhrase) ? DEFAULT_MISSING_TIME_PHRASE : `${currentTimePhrase} of ${totalTimePhrase}`;
	range.setAttribute("aria-valuetext", fullPhrase);
};
function getTemplateHTML(_attrs) {
	return `
    ${MediaChromeRange.getTemplateHTML(_attrs)}
    <style>
      :host {
        --media-box-border-radius: 4px;
        --media-box-padding-left: 10px;
        --media-box-padding-right: 10px;
        --media-preview-border-radius: var(--media-box-border-radius);
        --media-box-arrow-offset: var(--media-box-border-radius);
        --_control-background: var(--media-control-background, var(--media-secondary-color, rgb(20 20 30 / .7)));
        --_preview-background: var(--media-preview-background, var(--_control-background));

        
        contain: layout;
      }

      #buffered {
        background: var(--media-time-range-buffered-color, rgb(255 255 255 / .4));
        position: absolute;
        height: 100%;
        will-change: width;
      }

      #preview-rail,
      #current-rail {
        width: 100%;
        position: absolute;
        left: 0;
        bottom: 100%;
        pointer-events: none;
        will-change: transform;
      }

      [part~="box"] {
        width: min-content;
        
        position: absolute;
        bottom: 100%;
        flex-direction: column;
        align-items: center;
        transform: translateX(-50%);
      }

      [part~="current-box"] {
        display: var(--media-current-box-display, var(--media-box-display, flex));
        margin: var(--media-current-box-margin, var(--media-box-margin, 0 0 5px));
        visibility: hidden;
      }

      [part~="preview-box"] {
        display: var(--media-preview-box-display, var(--media-box-display, flex));
        margin: var(--media-preview-box-margin, var(--media-box-margin, 0 0 5px));
        transition-property: var(--media-preview-transition-property, visibility, opacity);
        transition-duration: var(--media-preview-transition-duration-out, .25s);
        transition-delay: var(--media-preview-transition-delay-out, 0s);
        visibility: hidden;
        opacity: 0;
      }

      :host(:is([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}], [${MediaUIAttributes.MEDIA_PREVIEW_TIME}])[dragging]) [part~="preview-box"] {
        transition-duration: var(--media-preview-transition-duration-in, .5s);
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        visibility: visible;
        opacity: 1;
      }

      @media (hover: hover) {
        :host(:is([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}], [${MediaUIAttributes.MEDIA_PREVIEW_TIME}]):hover) [part~="preview-box"] {
          transition-duration: var(--media-preview-transition-duration-in, .5s);
          transition-delay: var(--media-preview-transition-delay-in, .25s);
          visibility: visible;
          opacity: 1;
        }
      }

      media-preview-thumbnail,
      ::slotted(media-preview-thumbnail) {
        visibility: hidden;
        
        transition: visibility 0s .25s;
        transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
        background: var(--media-preview-thumbnail-background, var(--_preview-background));
        box-shadow: var(--media-preview-thumbnail-box-shadow, 0 0 4px rgb(0 0 0 / .2));
        max-width: var(--media-preview-thumbnail-max-width, 180px);
        max-height: var(--media-preview-thumbnail-max-height, 160px);
        min-width: var(--media-preview-thumbnail-min-width, 120px);
        min-height: var(--media-preview-thumbnail-min-height, 80px);
        border: var(--media-preview-thumbnail-border);
        border-radius: var(--media-preview-thumbnail-border-radius,
          var(--media-preview-border-radius) var(--media-preview-border-radius) 0 0);
      }

      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}][dragging]) media-preview-thumbnail,
      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}][dragging]) ::slotted(media-preview-thumbnail) {
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        visibility: visible;
      }

      @media (hover: hover) {
        :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]:hover) media-preview-thumbnail,
        :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]:hover) ::slotted(media-preview-thumbnail) {
          transition-delay: var(--media-preview-transition-delay-in, .25s);
          visibility: visible;
        }

        :host([${MediaUIAttributes.MEDIA_PREVIEW_TIME}]:hover) {
          --media-time-range-hover-display: block;
        }
      }

      media-preview-chapter-display,
      ::slotted(media-preview-chapter-display) {
        font-size: var(--media-font-size, 13px);
        line-height: 17px;
        min-width: 0;
        visibility: hidden;
        
        transition: min-width 0s, border-radius 0s, margin 0s, padding 0s, visibility 0s;
        transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
        background: var(--media-preview-chapter-background, var(--_preview-background));
        border-radius: var(--media-preview-chapter-border-radius,
          var(--media-preview-border-radius) var(--media-preview-border-radius)
          var(--media-preview-border-radius) var(--media-preview-border-radius));
        padding: var(--media-preview-chapter-padding, 3.5px 9px);
        margin: var(--media-preview-chapter-margin, 0 0 5px);
        text-shadow: var(--media-preview-chapter-text-shadow, 0 0 4px rgb(0 0 0 / .75));
      }

      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) media-preview-chapter-display,
      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) ::slotted(media-preview-chapter-display) {
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        border-radius: var(--media-preview-chapter-border-radius, 0);
        padding: var(--media-preview-chapter-padding, 3.5px 9px 0);
        margin: var(--media-preview-chapter-margin, 0);
        min-width: 100%;
      }

      media-preview-chapter-display[${MediaUIAttributes.MEDIA_PREVIEW_CHAPTER}],
      ::slotted(media-preview-chapter-display[${MediaUIAttributes.MEDIA_PREVIEW_CHAPTER}]) {
        visibility: visible;
      }

      media-preview-chapter-display:not([aria-valuetext]),
      ::slotted(media-preview-chapter-display:not([aria-valuetext])) {
        display: none;
      }

      media-preview-time-display,
      ::slotted(media-preview-time-display),
      media-time-display,
      ::slotted(media-time-display) {
        font-size: var(--media-font-size, 13px);
        line-height: 17px;
        min-width: 0;
        
        transition: min-width 0s, border-radius 0s;
        transition-delay: calc(var(--media-preview-transition-delay-out, 0s) + var(--media-preview-transition-duration-out, .25s));
        background: var(--media-preview-time-background, var(--_preview-background));
        border-radius: var(--media-preview-time-border-radius,
          var(--media-preview-border-radius) var(--media-preview-border-radius)
          var(--media-preview-border-radius) var(--media-preview-border-radius));
        padding: var(--media-preview-time-padding, 3.5px 9px);
        margin: var(--media-preview-time-margin, 0);
        text-shadow: var(--media-preview-time-text-shadow, 0 0 4px rgb(0 0 0 / .75));
        transform: translateX(min(
          max(calc(50% - var(--_box-width) / 2),
          calc(var(--_box-shift, 0))),
          calc(var(--_box-width) / 2 - 50%)
        ));
      }

      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) media-preview-time-display,
      :host([${MediaUIAttributes.MEDIA_PREVIEW_IMAGE}]) ::slotted(media-preview-time-display) {
        transition-delay: var(--media-preview-transition-delay-in, .25s);
        border-radius: var(--media-preview-time-border-radius,
          0 0 var(--media-preview-border-radius) var(--media-preview-border-radius));
        min-width: 100%;
      }

      :host([${MediaUIAttributes.MEDIA_PREVIEW_TIME}]:hover) {
        --media-time-range-hover-display: block;
      }

      [part~="arrow"],
      ::slotted([part~="arrow"]) {
        display: var(--media-box-arrow-display, inline-block);
        transform: translateX(min(
          max(calc(50% - var(--_box-width) / 2 + var(--media-box-arrow-offset)),
          calc(var(--_box-shift, 0))),
          calc(var(--_box-width) / 2 - 50% - var(--media-box-arrow-offset))
        ));
        
        border-color: transparent;
        border-top-color: var(--media-box-arrow-background, var(--_control-background));
        border-width: var(--media-box-arrow-border-width,
          var(--media-box-arrow-height, 5px) var(--media-box-arrow-width, 6px) 0);
        border-style: solid;
        justify-content: center;
        height: 0;
      }
    </style>
    <div id="preview-rail">
      <slot name="preview" part="box preview-box">
        <media-preview-thumbnail>
          <template shadowrootmode="${media_preview_thumbnail_default.shadowRootOptions.mode}">
            ${media_preview_thumbnail_default.getTemplateHTML({})}
          </template>
        </media-preview-thumbnail>
        <media-preview-chapter-display></media-preview-chapter-display>
        <media-preview-time-display></media-preview-time-display>
        <slot name="preview-arrow"><div part="arrow"></div></slot>
      </slot>
    </div>
    <div id="current-rail">
      <slot name="current" part="box current-box">
        
      </slot>
    </div>
  `;
}
var calcRangeValueFromTime = (el, time = el.mediaCurrentTime) => {
	const startTime = Number.isFinite(el.mediaSeekableStart) ? el.mediaSeekableStart : 0;
	const endTime = Number.isFinite(el.mediaDuration) ? el.mediaDuration : el.mediaSeekableEnd;
	if (Number.isNaN(endTime)) return 0;
	const value = (time - startTime) / (endTime - startTime);
	return Math.max(0, Math.min(value, 1));
};
var calcTimeFromRangeValue = (el, value = el.range.valueAsNumber) => {
	const startTime = Number.isFinite(el.mediaSeekableStart) ? el.mediaSeekableStart : 0;
	const endTime = Number.isFinite(el.mediaDuration) ? el.mediaDuration : el.mediaSeekableEnd;
	if (Number.isNaN(endTime)) return 0;
	return value * (endTime - startTime) + startTime;
};
var MediaTimeRange = class extends MediaChromeRange {
	constructor() {
		super();
		__privateAdd(this, _toggleRangeAnimation);
		__privateAdd(this, _shouldRangeAnimate);
		__privateAdd(this, _getElementRects);
		/**
		* Get the position, max and min for the box in percentage.
		* It's important this is in percentage so when the player is resized
		* the box will move accordingly.
		*/
		__privateAdd(this, _getBoxPosition);
		__privateAdd(this, _getBoxShiftPosition);
		__privateAdd(this, _handlePointerMove);
		__privateAdd(this, _previewRequest);
		__privateAdd(this, _seekRequest);
		__privateAdd(this, _rootNode, void 0);
		__privateAdd(this, _animation, void 0);
		__privateAdd(this, _boxes, void 0);
		__privateAdd(this, _previewTime, void 0);
		__privateAdd(this, _previewBox, void 0);
		__privateAdd(this, _currentBox, void 0);
		__privateAdd(this, _boxPaddingLeft, void 0);
		__privateAdd(this, _boxPaddingRight, void 0);
		__privateAdd(this, _mediaChaptersCues, void 0);
		__privateAdd(this, _isPointerDown, void 0);
		__privateAdd(this, _updateRange, (value) => {
			if (this.dragging) return;
			if (isValidNumber(value)) this.range.valueAsNumber = value;
			if (!__privateGet(this, _isPointerDown)) this.updateBar();
		});
		this.shadowRoot.querySelector("#track").insertAdjacentHTML("afterbegin", "<div id=\"buffered\" part=\"buffered\"></div>");
		__privateSet(this, _boxes, this.shadowRoot.querySelectorAll("[part~=\"box\"]"));
		__privateSet(this, _previewBox, this.shadowRoot.querySelector("[part~=\"preview-box\"]"));
		__privateSet(this, _currentBox, this.shadowRoot.querySelector("[part~=\"current-box\"]"));
		const computedStyle = getComputedStyle(this);
		__privateSet(this, _boxPaddingLeft, parseInt(computedStyle.getPropertyValue("--media-box-padding-left")));
		__privateSet(this, _boxPaddingRight, parseInt(computedStyle.getPropertyValue("--media-box-padding-right")));
		__privateSet(this, _animation, new RangeAnimation(this.range, __privateGet(this, _updateRange), 60));
	}
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_PAUSED,
			MediaUIAttributes.MEDIA_DURATION,
			MediaUIAttributes.MEDIA_SEEKABLE,
			MediaUIAttributes.MEDIA_CURRENT_TIME,
			MediaUIAttributes.MEDIA_PREVIEW_IMAGE,
			MediaUIAttributes.MEDIA_PREVIEW_TIME,
			MediaUIAttributes.MEDIA_PREVIEW_CHAPTER,
			MediaUIAttributes.MEDIA_BUFFERED,
			MediaUIAttributes.MEDIA_PLAYBACK_RATE,
			MediaUIAttributes.MEDIA_LOADING,
			MediaUIAttributes.MEDIA_ENDED
		];
	}
	connectedCallback() {
		var _a$1;
		super.connectedCallback();
		this.range.setAttribute("aria-label", t("seek"));
		__privateMethod(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this);
		__privateSet(this, _rootNode, this.getRootNode());
		(_a$1 = __privateGet(this, _rootNode)) == null || _a$1.addEventListener("transitionstart", this);
	}
	disconnectedCallback() {
		var _a$1;
		super.disconnectedCallback();
		__privateMethod(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this);
		(_a$1 = __privateGet(this, _rootNode)) == null || _a$1.removeEventListener("transitionstart", this);
		__privateSet(this, _rootNode, null);
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (oldValue == newValue) return;
		if (attrName === MediaUIAttributes.MEDIA_CURRENT_TIME || attrName === MediaUIAttributes.MEDIA_PAUSED || attrName === MediaUIAttributes.MEDIA_ENDED || attrName === MediaUIAttributes.MEDIA_LOADING || attrName === MediaUIAttributes.MEDIA_DURATION || attrName === MediaUIAttributes.MEDIA_SEEKABLE) {
			__privateGet(this, _animation).update({
				start: calcRangeValueFromTime(this),
				duration: this.mediaSeekableEnd - this.mediaSeekableStart,
				playbackRate: this.mediaPlaybackRate
			});
			__privateMethod(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this);
			updateAriaValueText(this);
		} else if (attrName === MediaUIAttributes.MEDIA_BUFFERED) this.updateBufferedBar();
		if (attrName === MediaUIAttributes.MEDIA_DURATION || attrName === MediaUIAttributes.MEDIA_SEEKABLE) {
			this.mediaChaptersCues = __privateGet(this, _mediaChaptersCues);
			this.updateBar();
		}
	}
	get mediaChaptersCues() {
		return __privateGet(this, _mediaChaptersCues);
	}
	set mediaChaptersCues(value) {
		var _a$1;
		__privateSet(this, _mediaChaptersCues, value);
		this.updateSegments((_a$1 = __privateGet(this, _mediaChaptersCues)) == null ? void 0 : _a$1.map((c) => ({
			start: calcRangeValueFromTime(this, c.startTime),
			end: calcRangeValueFromTime(this, c.endTime)
		})));
	}
	/**
	* Is the media paused
	*/
	get mediaPaused() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);
	}
	set mediaPaused(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);
	}
	/**
	* Is the media loading
	*/
	get mediaLoading() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING);
	}
	set mediaLoading(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_LOADING, value);
	}
	/**
	*
	*/
	get mediaDuration() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_DURATION);
	}
	set mediaDuration(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_DURATION, value);
	}
	/**
	*
	*/
	get mediaCurrentTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME);
	}
	set mediaCurrentTime(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_CURRENT_TIME, value);
	}
	/**
	*
	*/
	get mediaPlaybackRate() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, 1);
	}
	set mediaPlaybackRate(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PLAYBACK_RATE, value);
	}
	/**
	* An array of ranges, each range being an array of two numbers.
	* e.g. [[1, 2], [3, 4]]
	*/
	get mediaBuffered() {
		const buffered = this.getAttribute(MediaUIAttributes.MEDIA_BUFFERED);
		if (!buffered) return [];
		return buffered.split(" ").map((timePair) => timePair.split(":").map((timeStr) => +timeStr));
	}
	set mediaBuffered(list) {
		if (!list) {
			this.removeAttribute(MediaUIAttributes.MEDIA_BUFFERED);
			return;
		}
		const strVal = list.map((tuple) => tuple.join(":")).join(" ");
		this.setAttribute(MediaUIAttributes.MEDIA_BUFFERED, strVal);
	}
	/**
	* Range of values that can be seeked to
	* An array of two numbers [start, end]
	*/
	get mediaSeekable() {
		const seekable = this.getAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
		if (!seekable) return void 0;
		return seekable.split(":").map((time) => +time);
	}
	set mediaSeekable(range) {
		if (range == null) {
			this.removeAttribute(MediaUIAttributes.MEDIA_SEEKABLE);
			return;
		}
		this.setAttribute(MediaUIAttributes.MEDIA_SEEKABLE, range.join(":"));
	}
	/**
	*
	*/
	get mediaSeekableEnd() {
		var _a$1;
		const [, end = this.mediaDuration] = (_a$1 = this.mediaSeekable) != null ? _a$1 : [];
		return end;
	}
	get mediaSeekableStart() {
		var _a$1;
		const [start = 0] = (_a$1 = this.mediaSeekable) != null ? _a$1 : [];
		return start;
	}
	/**
	* The url of the preview image
	*/
	get mediaPreviewImage() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE);
	}
	set mediaPreviewImage(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_PREVIEW_IMAGE, value);
	}
	/**
	*
	*/
	get mediaPreviewTime() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME);
	}
	set mediaPreviewTime(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_PREVIEW_TIME, value);
	}
	/**
	*
	*/
	get mediaEnded() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_ENDED);
	}
	set mediaEnded(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_ENDED, value);
	}
	updateBar() {
		super.updateBar();
		this.updateBufferedBar();
		this.updateCurrentBox();
	}
	updateBufferedBar() {
		var _a$1;
		const buffered = this.mediaBuffered;
		if (!buffered.length) return;
		let relativeBufferedEnd;
		if (!this.mediaEnded) {
			const currentTime = this.mediaCurrentTime;
			const [, bufferedEnd = this.mediaSeekableStart] = (_a$1 = buffered.find(([start, end]) => start <= currentTime && currentTime <= end)) != null ? _a$1 : [];
			relativeBufferedEnd = calcRangeValueFromTime(this, bufferedEnd);
		} else relativeBufferedEnd = 1;
		const { style } = getOrInsertCSSRule(this.shadowRoot, "#buffered");
		style.setProperty("width", `${relativeBufferedEnd * 100}%`);
	}
	updateCurrentBox() {
		if (!this.shadowRoot.querySelector("slot[name=\"current\"]").assignedElements().length) return;
		const currentRailRule = getOrInsertCSSRule(this.shadowRoot, "#current-rail");
		const currentBoxRule = getOrInsertCSSRule(this.shadowRoot, "[part~=\"current-box\"]");
		const rects = __privateMethod(this, _getElementRects, getElementRects_fn).call(this, __privateGet(this, _currentBox));
		const boxPos = __privateMethod(this, _getBoxPosition, getBoxPosition_fn).call(this, rects, this.range.valueAsNumber);
		const boxShift = __privateMethod(this, _getBoxShiftPosition, getBoxShiftPosition_fn).call(this, rects, this.range.valueAsNumber);
		currentRailRule.style.transform = `translateX(${boxPos})`;
		currentRailRule.style.setProperty("--_range-width", `${rects.range.width}`);
		currentBoxRule.style.setProperty("--_box-shift", `${boxShift}`);
		currentBoxRule.style.setProperty("--_box-width", `${rects.box.width}px`);
		currentBoxRule.style.setProperty("visibility", "initial");
	}
	handleEvent(evt) {
		super.handleEvent(evt);
		switch (evt.type) {
			case "input":
				__privateMethod(this, _seekRequest, seekRequest_fn).call(this);
				break;
			case "pointermove":
				__privateMethod(this, _handlePointerMove, handlePointerMove_fn).call(this, evt);
				break;
			case "pointerup":
				if (__privateGet(this, _isPointerDown)) __privateSet(this, _isPointerDown, false);
				break;
			case "pointerdown":
				__privateSet(this, _isPointerDown, true);
				break;
			case "pointerleave":
				__privateMethod(this, _previewRequest, previewRequest_fn).call(this, null);
				break;
			case "transitionstart":
				if (containsComposedNode(evt.target, this)) setTimeout(() => __privateMethod(this, _toggleRangeAnimation, toggleRangeAnimation_fn).call(this), 0);
				break;
		}
	}
};
_rootNode = /* @__PURE__ */ new WeakMap();
_animation = /* @__PURE__ */ new WeakMap();
_boxes = /* @__PURE__ */ new WeakMap();
_previewTime = /* @__PURE__ */ new WeakMap();
_previewBox = /* @__PURE__ */ new WeakMap();
_currentBox = /* @__PURE__ */ new WeakMap();
_boxPaddingLeft = /* @__PURE__ */ new WeakMap();
_boxPaddingRight = /* @__PURE__ */ new WeakMap();
_mediaChaptersCues = /* @__PURE__ */ new WeakMap();
_isPointerDown = /* @__PURE__ */ new WeakMap();
_toggleRangeAnimation = /* @__PURE__ */ new WeakSet();
toggleRangeAnimation_fn = function() {
	if (__privateMethod(this, _shouldRangeAnimate, shouldRangeAnimate_fn).call(this)) __privateGet(this, _animation).start();
	else __privateGet(this, _animation).stop();
};
_shouldRangeAnimate = /* @__PURE__ */ new WeakSet();
shouldRangeAnimate_fn = function() {
	return this.isConnected && !this.mediaPaused && !this.mediaLoading && !this.mediaEnded && this.mediaSeekableEnd > 0 && isElementVisible(this);
};
_updateRange = /* @__PURE__ */ new WeakMap();
_getElementRects = /* @__PURE__ */ new WeakSet();
getElementRects_fn = function(box) {
	var _a$1;
	const boundsRect = ((_a$1 = this.getAttribute("bounds") ? closestComposedNode(this, `#${this.getAttribute("bounds")}`) : this.parentElement) != null ? _a$1 : this).getBoundingClientRect();
	const rangeRect = this.range.getBoundingClientRect();
	const width = box.offsetWidth;
	const min = -(rangeRect.left - boundsRect.left - width / 2);
	const max = boundsRect.right - rangeRect.left - width / 2;
	return {
		box: {
			width,
			min,
			max
		},
		bounds: boundsRect,
		range: rangeRect
	};
};
_getBoxPosition = /* @__PURE__ */ new WeakSet();
getBoxPosition_fn = function(rects, ratio) {
	let position = `${ratio * 100}%`;
	const { width, min, max } = rects.box;
	if (!width) return position;
	if (!Number.isNaN(min)) position = `max(${`calc(1 / var(--_range-width) * 100 * ${min}% + var(--media-box-padding-left))`}, ${position})`;
	if (!Number.isNaN(max)) {
		const maxPos = `calc(1 / var(--_range-width) * 100 * ${max}% - var(--media-box-padding-right))`;
		position = `min(${position}, ${maxPos})`;
	}
	return position;
};
_getBoxShiftPosition = /* @__PURE__ */ new WeakSet();
getBoxShiftPosition_fn = function(rects, ratio) {
	const { width, min, max } = rects.box;
	const pointerX = ratio * rects.range.width;
	if (pointerX < min + __privateGet(this, _boxPaddingLeft)) {
		const offset = rects.range.left - rects.bounds.left - __privateGet(this, _boxPaddingLeft);
		return `${pointerX - width / 2 + offset}px`;
	}
	if (pointerX > max - __privateGet(this, _boxPaddingRight)) {
		const offset = rects.bounds.right - rects.range.right - __privateGet(this, _boxPaddingRight);
		return `${pointerX + width / 2 - offset - rects.range.width}px`;
	}
	return 0;
};
_handlePointerMove = /* @__PURE__ */ new WeakSet();
handlePointerMove_fn = function(evt) {
	const isOverBoxes = [...__privateGet(this, _boxes)].some((b) => evt.composedPath().includes(b));
	if (!this.dragging && (isOverBoxes || !evt.composedPath().includes(this))) {
		__privateMethod(this, _previewRequest, previewRequest_fn).call(this, null);
		return;
	}
	const duration = this.mediaSeekableEnd;
	if (!duration) return;
	const previewRailRule = getOrInsertCSSRule(this.shadowRoot, "#preview-rail");
	const previewBoxRule = getOrInsertCSSRule(this.shadowRoot, "[part~=\"preview-box\"]");
	const rects = __privateMethod(this, _getElementRects, getElementRects_fn).call(this, __privateGet(this, _previewBox));
	let pointerRatio = (evt.clientX - rects.range.left) / rects.range.width;
	pointerRatio = Math.max(0, Math.min(1, pointerRatio));
	const boxPos = __privateMethod(this, _getBoxPosition, getBoxPosition_fn).call(this, rects, pointerRatio);
	const boxShift = __privateMethod(this, _getBoxShiftPosition, getBoxShiftPosition_fn).call(this, rects, pointerRatio);
	previewRailRule.style.transform = `translateX(${boxPos})`;
	previewRailRule.style.setProperty("--_range-width", `${rects.range.width}`);
	previewBoxRule.style.setProperty("--_box-shift", `${boxShift}`);
	previewBoxRule.style.setProperty("--_box-width", `${rects.box.width}px`);
	const diff = Math.round(__privateGet(this, _previewTime)) - Math.round(pointerRatio * duration);
	if (Math.abs(diff) < 1 && pointerRatio > .01 && pointerRatio < .99) return;
	__privateSet(this, _previewTime, pointerRatio * duration);
	__privateMethod(this, _previewRequest, previewRequest_fn).call(this, __privateGet(this, _previewTime));
};
_previewRequest = /* @__PURE__ */ new WeakSet();
previewRequest_fn = function(detail) {
	this.dispatchEvent(new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_PREVIEW_REQUEST, {
		composed: true,
		bubbles: true,
		detail
	}));
};
_seekRequest = /* @__PURE__ */ new WeakSet();
seekRequest_fn = function() {
	__privateGet(this, _animation).stop();
	const detail = calcTimeFromRangeValue(this);
	this.dispatchEvent(new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {
		composed: true,
		bubbles: true,
		detail
	}));
};
MediaTimeRange.shadowRootOptions = { mode: "open" };
MediaTimeRange.getTemplateHTML = getTemplateHTML;
if (!GlobalThis.customElements.get("media-time-range")) GlobalThis.customElements.define("media-time-range", MediaTimeRange);
var media_time_range_default = MediaTimeRange;

//#endregion
//#region node_modules/media-chrome/dist/media-volume-range.js
var DEFAULT_VOLUME = 1;
var toVolume = (el) => {
	if (el.mediaMuted) return 0;
	return el.mediaVolume;
};
var formatAsPercentString = (value) => `${Math.round(value * 100)}%`;
var MediaVolumeRange = class extends MediaChromeRange {
	static get observedAttributes() {
		return [
			...super.observedAttributes,
			MediaUIAttributes.MEDIA_VOLUME,
			MediaUIAttributes.MEDIA_MUTED,
			MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE
		];
	}
	constructor() {
		super();
		this.range.addEventListener("input", () => {
			const detail = this.range.value;
			const evt = new GlobalThis.CustomEvent(MediaUIEvents.MEDIA_VOLUME_REQUEST, {
				composed: true,
				bubbles: true,
				detail
			});
			this.dispatchEvent(evt);
		});
	}
	connectedCallback() {
		super.connectedCallback();
		this.range.setAttribute("aria-label", t("volume"));
	}
	attributeChangedCallback(attrName, oldValue, newValue) {
		super.attributeChangedCallback(attrName, oldValue, newValue);
		if (attrName === MediaUIAttributes.MEDIA_VOLUME || attrName === MediaUIAttributes.MEDIA_MUTED) {
			this.range.valueAsNumber = toVolume(this);
			this.range.setAttribute("aria-valuetext", formatAsPercentString(this.range.valueAsNumber));
			this.updateBar();
		}
	}
	/**
	*
	*/
	get mediaVolume() {
		return getNumericAttr(this, MediaUIAttributes.MEDIA_VOLUME, DEFAULT_VOLUME);
	}
	set mediaVolume(value) {
		setNumericAttr(this, MediaUIAttributes.MEDIA_VOLUME, value);
	}
	/**
	* Is the media currently muted
	*/
	get mediaMuted() {
		return getBooleanAttr(this, MediaUIAttributes.MEDIA_MUTED);
	}
	set mediaMuted(value) {
		setBooleanAttr(this, MediaUIAttributes.MEDIA_MUTED, value);
	}
	/**
	* The volume unavailability state
	*/
	get mediaVolumeUnavailable() {
		return getStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE);
	}
	set mediaVolumeUnavailable(value) {
		setStringAttr(this, MediaUIAttributes.MEDIA_VOLUME_UNAVAILABLE, value);
	}
};
if (!GlobalThis.customElements.get("media-volume-range")) GlobalThis.customElements.define("media-volume-range", MediaVolumeRange);
var media_volume_range_default = MediaVolumeRange;

//#endregion
export { AttributeTokenList, Attributes$10 as Attributes, DEFAULT_RATE, DEFAULT_RATES, Document$1 as Document, GlobalThis, MediaChromeButton, MediaStateChangeEvents, MediaStateReceiverAttributes, MediaUIAttributes, MediaUIEvents, areSubsOn, camelCase, closestComposedNode, containsComposedNode, formatTextTrackObj, getActiveElement, getAttributeMediaController, getDocumentOrShadowRoot, getMediaController, getNumericAttr, getStringAttr, insertCSSRule, isNumericString, media_airplay_button_default, media_captions_button_default, media_cast_button_default, media_chrome_button_default, media_chrome_dialog_default, media_chrome_range_default, media_container_default, media_control_bar_default, media_controller_default, media_duration_display_default, media_error_dialog_default, media_fullscreen_button_default, media_gesture_receiver_default, media_live_button_default, media_loading_indicator_default, media_mute_button_default, media_pip_button_default, media_play_button_default, media_playback_rate_button_default, media_poster_image_default, media_preview_chapter_display_default, media_preview_thumbnail_default, media_preview_time_display_default, media_seek_backward_button_default, media_seek_forward_button_default, media_text_display_default, media_time_display_default, media_time_range_default, media_tooltip_default, media_volume_range_default, namedNodeMapToObject, observeResize, parseAudioTrackList, parseRenditionList, parseTextTracksStr, setNumericAttr, setStringAttr, stringifyTextTrackList, t, unobserveResize };
//# sourceMappingURL=dist-BpDDXMyG.js.map